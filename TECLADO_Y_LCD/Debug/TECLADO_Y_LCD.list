
TECLADO_Y_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800560c  0800560c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005614  08005614  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800561c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001028  20000018  08005634  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  08005634  00021040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d22  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002687  00000000  00000000  00030d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  000333f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  000341a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027aa1  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b702  00000000  00000000  0005c8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1dcf  00000000  00000000  00067fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159da2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  00159e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054f8 	.word	0x080054f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080054f8 	.word	0x080054f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000034 	.word	0x20000034
 8000510:	20000088 	.word	0x20000088

08000514 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
 8000520:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000522:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800052a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800052e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000532:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000534:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000536:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f80e 	bl	800056a <Lcd_init>

	return lcd;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	461d      	mov	r5, r3
 8000552:	f107 0410 	add.w	r4, r7, #16
 8000556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800055a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800055e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	3728      	adds	r7, #40	; 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}

0800056a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7d9b      	ldrb	r3, [r3, #22]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10c      	bne.n	8000594 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800057a:	2133      	movs	r1, #51	; 0x33
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f855 	bl	800062c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000582:	2132      	movs	r1, #50	; 0x32
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f851 	bl	800062c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800058a:	2128      	movs	r1, #40	; 0x28
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f84d 	bl	800062c <lcd_write_command>
 8000592:	e003      	b.n	800059c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000594:	2138      	movs	r1, #56	; 0x38
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f848 	bl	800062c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800059c:	2101      	movs	r1, #1
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f844 	bl	800062c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80005a4:	210c      	movs	r1, #12
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f840 	bl	800062c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80005ac:	2106      	movs	r1, #6
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f83c 	bl	800062c <lcd_write_command>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e00a      	b.n	80005e2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f856 	bl	8000688 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3301      	adds	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	7bfc      	ldrb	r4, [r7, #15]
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	429c      	cmp	r4, r3
 80005ee:	d3ed      	bcc.n	80005cc <Lcd_string+0x10>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
 8000604:	4613      	mov	r3, r2
 8000606:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <Lcd_cursor+0x30>)
 800060c:	5cd2      	ldrb	r2, [r2, r3]
 800060e:	78bb      	ldrb	r3, [r7, #2]
 8000610:	4413      	add	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	3b80      	subs	r3, #128	; 0x80
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f806 	bl	800062c <lcd_write_command>
	#endif
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	080055c0 	.word	0x080055c0

0800062c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6898      	ldr	r0, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f001 fd88 	bl	8002158 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7d9b      	ldrb	r3, [r3, #22]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d111      	bne.n	8000674 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	091b      	lsrs	r3, r3, #4
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2204      	movs	r2, #4
 8000658:	4619      	mov	r1, r3
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f842 	bl	80006e4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2204      	movs	r2, #4
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f839 	bl	80006e4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000672:	e005      	b.n	8000680 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	2208      	movs	r2, #8
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f832 	bl	80006e4 <lcd_write>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6898      	ldr	r0, [r3, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	899b      	ldrh	r3, [r3, #12]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	f001 fd5a 	bl	8002158 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7d9b      	ldrb	r3, [r3, #22]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d111      	bne.n	80006d0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	091b      	lsrs	r3, r3, #4
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2204      	movs	r2, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f814 	bl	80006e4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2204      	movs	r2, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f80b 	bl	80006e4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80006ce:	e005      	b.n	80006dc <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2208      	movs	r2, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f804 	bl	80006e4 <lcd_write>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
 80006f0:	4613      	mov	r3, r2
 80006f2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e019      	b.n	800072e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	8819      	ldrh	r1, [r3, #0]
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	fa42 f303 	asr.w	r3, r2, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	f001 fd18 	bl	8002158 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3e1      	bcc.n	80006fa <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6918      	ldr	r0, [r3, #16]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	8a9b      	ldrh	r3, [r3, #20]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	f001 fd09 	bl	8002158 <HAL_GPIO_WritePin>
	DELAY(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 fa3e 	bl	8001bc8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6918      	ldr	r0, [r3, #16]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	8a9b      	ldrh	r3, [r3, #20]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	f001 fcfe 	bl	8002158 <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b09e      	sub	sp, #120	; 0x78
 8000768:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f001 f9b1 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f86b 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f90f 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000776:	f000 f8dd 	bl	8000934 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <main+0xc4>)
 800077c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      	D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
      };

      Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000786:	4a29      	ldr	r2, [pc, #164]	; (800082c <main+0xc8>)
 8000788:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800078c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000790:	e883 0003 	stmia.w	r3, {r0, r1}

      Lcd_HandleTypeDef lcd;

      lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000794:	4638      	mov	r0, r7
 8000796:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800079a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800079e:	2300      	movs	r3, #0
 80007a0:	9303      	str	r3, [sp, #12]
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <main+0xcc>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007b4:	f7ff feae 	bl	8000514 <Lcd_create>
 80007b8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007bc:	463d      	mov	r5, r7
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007c6:	e884 0003 	stmia.w	r4, {r0, r1}

      Lcd_string(&lcd, "*Bienvenido*");
 80007ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ce:	4919      	ldr	r1, [pc, #100]	; (8000834 <main+0xd0>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fef3 	bl	80005bc <Lcd_string>

      Lcd_cursor(&lcd, 1,0);
 80007d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff0a 	bl	80005f8 <Lcd_cursor>
      Lcd_string(&lcd, "Ingrese pin: ");
 80007e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e8:	4913      	ldr	r1, [pc, #76]	; (8000838 <main+0xd4>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fee6 	bl	80005bc <Lcd_string>
//      Lcd_cursor(&lcd, 1,5);
//     Lcd_int(&lcd,cursor);



      lock_safe(); // inicializa seguro
 80007f0:	f001 f83c 	bl	800186c <lock_safe>
//
      current_state = STATE0; //inicializamos el estado
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <main+0xd8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <main+0xdc>)
 80007fc:	f107 041c 	add.w	r4, r7, #28
 8000800:	461d      	mov	r5, r3
 8000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000806:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fc0e 	bl	8004036 <osThreadCreate>
 800081a:	4602      	mov	r2, r0
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <main+0xe0>)
 800081e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000820:	f003 fc02 	bl	8004028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
 8000824:	e7fe      	b.n	8000824 <main+0xc0>
 8000826:	bf00      	nop
 8000828:	08005530 	.word	0x08005530
 800082c:	08005540 	.word	0x08005540
 8000830:	48000800 	.word	0x48000800
 8000834:	08005510 	.word	0x08005510
 8000838:	08005520 	.word	0x08005520
 800083c:	20000f94 	.word	0x20000f94
 8000840:	08005554 	.word	0x08005554
 8000844:	20000f90 	.word	0x20000f90

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0b8      	sub	sp, #224	; 0xe0
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000852:	2244      	movs	r2, #68	; 0x44
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fe2e 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2288      	movs	r2, #136	; 0x88
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 fe20 	bl	80054b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2310      	movs	r3, #16
 8000888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800089e:	230a      	movs	r3, #10
 80008a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a4:	2307      	movs	r3, #7
 80008a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fcc8 	bl	8002250 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008c6:	f001 f80d 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008ec:	2104      	movs	r1, #4
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f894 	bl	8002a1c <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008fa:	f000 fff3 	bl	80018e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008fe:	2302      	movs	r3, #2
 8000900:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fa8b 	bl	8002e24 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000914:	f000 ffe6 	bl	80018e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000918:	f44f 7000 	mov.w	r0, #512	; 0x200
 800091c:	f001 fc42 	bl	80021a4 <HAL_PWREx_ControlVoltageScaling>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000926:	f000 ffdd 	bl	80018e4 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	37e0      	adds	r7, #224	; 0xe0
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART2_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x58>)
 8000978:	f002 ff04 	bl	8003784 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 ffaf 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000fac 	.word	0x20000fac
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b4d      	ldr	r3, [pc, #308]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a46      	ldr	r2, [pc, #280]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a40      	ldr	r2, [pc, #256]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a3a      	ldr	r2, [pc, #232]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x14c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RO_Pin|LD2_Pin|D7_Pin|RS_Pin
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f649 3122 	movw	r1, #39714	; 0x9b22
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f001 fba0 	bl	8002158 <HAL_GPIO_WritePin>
                          |F2_Pin|F1_Pin|VE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|F4_Pin|F3_Pin|D5_Pin
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000a1e:	4831      	ldr	r0, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0x150>)
 8000a20:	f001 fb9a 	bl	8002158 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	482f      	ldr	r0, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x154>)
 8000a2a:	f001 fb95 	bl	8002158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_GPIO_Init+0x158>)
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <MX_GPIO_Init+0x154>)
 8000a44:	f001 f9c8 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RO_Pin LD2_Pin D7_Pin RS_Pin
                           F2_Pin F1_Pin VE_Pin */
  GPIO_InitStruct.Pin = RO_Pin|LD2_Pin|D7_Pin|RS_Pin
 8000a48:	f649 3322 	movw	r3, #39714	; 0x9b22
 8000a4c:	617b      	str	r3, [r7, #20]
                          |F2_Pin|F1_Pin|VE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 f9b8 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000a68:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f001 f9aa 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin F4_Pin F3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|F4_Pin|F3_Pin|D5_Pin
 8000a84:	f641 4330 	movw	r3, #7216	; 0x1c30
 8000a88:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_GPIO_Init+0x150>)
 8000a9e:	f001 f99b 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000aa2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <MX_GPIO_Init+0x150>)
 8000ab8:	f001 f98e 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0x154>)
 8000ad4:	f001 f980 	bl	8001dd8 <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	48000800 	.word	0x48000800
 8000aec:	10210000 	.word	0x10210000

08000af0 <contr_password>:

/* USER CODE BEGIN 4 */


void contr_password(int input){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	input = read_keypad();
 8000af8:	f000 fd10 	bl	800151c <read_keypad>
 8000afc:	4603      	mov	r3, r0
 8000afe:	607b      	str	r3, [r7, #4]
	           if(input !='F'){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b46      	cmp	r3, #70	; 0x46
 8000b04:	f000 83ad 	beq.w	8001262 <contr_password+0x772>
	         	  switch(current_state){
 8000b08:	4b69      	ldr	r3, [pc, #420]	; (8000cb0 <contr_password+0x1c0>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	f200 83a8 	bhi.w	8001262 <contr_password+0x772>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <contr_password+0x28>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b2d 	.word	0x08000b2d
 8000b1c:	08000d0d 	.word	0x08000d0d
 8000b20:	08000eed 	.word	0x08000eed
 8000b24:	080010cd 	.word	0x080010cd
 8000b28:	08001251 	.word	0x08001251
	     			case STATE0:
						if(i<4){
 8000b2c:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <contr_password+0x1c4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	f300 80b6 	bgt.w	8000ca2 <contr_password+0x1b2>
							switch(input){
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b31      	cmp	r3, #49	; 0x31
 8000b3a:	d10e      	bne.n	8000b5a <contr_password+0x6a>
								case '1':
								a1=1;
 8000b3c:	4b5e      	ldr	r3, [pc, #376]	; (8000cb8 <contr_password+0x1c8>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
								cursor("1");
 8000b42:	485e      	ldr	r0, [pc, #376]	; (8000cbc <contr_password+0x1cc>)
 8000b44:	f000 fbc2 	bl	80012cc <cursor>
								current_state = STATE0;
 8000b48:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <contr_password+0x1c0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000b4e:	4b59      	ldr	r3, [pc, #356]	; (8000cb4 <contr_password+0x1c4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <contr_password+0x1c4>)
 8000b56:	6013      	str	r3, [r2, #0]
								break;}
 8000b58:	bf00      	nop
							switch(input){
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b32      	cmp	r3, #50	; 0x32
 8000b5e:	d10e      	bne.n	8000b7e <contr_password+0x8e>
								case '2':
								a2=2;
 8000b60:	4b57      	ldr	r3, [pc, #348]	; (8000cc0 <contr_password+0x1d0>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8000b66:	4857      	ldr	r0, [pc, #348]	; (8000cc4 <contr_password+0x1d4>)
 8000b68:	f000 fbb0 	bl	80012cc <cursor>
								current_state = STATE1;
 8000b6c:	4b50      	ldr	r3, [pc, #320]	; (8000cb0 <contr_password+0x1c0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <contr_password+0x1c4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a4e      	ldr	r2, [pc, #312]	; (8000cb4 <contr_password+0x1c4>)
 8000b7a:	6013      	str	r3, [r2, #0]
								break;}
 8000b7c:	bf00      	nop
							switch(input){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b33      	cmp	r3, #51	; 0x33
 8000b82:	d10e      	bne.n	8000ba2 <contr_password+0xb2>
								case '3':
								a3=3;
 8000b84:	4b50      	ldr	r3, [pc, #320]	; (8000cc8 <contr_password+0x1d8>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8000b8a:	4850      	ldr	r0, [pc, #320]	; (8000ccc <contr_password+0x1dc>)
 8000b8c:	f000 fb9e 	bl	80012cc <cursor>
								current_state = STATE0;
 8000b90:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <contr_password+0x1c0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000b96:	4b47      	ldr	r3, [pc, #284]	; (8000cb4 <contr_password+0x1c4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	4a45      	ldr	r2, [pc, #276]	; (8000cb4 <contr_password+0x1c4>)
 8000b9e:	6013      	str	r3, [r2, #0]
								break;}
 8000ba0:	bf00      	nop
							switch(input){
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b34      	cmp	r3, #52	; 0x34
 8000ba6:	d10e      	bne.n	8000bc6 <contr_password+0xd6>
								case '4':
								a4=4;
 8000ba8:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <contr_password+0x1e0>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	701a      	strb	r2, [r3, #0]
								cursor("4");
 8000bae:	4849      	ldr	r0, [pc, #292]	; (8000cd4 <contr_password+0x1e4>)
 8000bb0:	f000 fb8c 	bl	80012cc <cursor>
								current_state = STATE0;
 8000bb4:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <contr_password+0x1c0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <contr_password+0x1c4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a3c      	ldr	r2, [pc, #240]	; (8000cb4 <contr_password+0x1c4>)
 8000bc2:	6013      	str	r3, [r2, #0]
								break;}
 8000bc4:	bf00      	nop
							switch(input){
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b35      	cmp	r3, #53	; 0x35
 8000bca:	d10e      	bne.n	8000bea <contr_password+0xfa>
								case '5':
								a5=5;
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <contr_password+0x1e8>)
 8000bce:	2205      	movs	r2, #5
 8000bd0:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8000bd2:	4842      	ldr	r0, [pc, #264]	; (8000cdc <contr_password+0x1ec>)
 8000bd4:	f000 fb7a 	bl	80012cc <cursor>
								current_state = STATE0;
 8000bd8:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <contr_password+0x1c0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <contr_password+0x1c4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <contr_password+0x1c4>)
 8000be6:	6013      	str	r3, [r2, #0]
								break;}
 8000be8:	bf00      	nop
							switch(input){
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b36      	cmp	r3, #54	; 0x36
 8000bee:	d10e      	bne.n	8000c0e <contr_password+0x11e>
								case '6':
								a6=6;
 8000bf0:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <contr_password+0x1f0>)
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8000bf6:	483b      	ldr	r0, [pc, #236]	; (8000ce4 <contr_password+0x1f4>)
 8000bf8:	f000 fb68 	bl	80012cc <cursor>
								current_state = STATE0;
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <contr_password+0x1c0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <contr_password+0x1c4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <contr_password+0x1c4>)
 8000c0a:	6013      	str	r3, [r2, #0]
								break;}
 8000c0c:	bf00      	nop
							switch(input){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b37      	cmp	r3, #55	; 0x37
 8000c12:	d10e      	bne.n	8000c32 <contr_password+0x142>
								case '7':
								a7=7;
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <contr_password+0x1f8>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8000c1a:	4834      	ldr	r0, [pc, #208]	; (8000cec <contr_password+0x1fc>)
 8000c1c:	f000 fb56 	bl	80012cc <cursor>
								current_state = STATE0;
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <contr_password+0x1c0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <contr_password+0x1c4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <contr_password+0x1c4>)
 8000c2e:	6013      	str	r3, [r2, #0]
								break;}
 8000c30:	bf00      	nop
							switch(input){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b38      	cmp	r3, #56	; 0x38
 8000c36:	d10e      	bne.n	8000c56 <contr_password+0x166>
								case '8':
								a8=8;
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <contr_password+0x200>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	701a      	strb	r2, [r3, #0]
								cursor("8");
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <contr_password+0x204>)
 8000c40:	f000 fb44 	bl	80012cc <cursor>
								current_state = STATE0;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <contr_password+0x1c0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <contr_password+0x1c4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <contr_password+0x1c4>)
 8000c52:	6013      	str	r3, [r2, #0]
								break;}
 8000c54:	bf00      	nop
							switch(input){
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b39      	cmp	r3, #57	; 0x39
 8000c5a:	d10e      	bne.n	8000c7a <contr_password+0x18a>
								case '9':
								a9=9;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <contr_password+0x208>)
 8000c5e:	2209      	movs	r2, #9
 8000c60:	701a      	strb	r2, [r3, #0]
								cursor("9");
 8000c62:	4826      	ldr	r0, [pc, #152]	; (8000cfc <contr_password+0x20c>)
 8000c64:	f000 fb32 	bl	80012cc <cursor>
								current_state = STATE0;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <contr_password+0x1c0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <contr_password+0x1c4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <contr_password+0x1c4>)
 8000c76:	6013      	str	r3, [r2, #0]
								break;}
 8000c78:	bf00      	nop
							switch(input){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b30      	cmp	r3, #48	; 0x30
 8000c7e:	d000      	beq.n	8000c82 <contr_password+0x192>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
	                break;
 8000c80:	e2ef      	b.n	8001262 <contr_password+0x772>
								a0=0;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <contr_password+0x210>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8000c88:	481e      	ldr	r0, [pc, #120]	; (8000d04 <contr_password+0x214>)
 8000c8a:	f000 fb1f 	bl	80012cc <cursor>
								current_state = STATE0;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <contr_password+0x1c0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <contr_password+0x1c4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <contr_password+0x1c4>)
 8000c9c:	6013      	str	r3, [r2, #0]
								break;}
 8000c9e:	bf00      	nop
	                break;
 8000ca0:	e2df      	b.n	8001262 <contr_password+0x772>
							current_state = STATE0;
 8000ca2:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <contr_password+0x1c0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
							error("");
 8000ca8:	4817      	ldr	r0, [pc, #92]	; (8000d08 <contr_password+0x218>)
 8000caa:	f000 fbe1 	bl	8001470 <error>
	                break;
 8000cae:	e2d8      	b.n	8001262 <contr_password+0x772>
 8000cb0:	20000f94 	.word	0x20000f94
 8000cb4:	20000288 	.word	0x20000288
 8000cb8:	20000f98 	.word	0x20000f98
 8000cbc:	08005570 	.word	0x08005570
 8000cc0:	20000f9d 	.word	0x20000f9d
 8000cc4:	08005574 	.word	0x08005574
 8000cc8:	20000f99 	.word	0x20000f99
 8000ccc:	08005578 	.word	0x08005578
 8000cd0:	20001039 	.word	0x20001039
 8000cd4:	0800557c 	.word	0x0800557c
 8000cd8:	20000f9c 	.word	0x20000f9c
 8000cdc:	08005580 	.word	0x08005580
 8000ce0:	20001038 	.word	0x20001038
 8000ce4:	08005584 	.word	0x08005584
 8000ce8:	20000f9b 	.word	0x20000f9b
 8000cec:	08005588 	.word	0x08005588
 8000cf0:	20000f96 	.word	0x20000f96
 8000cf4:	0800558c 	.word	0x0800558c
 8000cf8:	20000f95 	.word	0x20000f95
 8000cfc:	08005590 	.word	0x08005590
 8000d00:	20001037 	.word	0x20001037
 8000d04:	08005594 	.word	0x08005594
 8000d08:	08005598 	.word	0x08005598
	     			case STATE1:
						if(i<4){
 8000d0c:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <contr_password+0x3a0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	f300 80b6 	bgt.w	8000e82 <contr_password+0x392>
							switch(input){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b31      	cmp	r3, #49	; 0x31
 8000d1a:	d10e      	bne.n	8000d3a <contr_password+0x24a>
								case '1':
								a1=1;
 8000d1c:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <contr_password+0x3a4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
								cursor("1");
 8000d22:	485d      	ldr	r0, [pc, #372]	; (8000e98 <contr_password+0x3a8>)
 8000d24:	f000 fad2 	bl	80012cc <cursor>
								current_state = STATE1;
 8000d28:	4b5c      	ldr	r3, [pc, #368]	; (8000e9c <contr_password+0x3ac>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000d2e:	4b58      	ldr	r3, [pc, #352]	; (8000e90 <contr_password+0x3a0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a56      	ldr	r2, [pc, #344]	; (8000e90 <contr_password+0x3a0>)
 8000d36:	6013      	str	r3, [r2, #0]
								break;}
 8000d38:	bf00      	nop
							switch(input){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b32      	cmp	r3, #50	; 0x32
 8000d3e:	d10e      	bne.n	8000d5e <contr_password+0x26e>
								case '2':
								a2=2;
 8000d40:	4b57      	ldr	r3, [pc, #348]	; (8000ea0 <contr_password+0x3b0>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8000d46:	4857      	ldr	r0, [pc, #348]	; (8000ea4 <contr_password+0x3b4>)
 8000d48:	f000 fac0 	bl	80012cc <cursor>
								current_state = STATE1;
 8000d4c:	4b53      	ldr	r3, [pc, #332]	; (8000e9c <contr_password+0x3ac>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000d52:	4b4f      	ldr	r3, [pc, #316]	; (8000e90 <contr_password+0x3a0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a4d      	ldr	r2, [pc, #308]	; (8000e90 <contr_password+0x3a0>)
 8000d5a:	6013      	str	r3, [r2, #0]
								break;}
 8000d5c:	bf00      	nop
							switch(input){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b33      	cmp	r3, #51	; 0x33
 8000d62:	d10e      	bne.n	8000d82 <contr_password+0x292>
								case '3':
								a3=3;
 8000d64:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <contr_password+0x3b8>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8000d6a:	4850      	ldr	r0, [pc, #320]	; (8000eac <contr_password+0x3bc>)
 8000d6c:	f000 faae 	bl	80012cc <cursor>
								current_state = STATE1;
 8000d70:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <contr_password+0x3ac>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000d76:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <contr_password+0x3a0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a44      	ldr	r2, [pc, #272]	; (8000e90 <contr_password+0x3a0>)
 8000d7e:	6013      	str	r3, [r2, #0]
								break;}
 8000d80:	bf00      	nop
							switch(input){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b34      	cmp	r3, #52	; 0x34
 8000d86:	d10e      	bne.n	8000da6 <contr_password+0x2b6>
								case '4':
								a4=4;
 8000d88:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <contr_password+0x3c0>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	701a      	strb	r2, [r3, #0]
								cursor("4");
 8000d8e:	4849      	ldr	r0, [pc, #292]	; (8000eb4 <contr_password+0x3c4>)
 8000d90:	f000 fa9c 	bl	80012cc <cursor>
								current_state = STATE1;
 8000d94:	4b41      	ldr	r3, [pc, #260]	; (8000e9c <contr_password+0x3ac>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <contr_password+0x3a0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a3b      	ldr	r2, [pc, #236]	; (8000e90 <contr_password+0x3a0>)
 8000da2:	6013      	str	r3, [r2, #0]
								break;}
 8000da4:	bf00      	nop
							switch(input){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b35      	cmp	r3, #53	; 0x35
 8000daa:	d10e      	bne.n	8000dca <contr_password+0x2da>
								case '5':
								a5=5;
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <contr_password+0x3c8>)
 8000dae:	2205      	movs	r2, #5
 8000db0:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8000db2:	4842      	ldr	r0, [pc, #264]	; (8000ebc <contr_password+0x3cc>)
 8000db4:	f000 fa8a 	bl	80012cc <cursor>
								current_state = STATE1;
 8000db8:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <contr_password+0x3ac>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <contr_password+0x3a0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a32      	ldr	r2, [pc, #200]	; (8000e90 <contr_password+0x3a0>)
 8000dc6:	6013      	str	r3, [r2, #0]
								break;}
 8000dc8:	bf00      	nop
							switch(input){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b36      	cmp	r3, #54	; 0x36
 8000dce:	d10e      	bne.n	8000dee <contr_password+0x2fe>
								case '6':
								a6=6;
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <contr_password+0x3d0>)
 8000dd2:	2206      	movs	r2, #6
 8000dd4:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8000dd6:	483b      	ldr	r0, [pc, #236]	; (8000ec4 <contr_password+0x3d4>)
 8000dd8:	f000 fa78 	bl	80012cc <cursor>
								current_state = STATE1;
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <contr_password+0x3ac>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <contr_password+0x3a0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <contr_password+0x3a0>)
 8000dea:	6013      	str	r3, [r2, #0]
								break;}
 8000dec:	bf00      	nop
							switch(input){
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b37      	cmp	r3, #55	; 0x37
 8000df2:	d10e      	bne.n	8000e12 <contr_password+0x322>
								case '7':
								a7=7;
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <contr_password+0x3d8>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <contr_password+0x3dc>)
 8000dfc:	f000 fa66 	bl	80012cc <cursor>
								current_state = STATE1;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <contr_password+0x3ac>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <contr_password+0x3a0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <contr_password+0x3a0>)
 8000e0e:	6013      	str	r3, [r2, #0]
								break;}
 8000e10:	bf00      	nop
							switch(input){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b38      	cmp	r3, #56	; 0x38
 8000e16:	d10e      	bne.n	8000e36 <contr_password+0x346>
								case '8':
								a8=8;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <contr_password+0x3e0>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	701a      	strb	r2, [r3, #0]
								cursor("8");
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <contr_password+0x3e4>)
 8000e20:	f000 fa54 	bl	80012cc <cursor>
								current_state = STATE1;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <contr_password+0x3ac>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <contr_password+0x3a0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <contr_password+0x3a0>)
 8000e32:	6013      	str	r3, [r2, #0]
								break;}
 8000e34:	bf00      	nop
							switch(input){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b39      	cmp	r3, #57	; 0x39
 8000e3a:	d10e      	bne.n	8000e5a <contr_password+0x36a>
								case '9':
								a9=9;
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <contr_password+0x3e8>)
 8000e3e:	2209      	movs	r2, #9
 8000e40:	701a      	strb	r2, [r3, #0]
								cursor("9");
 8000e42:	4826      	ldr	r0, [pc, #152]	; (8000edc <contr_password+0x3ec>)
 8000e44:	f000 fa42 	bl	80012cc <cursor>
								current_state = STATE1;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <contr_password+0x3ac>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <contr_password+0x3a0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <contr_password+0x3a0>)
 8000e56:	6013      	str	r3, [r2, #0]
								break;}
 8000e58:	bf00      	nop
							switch(input){
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b30      	cmp	r3, #48	; 0x30
 8000e5e:	d000      	beq.n	8000e62 <contr_password+0x372>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
	                break;
 8000e60:	e1ff      	b.n	8001262 <contr_password+0x772>
								a0=0;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <contr_password+0x3f0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8000e68:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <contr_password+0x3f4>)
 8000e6a:	f000 fa2f 	bl	80012cc <cursor>
								current_state = STATE2;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <contr_password+0x3ac>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <contr_password+0x3a0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <contr_password+0x3a0>)
 8000e7c:	6013      	str	r3, [r2, #0]
								break;}
 8000e7e:	bf00      	nop
	                break;
 8000e80:	e1ef      	b.n	8001262 <contr_password+0x772>
							current_state = STATE0;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <contr_password+0x3ac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
							error("");
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <contr_password+0x3f8>)
 8000e8a:	f000 faf1 	bl	8001470 <error>
	                break;
 8000e8e:	e1e8      	b.n	8001262 <contr_password+0x772>
 8000e90:	20000288 	.word	0x20000288
 8000e94:	20000f98 	.word	0x20000f98
 8000e98:	08005570 	.word	0x08005570
 8000e9c:	20000f94 	.word	0x20000f94
 8000ea0:	20000f9d 	.word	0x20000f9d
 8000ea4:	08005574 	.word	0x08005574
 8000ea8:	20000f99 	.word	0x20000f99
 8000eac:	08005578 	.word	0x08005578
 8000eb0:	20001039 	.word	0x20001039
 8000eb4:	0800557c 	.word	0x0800557c
 8000eb8:	20000f9c 	.word	0x20000f9c
 8000ebc:	08005580 	.word	0x08005580
 8000ec0:	20001038 	.word	0x20001038
 8000ec4:	08005584 	.word	0x08005584
 8000ec8:	20000f9b 	.word	0x20000f9b
 8000ecc:	08005588 	.word	0x08005588
 8000ed0:	20000f96 	.word	0x20000f96
 8000ed4:	0800558c 	.word	0x0800558c
 8000ed8:	20000f95 	.word	0x20000f95
 8000edc:	08005590 	.word	0x08005590
 8000ee0:	20001037 	.word	0x20001037
 8000ee4:	08005594 	.word	0x08005594
 8000ee8:	08005598 	.word	0x08005598
	     			case STATE2:
						if(i<4){
 8000eec:	4b60      	ldr	r3, [pc, #384]	; (8001070 <contr_password+0x580>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	f300 80b6 	bgt.w	8001062 <contr_password+0x572>
							switch(input){
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b31      	cmp	r3, #49	; 0x31
 8000efa:	d10e      	bne.n	8000f1a <contr_password+0x42a>
								case '1':
								a1=1;
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <contr_password+0x584>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
								cursor("1");
 8000f02:	485d      	ldr	r0, [pc, #372]	; (8001078 <contr_password+0x588>)
 8000f04:	f000 f9e2 	bl	80012cc <cursor>
								current_state = STATE3;
 8000f08:	4b5c      	ldr	r3, [pc, #368]	; (800107c <contr_password+0x58c>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f0e:	4b58      	ldr	r3, [pc, #352]	; (8001070 <contr_password+0x580>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	4a56      	ldr	r2, [pc, #344]	; (8001070 <contr_password+0x580>)
 8000f16:	6013      	str	r3, [r2, #0]
								break;}
 8000f18:	bf00      	nop
							switch(input){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b32      	cmp	r3, #50	; 0x32
 8000f1e:	d10e      	bne.n	8000f3e <contr_password+0x44e>
								case '2':
								a2=2;
 8000f20:	4b57      	ldr	r3, [pc, #348]	; (8001080 <contr_password+0x590>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8000f26:	4857      	ldr	r0, [pc, #348]	; (8001084 <contr_password+0x594>)
 8000f28:	f000 f9d0 	bl	80012cc <cursor>
								current_state = STATE2;
 8000f2c:	4b53      	ldr	r3, [pc, #332]	; (800107c <contr_password+0x58c>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f32:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <contr_password+0x580>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <contr_password+0x580>)
 8000f3a:	6013      	str	r3, [r2, #0]
								break;}
 8000f3c:	bf00      	nop
							switch(input){
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b33      	cmp	r3, #51	; 0x33
 8000f42:	d10e      	bne.n	8000f62 <contr_password+0x472>
								case '3':
								a3=3;
 8000f44:	4b50      	ldr	r3, [pc, #320]	; (8001088 <contr_password+0x598>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8000f4a:	4850      	ldr	r0, [pc, #320]	; (800108c <contr_password+0x59c>)
 8000f4c:	f000 f9be 	bl	80012cc <cursor>
								current_state = STATE2;
 8000f50:	4b4a      	ldr	r3, [pc, #296]	; (800107c <contr_password+0x58c>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f56:	4b46      	ldr	r3, [pc, #280]	; (8001070 <contr_password+0x580>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a44      	ldr	r2, [pc, #272]	; (8001070 <contr_password+0x580>)
 8000f5e:	6013      	str	r3, [r2, #0]
								break;}
 8000f60:	bf00      	nop
							switch(input){
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b34      	cmp	r3, #52	; 0x34
 8000f66:	d10e      	bne.n	8000f86 <contr_password+0x496>
								case '4':
								a4=4;
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <contr_password+0x5a0>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	701a      	strb	r2, [r3, #0]
								cursor("4");
 8000f6e:	4849      	ldr	r0, [pc, #292]	; (8001094 <contr_password+0x5a4>)
 8000f70:	f000 f9ac 	bl	80012cc <cursor>
								current_state = STATE2;
 8000f74:	4b41      	ldr	r3, [pc, #260]	; (800107c <contr_password+0x58c>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <contr_password+0x580>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <contr_password+0x580>)
 8000f82:	6013      	str	r3, [r2, #0]
								break;}
 8000f84:	bf00      	nop
							switch(input){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b35      	cmp	r3, #53	; 0x35
 8000f8a:	d10e      	bne.n	8000faa <contr_password+0x4ba>
								case '5':
								a5=5;
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <contr_password+0x5a8>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8000f92:	4842      	ldr	r0, [pc, #264]	; (800109c <contr_password+0x5ac>)
 8000f94:	f000 f99a 	bl	80012cc <cursor>
								current_state = STATE2;
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <contr_password+0x58c>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <contr_password+0x580>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a32      	ldr	r2, [pc, #200]	; (8001070 <contr_password+0x580>)
 8000fa6:	6013      	str	r3, [r2, #0]
								break;}
 8000fa8:	bf00      	nop
							switch(input){
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b36      	cmp	r3, #54	; 0x36
 8000fae:	d10e      	bne.n	8000fce <contr_password+0x4de>
								case '6':
								a6=6;
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <contr_password+0x5b0>)
 8000fb2:	2206      	movs	r2, #6
 8000fb4:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8000fb6:	483b      	ldr	r0, [pc, #236]	; (80010a4 <contr_password+0x5b4>)
 8000fb8:	f000 f988 	bl	80012cc <cursor>
								current_state = STATE2;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <contr_password+0x58c>)
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <contr_password+0x580>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <contr_password+0x580>)
 8000fca:	6013      	str	r3, [r2, #0]
								break;}
 8000fcc:	bf00      	nop
							switch(input){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b37      	cmp	r3, #55	; 0x37
 8000fd2:	d10e      	bne.n	8000ff2 <contr_password+0x502>
								case '7':
								a7=7;
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <contr_password+0x5b8>)
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8000fda:	4834      	ldr	r0, [pc, #208]	; (80010ac <contr_password+0x5bc>)
 8000fdc:	f000 f976 	bl	80012cc <cursor>
								current_state = STATE2;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <contr_password+0x58c>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <contr_password+0x580>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a20      	ldr	r2, [pc, #128]	; (8001070 <contr_password+0x580>)
 8000fee:	6013      	str	r3, [r2, #0]
								break;}
 8000ff0:	bf00      	nop
							switch(input){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b38      	cmp	r3, #56	; 0x38
 8000ff6:	d10e      	bne.n	8001016 <contr_password+0x526>
								case '8':
								a8=8;
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <contr_password+0x5c0>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	701a      	strb	r2, [r3, #0]
								cursor("8");
 8000ffe:	482d      	ldr	r0, [pc, #180]	; (80010b4 <contr_password+0x5c4>)
 8001000:	f000 f964 	bl	80012cc <cursor>
								current_state = STATE2;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <contr_password+0x58c>)
 8001006:	2202      	movs	r2, #2
 8001008:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <contr_password+0x580>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <contr_password+0x580>)
 8001012:	6013      	str	r3, [r2, #0]
								break;}
 8001014:	bf00      	nop
							switch(input){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b39      	cmp	r3, #57	; 0x39
 800101a:	d10e      	bne.n	800103a <contr_password+0x54a>
								case '9':
								a9=9;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <contr_password+0x5c8>)
 800101e:	2209      	movs	r2, #9
 8001020:	701a      	strb	r2, [r3, #0]
								cursor("9");
 8001022:	4826      	ldr	r0, [pc, #152]	; (80010bc <contr_password+0x5cc>)
 8001024:	f000 f952 	bl	80012cc <cursor>
								current_state = STATE2;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <contr_password+0x58c>)
 800102a:	2202      	movs	r2, #2
 800102c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <contr_password+0x580>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <contr_password+0x580>)
 8001036:	6013      	str	r3, [r2, #0]
								break;}
 8001038:	bf00      	nop
							switch(input){
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b30      	cmp	r3, #48	; 0x30
 800103e:	d000      	beq.n	8001042 <contr_password+0x552>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
	     			break;
 8001040:	e10f      	b.n	8001262 <contr_password+0x772>
								a0=0;
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <contr_password+0x5d0>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8001048:	481e      	ldr	r0, [pc, #120]	; (80010c4 <contr_password+0x5d4>)
 800104a:	f000 f93f 	bl	80012cc <cursor>
								current_state = STATE2;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <contr_password+0x58c>)
 8001050:	2202      	movs	r2, #2
 8001052:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <contr_password+0x580>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <contr_password+0x580>)
 800105c:	6013      	str	r3, [r2, #0]
								break;}
 800105e:	bf00      	nop
	     			break;
 8001060:	e0ff      	b.n	8001262 <contr_password+0x772>
							current_state = STATE0;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <contr_password+0x58c>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
							error("");
 8001068:	4817      	ldr	r0, [pc, #92]	; (80010c8 <contr_password+0x5d8>)
 800106a:	f000 fa01 	bl	8001470 <error>
	     			break;
 800106e:	e0f8      	b.n	8001262 <contr_password+0x772>
 8001070:	20000288 	.word	0x20000288
 8001074:	20000f98 	.word	0x20000f98
 8001078:	08005570 	.word	0x08005570
 800107c:	20000f94 	.word	0x20000f94
 8001080:	20000f9d 	.word	0x20000f9d
 8001084:	08005574 	.word	0x08005574
 8001088:	20000f99 	.word	0x20000f99
 800108c:	08005578 	.word	0x08005578
 8001090:	20001039 	.word	0x20001039
 8001094:	0800557c 	.word	0x0800557c
 8001098:	20000f9c 	.word	0x20000f9c
 800109c:	08005580 	.word	0x08005580
 80010a0:	20001038 	.word	0x20001038
 80010a4:	08005584 	.word	0x08005584
 80010a8:	20000f9b 	.word	0x20000f9b
 80010ac:	08005588 	.word	0x08005588
 80010b0:	20000f96 	.word	0x20000f96
 80010b4:	0800558c 	.word	0x0800558c
 80010b8:	20000f95 	.word	0x20000f95
 80010bc:	08005590 	.word	0x08005590
 80010c0:	20001037 	.word	0x20001037
 80010c4:	08005594 	.word	0x08005594
 80010c8:	08005598 	.word	0x08005598
	     			case STATE3:
						if(i<4){
 80010cc:	4b67      	ldr	r3, [pc, #412]	; (800126c <contr_password+0x77c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	f300 80b6 	bgt.w	8001242 <contr_password+0x752>
							switch(input){
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b31      	cmp	r3, #49	; 0x31
 80010da:	d10e      	bne.n	80010fa <contr_password+0x60a>
								case '1':
								a1=1;
 80010dc:	4b64      	ldr	r3, [pc, #400]	; (8001270 <contr_password+0x780>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
								cursor("1");
 80010e2:	4864      	ldr	r0, [pc, #400]	; (8001274 <contr_password+0x784>)
 80010e4:	f000 f8f2 	bl	80012cc <cursor>
								current_state = STATE3;
 80010e8:	4b63      	ldr	r3, [pc, #396]	; (8001278 <contr_password+0x788>)
 80010ea:	2203      	movs	r2, #3
 80010ec:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <contr_password+0x77c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a5d      	ldr	r2, [pc, #372]	; (800126c <contr_password+0x77c>)
 80010f6:	6013      	str	r3, [r2, #0]
								break;}
 80010f8:	bf00      	nop
							switch(input){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b32      	cmp	r3, #50	; 0x32
 80010fe:	d10e      	bne.n	800111e <contr_password+0x62e>
								case '2':
								a2=2;
 8001100:	4b5e      	ldr	r3, [pc, #376]	; (800127c <contr_password+0x78c>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8001106:	485e      	ldr	r0, [pc, #376]	; (8001280 <contr_password+0x790>)
 8001108:	f000 f8e0 	bl	80012cc <cursor>
								current_state = STATE3;
 800110c:	4b5a      	ldr	r3, [pc, #360]	; (8001278 <contr_password+0x788>)
 800110e:	2203      	movs	r2, #3
 8001110:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001112:	4b56      	ldr	r3, [pc, #344]	; (800126c <contr_password+0x77c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a54      	ldr	r2, [pc, #336]	; (800126c <contr_password+0x77c>)
 800111a:	6013      	str	r3, [r2, #0]
								break;}
 800111c:	bf00      	nop
							switch(input){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b33      	cmp	r3, #51	; 0x33
 8001122:	d10e      	bne.n	8001142 <contr_password+0x652>
								case '3':
								a3=3;
 8001124:	4b57      	ldr	r3, [pc, #348]	; (8001284 <contr_password+0x794>)
 8001126:	2203      	movs	r2, #3
 8001128:	701a      	strb	r2, [r3, #0]
								cursor("3");
 800112a:	4857      	ldr	r0, [pc, #348]	; (8001288 <contr_password+0x798>)
 800112c:	f000 f8ce 	bl	80012cc <cursor>
								current_state = STATE3;
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <contr_password+0x788>)
 8001132:	2203      	movs	r2, #3
 8001134:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001136:	4b4d      	ldr	r3, [pc, #308]	; (800126c <contr_password+0x77c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a4b      	ldr	r2, [pc, #300]	; (800126c <contr_password+0x77c>)
 800113e:	6013      	str	r3, [r2, #0]
								break;}
 8001140:	bf00      	nop
							switch(input){
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b34      	cmp	r3, #52	; 0x34
 8001146:	d10e      	bne.n	8001166 <contr_password+0x676>
								case '4':
								a4=4;
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <contr_password+0x79c>)
 800114a:	2204      	movs	r2, #4
 800114c:	701a      	strb	r2, [r3, #0]
								cursor("4");
 800114e:	4850      	ldr	r0, [pc, #320]	; (8001290 <contr_password+0x7a0>)
 8001150:	f000 f8bc 	bl	80012cc <cursor>
								current_state = STATE3;
 8001154:	4b48      	ldr	r3, [pc, #288]	; (8001278 <contr_password+0x788>)
 8001156:	2203      	movs	r2, #3
 8001158:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <contr_password+0x77c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a42      	ldr	r2, [pc, #264]	; (800126c <contr_password+0x77c>)
 8001162:	6013      	str	r3, [r2, #0]
								break;}
 8001164:	bf00      	nop
							switch(input){
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b35      	cmp	r3, #53	; 0x35
 800116a:	d10e      	bne.n	800118a <contr_password+0x69a>
								case '5':
								a5=5;
 800116c:	4b49      	ldr	r3, [pc, #292]	; (8001294 <contr_password+0x7a4>)
 800116e:	2205      	movs	r2, #5
 8001170:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8001172:	4849      	ldr	r0, [pc, #292]	; (8001298 <contr_password+0x7a8>)
 8001174:	f000 f8aa 	bl	80012cc <cursor>
								current_state = STATE3;
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <contr_password+0x788>)
 800117a:	2203      	movs	r2, #3
 800117c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <contr_password+0x77c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a39      	ldr	r2, [pc, #228]	; (800126c <contr_password+0x77c>)
 8001186:	6013      	str	r3, [r2, #0]
								break;}
 8001188:	bf00      	nop
							switch(input){
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b36      	cmp	r3, #54	; 0x36
 800118e:	d10e      	bne.n	80011ae <contr_password+0x6be>
								case '6':
								a6=6;
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <contr_password+0x7ac>)
 8001192:	2206      	movs	r2, #6
 8001194:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8001196:	4842      	ldr	r0, [pc, #264]	; (80012a0 <contr_password+0x7b0>)
 8001198:	f000 f898 	bl	80012cc <cursor>
								current_state = STATE3;
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <contr_password+0x788>)
 800119e:	2203      	movs	r2, #3
 80011a0:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <contr_password+0x77c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a30      	ldr	r2, [pc, #192]	; (800126c <contr_password+0x77c>)
 80011aa:	6013      	str	r3, [r2, #0]
								break;}
 80011ac:	bf00      	nop
							switch(input){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b37      	cmp	r3, #55	; 0x37
 80011b2:	d10e      	bne.n	80011d2 <contr_password+0x6e2>
								case '7':
								a7=7;
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <contr_password+0x7b4>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	701a      	strb	r2, [r3, #0]
								cursor("7");
 80011ba:	483b      	ldr	r0, [pc, #236]	; (80012a8 <contr_password+0x7b8>)
 80011bc:	f000 f886 	bl	80012cc <cursor>
								current_state = STATE4;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <contr_password+0x788>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <contr_password+0x77c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <contr_password+0x77c>)
 80011ce:	6013      	str	r3, [r2, #0]
								break;}
 80011d0:	bf00      	nop
							switch(input){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b38      	cmp	r3, #56	; 0x38
 80011d6:	d10e      	bne.n	80011f6 <contr_password+0x706>
								case '8':
								a8=8;
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <contr_password+0x7bc>)
 80011da:	2208      	movs	r2, #8
 80011dc:	701a      	strb	r2, [r3, #0]
								cursor("8");
 80011de:	4834      	ldr	r0, [pc, #208]	; (80012b0 <contr_password+0x7c0>)
 80011e0:	f000 f874 	bl	80012cc <cursor>
								current_state = STATE3;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <contr_password+0x788>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <contr_password+0x77c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <contr_password+0x77c>)
 80011f2:	6013      	str	r3, [r2, #0]
								break;}
 80011f4:	bf00      	nop
							switch(input){
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b39      	cmp	r3, #57	; 0x39
 80011fa:	d10e      	bne.n	800121a <contr_password+0x72a>
								case '9':
								a9=9;
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <contr_password+0x7c4>)
 80011fe:	2209      	movs	r2, #9
 8001200:	701a      	strb	r2, [r3, #0]
								cursor("9");
 8001202:	482d      	ldr	r0, [pc, #180]	; (80012b8 <contr_password+0x7c8>)
 8001204:	f000 f862 	bl	80012cc <cursor>
								current_state = STATE3;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <contr_password+0x788>)
 800120a:	2203      	movs	r2, #3
 800120c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <contr_password+0x77c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <contr_password+0x77c>)
 8001216:	6013      	str	r3, [r2, #0]
								break;}
 8001218:	bf00      	nop
							switch(input){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b30      	cmp	r3, #48	; 0x30
 800121e:	d000      	beq.n	8001222 <contr_password+0x732>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
					break;
 8001220:	e01f      	b.n	8001262 <contr_password+0x772>
								a0=0;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <contr_password+0x7cc>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <contr_password+0x7d0>)
 800122a:	f000 f84f 	bl	80012cc <cursor>
								current_state = STATE3;
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <contr_password+0x788>)
 8001230:	2203      	movs	r2, #3
 8001232:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <contr_password+0x77c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a0c      	ldr	r2, [pc, #48]	; (800126c <contr_password+0x77c>)
 800123c:	6013      	str	r3, [r2, #0]
								break;}
 800123e:	bf00      	nop
					break;
 8001240:	e00f      	b.n	8001262 <contr_password+0x772>
							current_state = STATE0;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <contr_password+0x788>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
							error("");
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <contr_password+0x7d4>)
 800124a:	f000 f911 	bl	8001470 <error>
					break;
 800124e:	e008      	b.n	8001262 <contr_password+0x772>
	     			case STATE4:
						unlock_safe();
 8001250:	f000 fb1e 	bl	8001890 <unlock_safe>
						cursor("*");
 8001254:	481c      	ldr	r0, [pc, #112]	; (80012c8 <contr_password+0x7d8>)
 8001256:	f000 f839 	bl	80012cc <cursor>
						pulsa("");
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <contr_password+0x7d4>)
 800125c:	f000 f8b2 	bl	80013c4 <pulsa>
					break;
 8001260:	bf00      	nop

	     		  	  } // switch(current_state)
	           } //if(input !='F')
} //funcion
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000288 	.word	0x20000288
 8001270:	20000f98 	.word	0x20000f98
 8001274:	08005570 	.word	0x08005570
 8001278:	20000f94 	.word	0x20000f94
 800127c:	20000f9d 	.word	0x20000f9d
 8001280:	08005574 	.word	0x08005574
 8001284:	20000f99 	.word	0x20000f99
 8001288:	08005578 	.word	0x08005578
 800128c:	20001039 	.word	0x20001039
 8001290:	0800557c 	.word	0x0800557c
 8001294:	20000f9c 	.word	0x20000f9c
 8001298:	08005580 	.word	0x08005580
 800129c:	20001038 	.word	0x20001038
 80012a0:	08005584 	.word	0x08005584
 80012a4:	20000f9b 	.word	0x20000f9b
 80012a8:	08005588 	.word	0x08005588
 80012ac:	20000f96 	.word	0x20000f96
 80012b0:	0800558c 	.word	0x0800558c
 80012b4:	20000f95 	.word	0x20000f95
 80012b8:	08005590 	.word	0x08005590
 80012bc:	20001037 	.word	0x20001037
 80012c0:	08005594 	.word	0x08005594
 80012c4:	08005598 	.word	0x08005598
 80012c8:	0800559c 	.word	0x0800559c

080012cc <cursor>:

uint32_t pos=5;
uint32_t post=5;
char contra[11];

void cursor (char* val){
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b098      	sub	sp, #96	; 0x60
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	61f8      	str	r0, [r7, #28]
if(pos==5){
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <cursor+0xe0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d104      	bne.n	80012e6 <cursor+0x1a>
	strcpy(str, val);
 80012dc:	69f9      	ldr	r1, [r7, #28]
 80012de:	4834      	ldr	r0, [pc, #208]	; (80013b0 <cursor+0xe4>)
 80012e0:	f004 f901 	bl	80054e6 <strcpy>
 80012e4:	e003      	b.n	80012ee <cursor+0x22>
}
else{
	strcat(str, val);
 80012e6:	69f9      	ldr	r1, [r7, #28]
 80012e8:	4831      	ldr	r0, [pc, #196]	; (80013b0 <cursor+0xe4>)
 80012ea:	f004 f8ed 	bl	80054c8 <strcat>
}
 Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <cursor+0xe8>)
 80012f0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80012f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80012fa:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <cursor+0xec>)
 80012fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001304:	e883 0003 	stmia.w	r3, {r0, r1}

		  Lcd_HandleTypeDef lcd;

		  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001308:	4638      	mov	r0, r7
 800130a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800130e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001312:	2300      	movs	r3, #0
 8001314:	9303      	str	r3, [sp, #12]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <cursor+0xf0>)
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001328:	f7ff f8f4 	bl	8000514 <Lcd_create>
 800132c:	f107 0420 	add.w	r4, r7, #32
 8001330:	463d      	mov	r5, r7
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 0003 	ldmia.w	r5, {r0, r1}
 800133a:	e884 0003 	stmia.w	r4, {r0, r1}

		  Lcd_cursor(&lcd, 1,0);
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f956 	bl	80005f8 <Lcd_cursor>
		  Lcd_string(&lcd, "pin:");
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	491b      	ldr	r1, [pc, #108]	; (80013c0 <cursor+0xf4>)
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f932 	bl	80005bc <Lcd_string>
		  Lcd_cursor(&lcd, 1,pos);
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <cursor+0xe0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2101      	movs	r1, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f947 	bl	80005f8 <Lcd_cursor>
		  Lcd_string(&lcd,val);
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	69f9      	ldr	r1, [r7, #28]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f923 	bl	80005bc <Lcd_string>
		  pos=pos+1;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <cursor+0xe0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <cursor+0xe0>)
 800137e:	6013      	str	r3, [r2, #0]
		  if (pos==9){
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <cursor+0xe0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b09      	cmp	r3, #9
 8001386:	d10c      	bne.n	80013a2 <cursor+0xd6>
			  Lcd_cursor(&lcd, 1,5);
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	2205      	movs	r2, #5
 800138e:	2101      	movs	r1, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f931 	bl	80005f8 <Lcd_cursor>
			  Lcd_string(&lcd,str);
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4905      	ldr	r1, [pc, #20]	; (80013b0 <cursor+0xe4>)
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f90d 	bl	80005bc <Lcd_string>
		  }

}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000
 80013b0:	2000102c 	.word	0x2000102c
 80013b4:	08005530 	.word	0x08005530
 80013b8:	08005540 	.word	0x08005540
 80013bc:	48000800 	.word	0x48000800
 80013c0:	080055a0 	.word	0x080055a0

080013c4 <pulsa>:



void pulsa (char* posicion){
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b098      	sub	sp, #96	; 0x60
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	61f8      	str	r0, [r7, #28]


 Lcd_PortType ports[] = {
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <pulsa+0x98>)
 80013ce:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80013d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
		  };

		  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <pulsa+0x9c>)
 80013da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e2:	e883 0003 	stmia.w	r3, {r0, r1}

		  Lcd_HandleTypeDef lcd;

		  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 80013e6:	4638      	mov	r0, r7
 80013e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80013ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80013f0:	2300      	movs	r3, #0
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <pulsa+0xa0>)
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001406:	f7ff f885 	bl	8000514 <Lcd_create>
 800140a:	f107 0420 	add.w	r4, r7, #32
 800140e:	463d      	mov	r5, r7
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001418:	e884 0003 	stmia.w	r4, {r0, r1}


	 Lcd_cursor(&lcd, 1,0);
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8e7 	bl	80005f8 <Lcd_cursor>
	 Lcd_string(&lcd, "Abierto");
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <pulsa+0xa4>)
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8c3 	bl	80005bc <Lcd_string>
	 Lcd_cursor(&lcd, 1,post);
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <pulsa+0xa8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f8d8 	bl	80005f8 <Lcd_cursor>
     Lcd_string(&lcd,posicion);
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	69f9      	ldr	r1, [r7, #28]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f8b4 	bl	80005bc <Lcd_string>


 }
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bdb0      	pop	{r4, r5, r7, pc}
 800145c:	08005530 	.word	0x08005530
 8001460:	08005540 	.word	0x08005540
 8001464:	48000800 	.word	0x48000800
 8001468:	080055a8 	.word	0x080055a8
 800146c:	20000004 	.word	0x20000004

08001470 <error>:


void error (char* posicion){
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b098      	sub	sp, #96	; 0x60
 8001474:	af04      	add	r7, sp, #16
 8001476:	61f8      	str	r0, [r7, #28]


 Lcd_PortType ports[] = {
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <error+0x98>)
 800147a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
		  };

		  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <error+0x9c>)
 8001486:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	e883 0003 	stmia.w	r3, {r0, r1}

		  Lcd_HandleTypeDef lcd;

		  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001492:	4638      	mov	r0, r7
 8001494:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001498:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800149c:	2300      	movs	r3, #0
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <error+0xa0>)
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014b2:	f7ff f82f 	bl	8000514 <Lcd_create>
 80014b6:	f107 0420 	add.w	r4, r7, #32
 80014ba:	463d      	mov	r5, r7
 80014bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014c4:	e884 0003 	stmia.w	r4, {r0, r1}


	 Lcd_cursor(&lcd, 1,0);
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	2200      	movs	r2, #0
 80014ce:	2101      	movs	r1, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f891 	bl	80005f8 <Lcd_cursor>
	 Lcd_string(&lcd, "ERROR");
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <error+0xa4>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f86d 	bl	80005bc <Lcd_string>
	 Lcd_cursor(&lcd, 1,post);
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <error+0xa8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f882 	bl	80005f8 <Lcd_cursor>
     Lcd_string(&lcd,posicion);
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	69f9      	ldr	r1, [r7, #28]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f85e 	bl	80005bc <Lcd_string>


 }
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	; 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	08005530 	.word	0x08005530
 800150c:	08005540 	.word	0x08005540
 8001510:	48000800 	.word	0x48000800
 8001514:	080055b0 	.word	0x080055b0
 8001518:	20000004 	.word	0x20000004

0800151c <read_keypad>:

char read_keypad(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	/* tomar la fila 1 en bajo y hacer las demas en altos */
	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f000 fe15 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f000 fe0e 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001542:	48c9      	ldr	r0, [pc, #804]	; (8001868 <read_keypad+0x34c>)
 8001544:	f000 fe08 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154e:	48c6      	ldr	r0, [pc, #792]	; (8001868 <read_keypad+0x34c>)
 8001550:	f000 fe02 	bl	8002158 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f000 fde4 	bl	8002128 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <read_keypad+0x62>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001566:	bf00      	nop
 8001568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f000 fdda 	bl	8002128 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f6      	beq.n	8001568 <read_keypad+0x4c>
	    return '1';
 800157a:	2331      	movs	r3, #49	; 0x31
 800157c:	e171      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f000 fdd0 	bl	8002128 <HAL_GPIO_ReadPin>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10a      	bne.n	80015a4 <read_keypad+0x88>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800158e:	bf00      	nop
 8001590:	2140      	movs	r1, #64	; 0x40
 8001592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001596:	f000 fdc7 	bl	8002128 <HAL_GPIO_ReadPin>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f7      	beq.n	8001590 <read_keypad+0x74>
		return '2';
 80015a0:	2332      	movs	r3, #50	; 0x32
 80015a2:	e15e      	b.n	8001862 <read_keypad+0x346>
    }

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 80015a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a8:	48af      	ldr	r0, [pc, #700]	; (8001868 <read_keypad+0x34c>)
 80015aa:	f000 fdbd 	bl	8002128 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10a      	bne.n	80015ca <read_keypad+0xae>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80015b4:	bf00      	nop
 80015b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ba:	48ab      	ldr	r0, [pc, #684]	; (8001868 <read_keypad+0x34c>)
 80015bc:	f000 fdb4 	bl	8002128 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f7      	beq.n	80015b6 <read_keypad+0x9a>
		return '3';
 80015c6:	2333      	movs	r3, #51	; 0x33
 80015c8:	e14b      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 80015ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ce:	48a6      	ldr	r0, [pc, #664]	; (8001868 <read_keypad+0x34c>)
 80015d0:	f000 fdaa 	bl	8002128 <HAL_GPIO_ReadPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10a      	bne.n	80015f0 <read_keypad+0xd4>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80015da:	bf00      	nop
 80015dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e0:	48a1      	ldr	r0, [pc, #644]	; (8001868 <read_keypad+0x34c>)
 80015e2:	f000 fda1 	bl	8002128 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f7      	beq.n	80015dc <read_keypad+0xc0>
		return 'A';
 80015ec:	2341      	movs	r3, #65	; 0x41
 80015ee:	e138      	b.n	8001862 <read_keypad+0x346>
	}


	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f000 fdad 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f000 fda6 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001612:	4895      	ldr	r0, [pc, #596]	; (8001868 <read_keypad+0x34c>)
 8001614:	f000 fda0 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161e:	4892      	ldr	r0, [pc, #584]	; (8001868 <read_keypad+0x34c>)
 8001620:	f000 fd9a 	bl	8002158 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 8001624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162c:	f000 fd7c 	bl	8002128 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10b      	bne.n	800164e <read_keypad+0x132>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001636:	bf00      	nop
 8001638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f000 fd72 	bl	8002128 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f6      	beq.n	8001638 <read_keypad+0x11c>
		return '4';
 800164a:	2334      	movs	r3, #52	; 0x34
 800164c:	e109      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f000 fd68 	bl	8002128 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10a      	bne.n	8001674 <read_keypad+0x158>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800165e:	bf00      	nop
 8001660:	2140      	movs	r1, #64	; 0x40
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f000 fd5f 	bl	8002128 <HAL_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f7      	beq.n	8001660 <read_keypad+0x144>
		return '5';
 8001670:	2335      	movs	r3, #53	; 0x35
 8001672:	e0f6      	b.n	8001862 <read_keypad+0x346>
	 }

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 8001674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001678:	487b      	ldr	r0, [pc, #492]	; (8001868 <read_keypad+0x34c>)
 800167a:	f000 fd55 	bl	8002128 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10a      	bne.n	800169a <read_keypad+0x17e>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001684:	bf00      	nop
 8001686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168a:	4877      	ldr	r0, [pc, #476]	; (8001868 <read_keypad+0x34c>)
 800168c:	f000 fd4c 	bl	8002128 <HAL_GPIO_ReadPin>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f7      	beq.n	8001686 <read_keypad+0x16a>
		return '6';
 8001696:	2336      	movs	r3, #54	; 0x36
 8001698:	e0e3      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 800169a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169e:	4872      	ldr	r0, [pc, #456]	; (8001868 <read_keypad+0x34c>)
 80016a0:	f000 fd42 	bl	8002128 <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10a      	bne.n	80016c0 <read_keypad+0x1a4>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80016aa:	bf00      	nop
 80016ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b0:	486d      	ldr	r0, [pc, #436]	; (8001868 <read_keypad+0x34c>)
 80016b2:	f000 fd39 	bl	8002128 <HAL_GPIO_ReadPin>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f7      	beq.n	80016ac <read_keypad+0x190>
		return 'B';
 80016bc:	2342      	movs	r3, #66	; 0x42
 80016be:	e0d0      	b.n	8001862 <read_keypad+0x346>
	}


	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f000 fd45 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d8:	f000 fd3e 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e2:	4861      	ldr	r0, [pc, #388]	; (8001868 <read_keypad+0x34c>)
 80016e4:	f000 fd38 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ee:	485e      	ldr	r0, [pc, #376]	; (8001868 <read_keypad+0x34c>)
 80016f0:	f000 fd32 	bl	8002158 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 80016f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f000 fd14 	bl	8002128 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10b      	bne.n	800171e <read_keypad+0x202>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001706:	bf00      	nop
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f000 fd0a 	bl	8002128 <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f6      	beq.n	8001708 <read_keypad+0x1ec>
		return '7';
 800171a:	2337      	movs	r3, #55	; 0x37
 800171c:	e0a1      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f000 fd00 	bl	8002128 <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <read_keypad+0x228>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800172e:	bf00      	nop
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001736:	f000 fcf7 	bl	8002128 <HAL_GPIO_ReadPin>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f7      	beq.n	8001730 <read_keypad+0x214>
		return '8';
 8001740:	2338      	movs	r3, #56	; 0x38
 8001742:	e08e      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 8001744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001748:	4847      	ldr	r0, [pc, #284]	; (8001868 <read_keypad+0x34c>)
 800174a:	f000 fced 	bl	8002128 <HAL_GPIO_ReadPin>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10a      	bne.n	800176a <read_keypad+0x24e>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001754:	bf00      	nop
 8001756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175a:	4843      	ldr	r0, [pc, #268]	; (8001868 <read_keypad+0x34c>)
 800175c:	f000 fce4 	bl	8002128 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f7      	beq.n	8001756 <read_keypad+0x23a>
		return '9';
 8001766:	2339      	movs	r3, #57	; 0x39
 8001768:	e07b      	b.n	8001862 <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 800176a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176e:	483e      	ldr	r0, [pc, #248]	; (8001868 <read_keypad+0x34c>)
 8001770:	f000 fcda 	bl	8002128 <HAL_GPIO_ReadPin>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <read_keypad+0x274>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800177a:	bf00      	nop
 800177c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001780:	4839      	ldr	r0, [pc, #228]	; (8001868 <read_keypad+0x34c>)
 8001782:	f000 fcd1 	bl	8002128 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f7      	beq.n	800177c <read_keypad+0x260>
		return 'C';
 800178c:	2343      	movs	r3, #67	; 0x43
 800178e:	e068      	b.n	8001862 <read_keypad+0x346>
	}


	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f000 fcdd 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f000 fcd6 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	482d      	ldr	r0, [pc, #180]	; (8001868 <read_keypad+0x34c>)
 80017b4:	f000 fcd0 	bl	8002158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017be:	482a      	ldr	r0, [pc, #168]	; (8001868 <read_keypad+0x34c>)
 80017c0:	f000 fcca 	bl	8002158 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 80017c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f000 fcac 	bl	8002128 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10b      	bne.n	80017ee <read_keypad+0x2d2>
		{
		  while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80017d6:	bf00      	nop
 80017d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e0:	f000 fca2 	bl	8002128 <HAL_GPIO_ReadPin>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f6      	beq.n	80017d8 <read_keypad+0x2bc>
		  return '*';
 80017ea:	232a      	movs	r3, #42	; 0x2a
 80017ec:	e039      	b.n	8001862 <read_keypad+0x346>
		}

		if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f000 fc98 	bl	8002128 <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <read_keypad+0x2f8>
		{
		  while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80017fe:	bf00      	nop
 8001800:	2140      	movs	r1, #64	; 0x40
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f000 fc8f 	bl	8002128 <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f7      	beq.n	8001800 <read_keypad+0x2e4>
		  return '0';
 8001810:	2330      	movs	r3, #48	; 0x30
 8001812:	e026      	b.n	8001862 <read_keypad+0x346>
		 }

		if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 8001814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001818:	4813      	ldr	r0, [pc, #76]	; (8001868 <read_keypad+0x34c>)
 800181a:	f000 fc85 	bl	8002128 <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <read_keypad+0x31e>
		{
			while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001824:	bf00      	nop
 8001826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <read_keypad+0x34c>)
 800182c:	f000 fc7c 	bl	8002128 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f7      	beq.n	8001826 <read_keypad+0x30a>
			return '#';
 8001836:	2323      	movs	r3, #35	; 0x23
 8001838:	e013      	b.n	8001862 <read_keypad+0x346>
		}

		if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 800183a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <read_keypad+0x34c>)
 8001840:	f000 fc72 	bl	8002128 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <read_keypad+0x344>
		{
			while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800184a:	bf00      	nop
 800184c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <read_keypad+0x34c>)
 8001852:	f000 fc69 	bl	8002128 <HAL_GPIO_ReadPin>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f7      	beq.n	800184c <read_keypad+0x330>
			return 'D';
 800185c:	2344      	movs	r3, #68	; 0x44
 800185e:	e000      	b.n	8001862 <read_keypad+0x346>
		}
		return 'F';
 8001860:	2346      	movs	r3, #70	; 0x46
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	48000400 	.word	0x48000400

0800186c <lock_safe>:

    void lock_safe(void)
    {
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(VE_GPIO_Port, VE_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f000 fc6d 	bl	8002158 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RO_GPIO_Port, RO_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2102      	movs	r1, #2
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f000 fc67 	bl	8002158 <HAL_GPIO_WritePin>
    }
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <unlock_safe>:


    void unlock_safe(void)
    {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
     cursor("0");
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <unlock_safe+0x28>)
 8001896:	f7ff fd19 	bl	80012cc <cursor>
	 HAL_GPIO_WritePin(VE_GPIO_Port, VE_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f000 fc58 	bl	8002158 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(RO_GPIO_Port, RO_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f000 fc52 	bl	8002158 <HAL_GPIO_WritePin>
     }
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	08005594 	.word	0x08005594

080018bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(input != 'F')
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <StartDefaultTask+0x24>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b46      	cmp	r3, #70	; 0x46
 80018ca:	d004      	beq.n	80018d6 <StartDefaultTask+0x1a>
	  {
			contr_password(input);
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <StartDefaultTask+0x24>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f90d 	bl	8000af0 <contr_password>
	  }

    osDelay(1);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f002 fbf9 	bl	80040ce <osDelay>
	  if(input != 'F')
 80018dc:	e7f2      	b.n	80018c4 <StartDefaultTask+0x8>
 80018de:	bf00      	nop
 80018e0:	20000f97 	.word	0x20000f97

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x44>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_MspInit+0x44>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6613      	str	r3, [r2, #96]	; 0x60
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x44>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x44>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_UART_MspInit+0x7c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d128      	bne.n	80019b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_UART_MspInit+0x80>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <HAL_UART_MspInit+0x80>)
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_UART_MspInit+0x80>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_UART_MspInit+0x80>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <HAL_UART_MspInit+0x80>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_UART_MspInit+0x80>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800198e:	230c      	movs	r3, #12
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800199e:	2307      	movs	r3, #7
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f000 fa14 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40004400 	.word	0x40004400
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f8c6 	bl	8001b88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019fc:	f003 f8de 	bl	8004bbc <xTaskGetSchedulerState>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a06:	f003 fb0f 	bl	8005028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <SystemInit+0x64>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <SystemInit+0x64>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <SystemInit+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <SystemInit+0x68>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <SystemInit+0x68>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <SystemInit+0x68>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <SystemInit+0x68>)
 8001a3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <SystemInit+0x68>)
 8001a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <SystemInit+0x68>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <SystemInit+0x68>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <SystemInit+0x68>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SystemInit+0x64>)
 8001a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a66:	609a      	str	r2, [r3, #8]
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00
 8001a78:	40021000 	.word	0x40021000

08001a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff ffc6 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a86:	e003      	b.n	8001a90 <LoopCopyDataInit>

08001a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a8e:	3104      	adds	r1, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a90:	480a      	ldr	r0, [pc, #40]	; (8001abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a98:	d3f6      	bcc.n	8001a88 <CopyDataInit>
	ldr	r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a9c:	e002      	b.n	8001aa4 <LoopFillZerobss>

08001a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aa0:	f842 3b04 	str.w	r3, [r2], #4

08001aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8001aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aa8:	d3f9      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f003 fce1 	bl	8005470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aae:	f7fe fe59 	bl	8000764 <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ab8:	0800561c 	.word	0x0800561c
	ldr	r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ac0:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001ac4:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001ac8:	20001040 	.word	0x20001040

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_Init+0x3c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_Init+0x3c>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f000 f942 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f80f 	bl	8001b10 <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	e001      	b.n	8001b02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001afe:	f7ff fef9 	bl	80018f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_InitTick+0x6c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d023      	beq.n	8001b6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_InitTick+0x70>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_InitTick+0x6c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f93f 	bl	8001dbe <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b0f      	cmp	r3, #15
 8001b4a:	d809      	bhi.n	8001b60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f000 f917 	bl	8001d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_InitTick+0x74>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e007      	b.n	8001b70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e004      	b.n	8001b70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e001      	b.n	8001b70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000010 	.word	0x20000010
 8001b80:	20000008 	.word	0x20000008
 8001b84:	2000000c 	.word	0x2000000c

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	2000103c 	.word	0x2000103c

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000103c 	.word	0x2000103c

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_Delay+0x40>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000010 	.word	0x20000010

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff47 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff5c 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffb0 	bl	8001d2c <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e17f      	b.n	80020e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8171 	beq.w	80020e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d00b      	beq.n	8001e20 <HAL_GPIO_Init+0x48>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e14:	2b11      	cmp	r3, #17
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d130      	bne.n	8001e82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e56:	2201      	movs	r2, #1
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0201 	and.w	r2, r3, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d118      	bne.n	8001ec0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e94:	2201      	movs	r2, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	f003 0201 	and.w	r2, r3, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x128>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b12      	cmp	r3, #18
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	6939      	ldr	r1, [r7, #16]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80ac 	beq.w	80020e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <HAL_GPIO_Init+0x32c>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <HAL_GPIO_Init+0x32c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6613      	str	r3, [r2, #96]	; 0x60
 8001f96:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <HAL_GPIO_Init+0x32c>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa2:	4a59      	ldr	r2, [pc, #356]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fcc:	d025      	beq.n	800201a <HAL_GPIO_Init+0x242>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4e      	ldr	r2, [pc, #312]	; (800210c <HAL_GPIO_Init+0x334>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01f      	beq.n	8002016 <HAL_GPIO_Init+0x23e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_GPIO_Init+0x338>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d019      	beq.n	8002012 <HAL_GPIO_Init+0x23a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x33c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0x236>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_GPIO_Init+0x340>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00d      	beq.n	800200a <HAL_GPIO_Init+0x232>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4a      	ldr	r2, [pc, #296]	; (800211c <HAL_GPIO_Init+0x344>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <HAL_GPIO_Init+0x22e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	; (8002120 <HAL_GPIO_Init+0x348>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_GPIO_Init+0x22a>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002002:	2307      	movs	r3, #7
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x244>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x244>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x244>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x244>
 800201a:	2300      	movs	r3, #0
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800202c:	4936      	ldr	r1, [pc, #216]	; (8002108 <HAL_GPIO_Init+0x330>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_GPIO_Init+0x34c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002088:	4a26      	ldr	r2, [pc, #152]	; (8002124 <HAL_GPIO_Init+0x34c>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_GPIO_Init+0x34c>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_GPIO_Init+0x34c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_GPIO_Init+0x34c>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f47f ae78 	bne.w	8001de8 <HAL_GPIO_Init+0x10>
  }
}
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40021000 	.word	0x40021000
 8002108:	40010000 	.word	0x40010000
 800210c:	48000400 	.word	0x48000400
 8002110:	48000800 	.word	0x48000800
 8002114:	48000c00 	.word	0x48000c00
 8002118:	48001000 	.word	0x48001000
 800211c:	48001400 	.word	0x48001400
 8002120:	48001800 	.word	0x48001800
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e001      	b.n	800214a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002174:	e002      	b.n	800217c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b2:	d130      	bne.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c0:	d038      	beq.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ca:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2232      	movs	r2, #50	; 0x32
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e8:	e002      	b.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d102      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f2      	bne.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002210:	d110      	bne.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e00f      	b.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d007      	beq.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800222c:	4a05      	ldr	r2, [pc, #20]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002232:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40007000 	.word	0x40007000
 8002248:	20000008 	.word	0x20000008
 800224c:	431bde83 	.word	0x431bde83

08002250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3d4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	4ba1      	ldr	r3, [pc, #644]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800226c:	4b9e      	ldr	r3, [pc, #632]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80e4 	beq.w	800244c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_RCC_OscConfig+0x4a>
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	f040 808b 	bne.w	80023a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b01      	cmp	r3, #1
 8002296:	f040 8087 	bne.w	80023a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229a:	4b93      	ldr	r3, [pc, #588]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x62>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e3ac      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1a      	ldr	r2, [r3, #32]
 80022b6:	4b8c      	ldr	r3, [pc, #560]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_RCC_OscConfig+0x7c>
 80022c2:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_OscConfig+0x88>
 80022cc:	4b86      	ldr	r3, [pc, #536]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d8:	4293      	cmp	r3, r2
 80022da:	d223      	bcs.n	8002324 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fd3f 	bl	8002d64 <RCC_SetFlashLatencyFromMSIRange>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e38d      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	4b7d      	ldr	r3, [pc, #500]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a7c      	ldr	r2, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b7a      	ldr	r3, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4977      	ldr	r1, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230e:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4972      	ldr	r1, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
 8002322:	e025      	b.n	8002370 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002324:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6f      	ldr	r2, [pc, #444]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	496a      	ldr	r1, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002342:	4b69      	ldr	r3, [pc, #420]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4965      	ldr	r1, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fcff 	bl	8002d64 <RCC_SetFlashLatencyFromMSIRange>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e34d      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002370:	f000 fc36 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002374:	4601      	mov	r1, r0
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	4a5a      	ldr	r2, [pc, #360]	; (80024ec <HAL_RCC_OscConfig+0x29c>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_OscConfig+0x2a0>)
 800238e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x2a4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fbbb 	bl	8001b10 <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d052      	beq.n	800244a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	e331      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023bc:	f7ff fbf8 	bl	8001bb0 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c4:	f7ff fbf4 	bl	8001bb0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e31a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	493b      	ldr	r1, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002400:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	4936      	ldr	r1, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e01a      	b.n	800244c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002422:	f7ff fbc5 	bl	8001bb0 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800242a:	f7ff fbc1 	bl	8001bb0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e2e7      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800243c:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x1da>
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800244a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d074      	beq.n	8002542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x21a>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d10e      	bne.n	8002482 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d10b      	bne.n	8002482 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d064      	beq.n	8002540 <HAL_RCC_OscConfig+0x2f0>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d160      	bne.n	8002540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e2c4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x24a>
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e01d      	b.n	80024d6 <HAL_RCC_OscConfig+0x286>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0x26e>
 80024a4:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e00b      	b.n	80024d6 <HAL_RCC_OscConfig+0x286>
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x298>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01c      	beq.n	8002518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7ff fb67 	bl	8001bb0 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e4:	e011      	b.n	800250a <HAL_RCC_OscConfig+0x2ba>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	080055c4 	.word	0x080055c4
 80024f0:	20000008 	.word	0x20000008
 80024f4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fb5a 	bl	8001bb0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e280      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	4baf      	ldr	r3, [pc, #700]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2a8>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7ff fb4a 	bl	8001bb0 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fb46 	bl	8001bb0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e26c      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002532:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x2d0>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d060      	beq.n	8002610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x310>
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d119      	bne.n	800258e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d116      	bne.n	800258e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002560:	4b99      	ldr	r3, [pc, #612]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x328>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e249      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b93      	ldr	r3, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	4990      	ldr	r1, [pc, #576]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258c:	e040      	b.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d023      	beq.n	80025de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002596:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a8b      	ldr	r2, [pc, #556]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7ff fb05 	bl	8001bb0 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025aa:	f7ff fb01 	bl	8001bb0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e227      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	497c      	ldr	r1, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	e018      	b.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a79      	ldr	r2, [pc, #484]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80025e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff fae1 	bl	8001bb0 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff fadd 	bl	8001bb0 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e203      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002604:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03c      	beq.n	8002696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7ff fabc 	bl	8001bb0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff fab8 	bl	8001bb0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1de      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800264e:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCC_OscConfig+0x3ec>
 800265c:	e01b      	b.n	8002696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7ff fa9f 	bl	8001bb0 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7ff fa9b 	bl	8001bb0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1c1      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ef      	bne.n	8002676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80a6 	beq.w	80027f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10d      	bne.n	80026d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b4:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026be:	6593      	str	r3, [r2, #88]	; 0x58
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d0:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d118      	bne.n	800270e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e8:	f7ff fa62 	bl	8001bb0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7ff fa5e 	bl	8001bb0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e184      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x57c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x4d8>
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002726:	e024      	b.n	8002772 <HAL_RCC_OscConfig+0x522>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d110      	bne.n	8002752 <HAL_RCC_OscConfig+0x502>
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002750:	e00f      	b.n	8002772 <HAL_RCC_OscConfig+0x522>
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800276a:	f023 0304 	bic.w	r3, r3, #4
 800276e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7ff fa19 	bl	8001bb0 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7ff fa15 	bl	8001bb0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e139      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x578>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ed      	beq.n	8002782 <HAL_RCC_OscConfig+0x532>
 80027a6:	e01a      	b.n	80027de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa02 	bl	8001bb0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff f9fe 	bl	8001bb0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d906      	bls.n	80027d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e122      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d0:	4b90      	ldr	r3, [pc, #576]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e8      	bne.n	80027b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027de:	7ffb      	ldrb	r3, [r7, #31]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b8b      	ldr	r3, [pc, #556]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a8a      	ldr	r2, [pc, #552]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8108 	beq.w	8002a0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2b02      	cmp	r3, #2
 8002800:	f040 80d0 	bne.w	80029a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002804:	4b83      	ldr	r3, [pc, #524]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	429a      	cmp	r2, r3
 8002816:	d130      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	3b01      	subs	r3, #1
 8002824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d127      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d11f      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002844:	2a07      	cmp	r2, #7
 8002846:	bf14      	ite	ne
 8002848:	2201      	movne	r2, #1
 800284a:	2200      	moveq	r2, #0
 800284c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	4293      	cmp	r3, r2
 8002850:	d113      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d109      	bne.n	800287a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	3b01      	subs	r3, #1
 8002874:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d06e      	beq.n	8002958 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d069      	beq.n	8002954 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002880:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800288c:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b7      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800289c:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a8:	f7ff f982 	bl	8001bb0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f97e 	bl	8001bb0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0a4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_RCC_OscConfig+0x7c8>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028de:	3a01      	subs	r2, #1
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028e8:	0212      	lsls	r2, r2, #8
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028f0:	0852      	lsrs	r2, r2, #1
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0552      	lsls	r2, r2, #21
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028fc:	0852      	lsrs	r2, r2, #1
 80028fe:	3a01      	subs	r2, #1
 8002900:	0652      	lsls	r2, r2, #25
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002908:	0912      	lsrs	r2, r2, #4
 800290a:	0452      	lsls	r2, r2, #17
 800290c:	430a      	orrs	r2, r1
 800290e:	4941      	ldr	r1, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002920:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a3b      	ldr	r2, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800292c:	f7ff f940 	bl	8001bb0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f93c 	bl	8001bb0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e062      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002952:	e05a      	b.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e059      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d152      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800297c:	f7ff f918 	bl	8001bb0 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff f914 	bl	8001bb0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e03a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x734>
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d02d      	beq.n	8002a06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029c8:	f023 0303 	bic.w	r3, r3, #3
 80029cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff f8e7 	bl	8001bb0 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7ff f8e3 	bl	8001bb0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x7c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x796>
 8002a04:	e001      	b.n	8002a0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	f99d808c 	.word	0xf99d808c

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0c8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4961      	ldr	r1, [pc, #388]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b0      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d04c      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a74:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d121      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e09e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d115      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e092      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e086      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e07e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac4:	4b42      	ldr	r3, [pc, #264]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 0203 	bic.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	493f      	ldr	r1, [pc, #252]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad6:	f7ff f86b 	bl	8001bb0 <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7ff f867 	bl	8001bb0 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e066      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 020c 	and.w	r2, r3, #12
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d1eb      	bne.n	8002ade <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	492c      	ldr	r1, [pc, #176]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d210      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4924      	ldr	r1, [pc, #144]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x1b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e036      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4918      	ldr	r1, [pc, #96]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4910      	ldr	r1, [pc, #64]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b92:	f000 f825 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b96:	4601      	mov	r1, r0
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	5cd3      	ldrb	r3, [r2, r3]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	fa21 f303 	lsr.w	r3, r1, r3
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe ffaa 	bl	8001b10 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	080055c4 	.word	0x080055c4
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b3a      	ldr	r3, [pc, #232]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11e      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c14:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c30:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d133      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa4>
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0xaa>
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c86:	617b      	str	r3, [r7, #20]
      break;
 8002c88:	e005      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c8c:	617b      	str	r3, [r7, #20]
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	617b      	str	r3, [r7, #20]
      break;
 8002c94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	fb02 f203 	mul.w	r2, r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0e5b      	lsrs	r3, r3, #25
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3724      	adds	r7, #36	; 0x24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	080055dc 	.word	0x080055dc
 8002cec:	00f42400 	.word	0x00f42400
 8002cf0:	007a1200 	.word	0x007a1200

08002cf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000008 	.word	0x20000008

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d10:	f7ff fff0 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d14:	4601      	mov	r1, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	080055d4 	.word	0x080055d4

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d3c:	f7ff ffda 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d40:	4601      	mov	r1, r0
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0adb      	lsrs	r3, r3, #11
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	080055d4 	.word	0x080055d4

08002d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d70:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d7c:	f7ff fa04 	bl	8002188 <HAL_PWREx_GetVoltageRange>
 8002d80:	6178      	str	r0, [r7, #20]
 8002d82:	e014      	b.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d9c:	f7ff f9f4 	bl	8002188 <HAL_PWREx_GetVoltageRange>
 8002da0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d10b      	bne.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d919      	bls.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2ba0      	cmp	r3, #160	; 0xa0
 8002dc0:	d902      	bls.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	e013      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc8:	2301      	movs	r3, #1
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e010      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d902      	bls.n	8002dda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e00a      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d102      	bne.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de0:	2302      	movs	r3, #2
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	e004      	b.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b70      	cmp	r3, #112	; 0x70
 8002dea:	d101      	bne.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	4909      	ldr	r1, [pc, #36]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40022000 	.word	0x40022000

08002e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e30:	2300      	movs	r3, #0
 8002e32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d03f      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e48:	d01c      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4e:	d802      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002e54:	e01f      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002e5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e60:	d01c      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002e62:	e018      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e64:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a84      	ldr	r2, [pc, #528]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e70:	e015      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fab9 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e82:	e00c      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3320      	adds	r3, #32
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fba0 	bl	80035d0 <RCCEx_PLLSAI2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e94:	e003      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	74fb      	strb	r3, [r7, #19]
      break;
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb2:	4972      	ldr	r1, [pc, #456]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed4:	d01c      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002ed6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eda:	d802      	bhi.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002ee0:	e01f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ee8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eec:	d01c      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002eee:	e018      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ef0:	4b62      	ldr	r3, [pc, #392]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a61      	ldr	r2, [pc, #388]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002efc:	e015      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fa73 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f0e:	e00c      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3320      	adds	r3, #32
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fb5a 	bl	80035d0 <RCCEx_PLLSAI2_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f20:	e003      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	74fb      	strb	r3, [r7, #19]
      break;
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f30:	4b52      	ldr	r3, [pc, #328]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3e:	494f      	ldr	r1, [pc, #316]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f46:	e001      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a0 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a40      	ldr	r2, [pc, #256]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f80:	4b3e      	ldr	r3, [pc, #248]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe fe08 	bl	8001bb0 <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa2:	e009      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fe04 	bl	8001bb0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d15c      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fca:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01f      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d019      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fdc3 	bl	8001bb0 <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	e00b      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fdbf 	bl	8001bb0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d902      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	74fb      	strb	r3, [r7, #19]
            break;
 8003044:	e006      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ec      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306a:	4904      	ldr	r1, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003072:	e009      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003088:	7c7b      	ldrb	r3, [r7, #17]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b9e      	ldr	r3, [pc, #632]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a9d      	ldr	r2, [pc, #628]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a6:	4b98      	ldr	r3, [pc, #608]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ac:	f023 0203 	bic.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	4994      	ldr	r1, [pc, #592]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c8:	4b8f      	ldr	r3, [pc, #572]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 020c 	bic.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	498c      	ldr	r1, [pc, #560]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ea:	4b87      	ldr	r3, [pc, #540]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4983      	ldr	r1, [pc, #524]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800310c:	4b7e      	ldr	r3, [pc, #504]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	497b      	ldr	r1, [pc, #492]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800312e:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	4972      	ldr	r1, [pc, #456]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003150:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	496a      	ldr	r1, [pc, #424]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	4961      	ldr	r1, [pc, #388]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003194:	4b5c      	ldr	r3, [pc, #368]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	4959      	ldr	r1, [pc, #356]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b6:	4b54      	ldr	r3, [pc, #336]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	4950      	ldr	r1, [pc, #320]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d8:	4b4b      	ldr	r3, [pc, #300]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	4948      	ldr	r1, [pc, #288]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	493f      	ldr	r1, [pc, #252]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d028      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800321c:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322a:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323a:	d106      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a31      	ldr	r2, [pc, #196]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003246:	60d3      	str	r3, [r2, #12]
 8003248:	e011      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003252:	d10c      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8c8 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	491f      	ldr	r1, [pc, #124]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003298:	d106      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a4:	60d3      	str	r3, [r2, #12]
 80032a6:	e011      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f899 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02b      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f6:	d109      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a02      	ldr	r2, [pc, #8]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
 8003304:	e014      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003314:	d10c      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3304      	adds	r3, #4
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f867 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d02f      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800334a:	4928      	ldr	r1, [pc, #160]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f844 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d014      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	74bb      	strb	r3, [r7, #18]
 8003376:	e011      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3320      	adds	r3, #32
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f921 	bl	80035d0 <RCCEx_PLLSAI2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b6:	490d      	ldr	r1, [pc, #52]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000

080033f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d018      	beq.n	800343c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0203 	and.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d10d      	bne.n	8003436 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
       ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
       ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d044      	beq.n	80034c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
 800343a:	e041      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d00c      	beq.n	800345e <RCCEx_PLLSAI1_Config+0x6e>
 8003444:	2b03      	cmp	r3, #3
 8003446:	d013      	beq.n	8003470 <RCCEx_PLLSAI1_Config+0x80>
 8003448:	2b01      	cmp	r3, #1
 800344a:	d120      	bne.n	800348e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344c:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11d      	bne.n	8003494 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345c:	e01a      	b.n	8003494 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346e:	e013      	b.n	8003498 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003470:	4b56      	ldr	r3, [pc, #344]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348c:	e006      	b.n	800349c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      break;
 8003492:	e004      	b.n	800349e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003494:	bf00      	nop
 8003496:	e002      	b.n	800349e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800349c:	bf00      	nop
    }

    if(status == HAL_OK)
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a4:	4b49      	ldr	r3, [pc, #292]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6819      	ldr	r1, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	430b      	orrs	r3, r1
 80034ba:	4944      	ldr	r1, [pc, #272]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d17d      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a40      	ldr	r2, [pc, #256]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d2:	f7fe fb6d 	bl	8001bb0 <HAL_GetTick>
 80034d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d8:	e009      	b.n	80034ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034da:	f7fe fb69 	bl	8001bb0 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d902      	bls.n	80034ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	73fb      	strb	r3, [r7, #15]
        break;
 80034ec:	e005      	b.n	80034fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ef      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d160      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d111      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	0211      	lsls	r1, r2, #8
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68d2      	ldr	r2, [r2, #12]
 800351c:	0912      	lsrs	r2, r2, #4
 800351e:	0452      	lsls	r2, r2, #17
 8003520:	430a      	orrs	r2, r1
 8003522:	492a      	ldr	r1, [pc, #168]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
 8003528:	e027      	b.n	800357a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d112      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6912      	ldr	r2, [r2, #16]
 8003546:	0852      	lsrs	r2, r2, #1
 8003548:	3a01      	subs	r2, #1
 800354a:	0552      	lsls	r2, r2, #21
 800354c:	430a      	orrs	r2, r1
 800354e:	491f      	ldr	r1, [pc, #124]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	610b      	str	r3, [r1, #16]
 8003554:	e011      	b.n	800357a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800355e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	0211      	lsls	r1, r2, #8
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6952      	ldr	r2, [r2, #20]
 800356c:	0852      	lsrs	r2, r2, #1
 800356e:	3a01      	subs	r2, #1
 8003570:	0652      	lsls	r2, r2, #25
 8003572:	430a      	orrs	r2, r1
 8003574:	4915      	ldr	r1, [pc, #84]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003584:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe fb13 	bl	8001bb0 <HAL_GetTick>
 800358a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358c:	e009      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358e:	f7fe fb0f 	bl	8001bb0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d902      	bls.n	80035a2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	73fb      	strb	r3, [r7, #15]
          break;
 80035a0:	e005      	b.n	80035ae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ef      	beq.n	800358e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035de:	4b68      	ldr	r3, [pc, #416]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ea:	4b65      	ldr	r3, [pc, #404]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
       ||
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003602:	4b5f      	ldr	r3, [pc, #380]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
       ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d044      	beq.n	80036a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e041      	b.n	80036a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d00c      	beq.n	800363e <RCCEx_PLLSAI2_Config+0x6e>
 8003624:	2b03      	cmp	r3, #3
 8003626:	d013      	beq.n	8003650 <RCCEx_PLLSAI2_Config+0x80>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d120      	bne.n	800366e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800362c:	4b54      	ldr	r3, [pc, #336]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11d      	bne.n	8003674 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363c:	e01a      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800363e:	4b50      	ldr	r3, [pc, #320]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364e:	e013      	b.n	8003678 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10f      	bne.n	800367c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800365c:	4b48      	ldr	r3, [pc, #288]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800366c:	e006      	b.n	800367c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      break;
 8003672:	e004      	b.n	800367e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800367c:	bf00      	nop
    }

    if(status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003684:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	3b01      	subs	r3, #1
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	430b      	orrs	r3, r1
 800369a:	4939      	ldr	r1, [pc, #228]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d167      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a35      	ldr	r2, [pc, #212]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b2:	f7fe fa7d 	bl	8001bb0 <HAL_GetTick>
 80036b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b8:	e009      	b.n	80036ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ba:	f7fe fa79 	bl	8001bb0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d902      	bls.n	80036ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	73fb      	strb	r3, [r7, #15]
        break;
 80036cc:	e005      	b.n	80036da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ef      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d14a      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d111      	bne.n	800370a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036e6:	4b26      	ldr	r3, [pc, #152]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6892      	ldr	r2, [r2, #8]
 80036f6:	0211      	lsls	r1, r2, #8
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68d2      	ldr	r2, [r2, #12]
 80036fc:	0912      	lsrs	r2, r2, #4
 80036fe:	0452      	lsls	r2, r2, #17
 8003700:	430a      	orrs	r2, r1
 8003702:	491f      	ldr	r1, [pc, #124]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	614b      	str	r3, [r1, #20]
 8003708:	e011      	b.n	800372e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003712:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	0211      	lsls	r1, r2, #8
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6912      	ldr	r2, [r2, #16]
 8003720:	0852      	lsrs	r2, r2, #1
 8003722:	3a01      	subs	r2, #1
 8003724:	0652      	lsls	r2, r2, #25
 8003726:	430a      	orrs	r2, r1
 8003728:	4915      	ldr	r1, [pc, #84]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a13      	ldr	r2, [pc, #76]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fa39 	bl	8001bb0 <HAL_GetTick>
 800373e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003740:	e009      	b.n	8003756 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003742:	f7fe fa35 	bl	8001bb0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d902      	bls.n	8003756 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	73fb      	strb	r3, [r7, #15]
          break;
 8003754:	e005      	b.n	8003762 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0ef      	beq.n	8003742 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	4903      	ldr	r1, [pc, #12]	; (8003780 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003772:	4313      	orrs	r3, r2
 8003774:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000

08003784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e040      	b.n	8003818 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fe f8c8 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f82c 	bl	8003820 <UART_SetConfig>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e022      	b.n	8003818 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 faaa 	bl	8003d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fb31 	bl	8003e78 <UART_CheckIdleState>
 8003816:	4603      	mov	r3, r0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003820:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003824:	b088      	sub	sp, #32
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4313      	orrs	r3, r2
 8003844:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4bac      	ldr	r3, [pc, #688]	; (8003b00 <UART_SetConfig+0x2e0>)
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	69f9      	ldr	r1, [r7, #28]
 8003856:	430b      	orrs	r3, r1
 8003858:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4aa2      	ldr	r2, [pc, #648]	; (8003b04 <UART_SetConfig+0x2e4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	430a      	orrs	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a99      	ldr	r2, [pc, #612]	; (8003b08 <UART_SetConfig+0x2e8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d121      	bne.n	80038ec <UART_SetConfig+0xcc>
 80038a8:	4b98      	ldr	r3, [pc, #608]	; (8003b0c <UART_SetConfig+0x2ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d816      	bhi.n	80038e4 <UART_SetConfig+0xc4>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x9c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038d9 	.word	0x080038d9
 80038c4:	080038d3 	.word	0x080038d3
 80038c8:	080038df 	.word	0x080038df
 80038cc:	2301      	movs	r3, #1
 80038ce:	76fb      	strb	r3, [r7, #27]
 80038d0:	e0e8      	b.n	8003aa4 <UART_SetConfig+0x284>
 80038d2:	2302      	movs	r3, #2
 80038d4:	76fb      	strb	r3, [r7, #27]
 80038d6:	e0e5      	b.n	8003aa4 <UART_SetConfig+0x284>
 80038d8:	2304      	movs	r3, #4
 80038da:	76fb      	strb	r3, [r7, #27]
 80038dc:	e0e2      	b.n	8003aa4 <UART_SetConfig+0x284>
 80038de:	2308      	movs	r3, #8
 80038e0:	76fb      	strb	r3, [r7, #27]
 80038e2:	e0df      	b.n	8003aa4 <UART_SetConfig+0x284>
 80038e4:	2310      	movs	r3, #16
 80038e6:	76fb      	strb	r3, [r7, #27]
 80038e8:	bf00      	nop
 80038ea:	e0db      	b.n	8003aa4 <UART_SetConfig+0x284>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a87      	ldr	r2, [pc, #540]	; (8003b10 <UART_SetConfig+0x2f0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d134      	bne.n	8003960 <UART_SetConfig+0x140>
 80038f6:	4b85      	ldr	r3, [pc, #532]	; (8003b0c <UART_SetConfig+0x2ec>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d829      	bhi.n	8003958 <UART_SetConfig+0x138>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0xec>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003941 	.word	0x08003941
 8003910:	08003959 	.word	0x08003959
 8003914:	08003959 	.word	0x08003959
 8003918:	08003959 	.word	0x08003959
 800391c:	0800394d 	.word	0x0800394d
 8003920:	08003959 	.word	0x08003959
 8003924:	08003959 	.word	0x08003959
 8003928:	08003959 	.word	0x08003959
 800392c:	08003947 	.word	0x08003947
 8003930:	08003959 	.word	0x08003959
 8003934:	08003959 	.word	0x08003959
 8003938:	08003959 	.word	0x08003959
 800393c:	08003953 	.word	0x08003953
 8003940:	2300      	movs	r3, #0
 8003942:	76fb      	strb	r3, [r7, #27]
 8003944:	e0ae      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003946:	2302      	movs	r3, #2
 8003948:	76fb      	strb	r3, [r7, #27]
 800394a:	e0ab      	b.n	8003aa4 <UART_SetConfig+0x284>
 800394c:	2304      	movs	r3, #4
 800394e:	76fb      	strb	r3, [r7, #27]
 8003950:	e0a8      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003952:	2308      	movs	r3, #8
 8003954:	76fb      	strb	r3, [r7, #27]
 8003956:	e0a5      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003958:	2310      	movs	r3, #16
 800395a:	76fb      	strb	r3, [r7, #27]
 800395c:	bf00      	nop
 800395e:	e0a1      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6b      	ldr	r2, [pc, #428]	; (8003b14 <UART_SetConfig+0x2f4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d120      	bne.n	80039ac <UART_SetConfig+0x18c>
 800396a:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <UART_SetConfig+0x2ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003974:	2b10      	cmp	r3, #16
 8003976:	d00f      	beq.n	8003998 <UART_SetConfig+0x178>
 8003978:	2b10      	cmp	r3, #16
 800397a:	d802      	bhi.n	8003982 <UART_SetConfig+0x162>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <UART_SetConfig+0x16c>
 8003980:	e010      	b.n	80039a4 <UART_SetConfig+0x184>
 8003982:	2b20      	cmp	r3, #32
 8003984:	d005      	beq.n	8003992 <UART_SetConfig+0x172>
 8003986:	2b30      	cmp	r3, #48	; 0x30
 8003988:	d009      	beq.n	800399e <UART_SetConfig+0x17e>
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x184>
 800398c:	2300      	movs	r3, #0
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e088      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003992:	2302      	movs	r3, #2
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	e085      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003998:	2304      	movs	r3, #4
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e082      	b.n	8003aa4 <UART_SetConfig+0x284>
 800399e:	2308      	movs	r3, #8
 80039a0:	76fb      	strb	r3, [r7, #27]
 80039a2:	e07f      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039a4:	2310      	movs	r3, #16
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	bf00      	nop
 80039aa:	e07b      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a59      	ldr	r2, [pc, #356]	; (8003b18 <UART_SetConfig+0x2f8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d120      	bne.n	80039f8 <UART_SetConfig+0x1d8>
 80039b6:	4b55      	ldr	r3, [pc, #340]	; (8003b0c <UART_SetConfig+0x2ec>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d00f      	beq.n	80039e4 <UART_SetConfig+0x1c4>
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d802      	bhi.n	80039ce <UART_SetConfig+0x1ae>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <UART_SetConfig+0x1b8>
 80039cc:	e010      	b.n	80039f0 <UART_SetConfig+0x1d0>
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d005      	beq.n	80039de <UART_SetConfig+0x1be>
 80039d2:	2bc0      	cmp	r3, #192	; 0xc0
 80039d4:	d009      	beq.n	80039ea <UART_SetConfig+0x1ca>
 80039d6:	e00b      	b.n	80039f0 <UART_SetConfig+0x1d0>
 80039d8:	2300      	movs	r3, #0
 80039da:	76fb      	strb	r3, [r7, #27]
 80039dc:	e062      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039de:	2302      	movs	r3, #2
 80039e0:	76fb      	strb	r3, [r7, #27]
 80039e2:	e05f      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039e4:	2304      	movs	r3, #4
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	e05c      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039ea:	2308      	movs	r3, #8
 80039ec:	76fb      	strb	r3, [r7, #27]
 80039ee:	e059      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039f0:	2310      	movs	r3, #16
 80039f2:	76fb      	strb	r3, [r7, #27]
 80039f4:	bf00      	nop
 80039f6:	e055      	b.n	8003aa4 <UART_SetConfig+0x284>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <UART_SetConfig+0x2fc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d124      	bne.n	8003a4c <UART_SetConfig+0x22c>
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <UART_SetConfig+0x2ec>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a10:	d012      	beq.n	8003a38 <UART_SetConfig+0x218>
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d802      	bhi.n	8003a1e <UART_SetConfig+0x1fe>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <UART_SetConfig+0x20c>
 8003a1c:	e012      	b.n	8003a44 <UART_SetConfig+0x224>
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a22:	d006      	beq.n	8003a32 <UART_SetConfig+0x212>
 8003a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a28:	d009      	beq.n	8003a3e <UART_SetConfig+0x21e>
 8003a2a:	e00b      	b.n	8003a44 <UART_SetConfig+0x224>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	76fb      	strb	r3, [r7, #27]
 8003a30:	e038      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a32:	2302      	movs	r3, #2
 8003a34:	76fb      	strb	r3, [r7, #27]
 8003a36:	e035      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e032      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e02f      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a44:	2310      	movs	r3, #16
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	bf00      	nop
 8003a4a:	e02b      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <UART_SetConfig+0x2e4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d124      	bne.n	8003aa0 <UART_SetConfig+0x280>
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <UART_SetConfig+0x2ec>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d012      	beq.n	8003a8c <UART_SetConfig+0x26c>
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d802      	bhi.n	8003a72 <UART_SetConfig+0x252>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <UART_SetConfig+0x260>
 8003a70:	e012      	b.n	8003a98 <UART_SetConfig+0x278>
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a76:	d006      	beq.n	8003a86 <UART_SetConfig+0x266>
 8003a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a7c:	d009      	beq.n	8003a92 <UART_SetConfig+0x272>
 8003a7e:	e00b      	b.n	8003a98 <UART_SetConfig+0x278>
 8003a80:	2300      	movs	r3, #0
 8003a82:	76fb      	strb	r3, [r7, #27]
 8003a84:	e00e      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a86:	2302      	movs	r3, #2
 8003a88:	76fb      	strb	r3, [r7, #27]
 8003a8a:	e00b      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	76fb      	strb	r3, [r7, #27]
 8003a90:	e008      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a92:	2308      	movs	r3, #8
 8003a94:	76fb      	strb	r3, [r7, #27]
 8003a96:	e005      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	76fb      	strb	r3, [r7, #27]
 8003a9c:	bf00      	nop
 8003a9e:	e001      	b.n	8003aa4 <UART_SetConfig+0x284>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <UART_SetConfig+0x2e4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f040 8087 	bne.w	8003bbe <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab0:	7efb      	ldrb	r3, [r7, #27]
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d836      	bhi.n	8003b24 <UART_SetConfig+0x304>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x29c>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003b25 	.word	0x08003b25
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b25 	.word	0x08003b25
 8003acc:	08003aef 	.word	0x08003aef
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b25 	.word	0x08003b25
 8003adc:	08003af7 	.word	0x08003af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7ff f914 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003ae4:	6178      	str	r0, [r7, #20]
        break;
 8003ae6:	e022      	b.n	8003b2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <UART_SetConfig+0x300>)
 8003aea:	617b      	str	r3, [r7, #20]
        break;
 8003aec:	e01f      	b.n	8003b2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aee:	f7ff f877 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003af2:	6178      	str	r0, [r7, #20]
        break;
 8003af4:	e01b      	b.n	8003b2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afa:	617b      	str	r3, [r7, #20]
        break;
 8003afc:	e017      	b.n	8003b2e <UART_SetConfig+0x30e>
 8003afe:	bf00      	nop
 8003b00:	efff69f3 	.word	0xefff69f3
 8003b04:	40008000 	.word	0x40008000
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40004400 	.word	0x40004400
 8003b14:	40004800 	.word	0x40004800
 8003b18:	40004c00 	.word	0x40004c00
 8003b1c:	40005000 	.word	0x40005000
 8003b20:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	76bb      	strb	r3, [r7, #26]
        break;
 8003b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80f1 	beq.w	8003d18 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d305      	bcc.n	8003b52 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d902      	bls.n	8003b58 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	76bb      	strb	r3, [r7, #26]
 8003b56:	e0df      	b.n	8003d18 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f04f 0400 	mov.w	r4, #0
 8003b68:	0214      	lsls	r4, r2, #8
 8003b6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b6e:	020b      	lsls	r3, r1, #8
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6852      	ldr	r2, [r2, #4]
 8003b74:	0852      	lsrs	r2, r2, #1
 8003b76:	4611      	mov	r1, r2
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	eb13 0b01 	adds.w	fp, r3, r1
 8003b80:	eb44 0c02 	adc.w	ip, r4, r2
 8003b84:	4658      	mov	r0, fp
 8003b86:	4661      	mov	r1, ip
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f04f 0400 	mov.w	r4, #0
 8003b90:	461a      	mov	r2, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	f7fc fb24 	bl	80001e0 <__aeabi_uldivmod>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba4:	d308      	bcc.n	8003bb8 <UART_SetConfig+0x398>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bac:	d204      	bcs.n	8003bb8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	e0af      	b.n	8003d18 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	76bb      	strb	r3, [r7, #26]
 8003bbc:	e0ac      	b.n	8003d18 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d15b      	bne.n	8003c80 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003bc8:	7efb      	ldrb	r3, [r7, #27]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d827      	bhi.n	8003c1e <UART_SetConfig+0x3fe>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x3b4>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c0f 	.word	0x08003c0f
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7ff f888 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003bfc:	6178      	str	r0, [r7, #20]
        break;
 8003bfe:	e013      	b.n	8003c28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7ff f89a 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003c04:	6178      	str	r0, [r7, #20]
        break;
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <UART_SetConfig+0x510>)
 8003c0a:	617b      	str	r3, [r7, #20]
        break;
 8003c0c:	e00c      	b.n	8003c28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe ffe7 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003c12:	6178      	str	r0, [r7, #20]
        break;
 8003c14:	e008      	b.n	8003c28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	617b      	str	r3, [r7, #20]
        break;
 8003c1c:	e004      	b.n	8003c28 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	76bb      	strb	r3, [r7, #26]
        break;
 8003c26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d074      	beq.n	8003d18 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005a      	lsls	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b0f      	cmp	r3, #15
 8003c4a:	d916      	bls.n	8003c7a <UART_SetConfig+0x45a>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d212      	bcs.n	8003c7a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f023 030f 	bic.w	r3, r3, #15
 8003c5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	89fb      	ldrh	r3, [r7, #14]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	89fa      	ldrh	r2, [r7, #14]
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	e04e      	b.n	8003d18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	76bb      	strb	r3, [r7, #26]
 8003c7e:	e04b      	b.n	8003d18 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c80:	7efb      	ldrb	r3, [r7, #27]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d827      	bhi.n	8003cd6 <UART_SetConfig+0x4b6>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <UART_SetConfig+0x46c>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08003cb9 	.word	0x08003cb9
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003cd7 	.word	0x08003cd7
 8003c9c:	08003cc7 	.word	0x08003cc7
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
 8003cac:	08003ccf 	.word	0x08003ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7ff f82c 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003cb4:	6178      	str	r0, [r7, #20]
        break;
 8003cb6:	e013      	b.n	8003ce0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7ff f83e 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003cbc:	6178      	str	r0, [r7, #20]
        break;
 8003cbe:	e00f      	b.n	8003ce0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <UART_SetConfig+0x510>)
 8003cc2:	617b      	str	r3, [r7, #20]
        break;
 8003cc4:	e00c      	b.n	8003ce0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc6:	f7fe ff8b 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8003cca:	6178      	str	r0, [r7, #20]
        break;
 8003ccc:	e008      	b.n	8003ce0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	617b      	str	r3, [r7, #20]
        break;
 8003cd4:	e004      	b.n	8003ce0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	76bb      	strb	r3, [r7, #26]
        break;
 8003cde:	bf00      	nop
    }

    if (pclk != 0U)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d018      	beq.n	8003d18 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	085a      	lsrs	r2, r3, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	441a      	add	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	d908      	bls.n	8003d14 <UART_SetConfig+0x4f4>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d204      	bcs.n	8003d14 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	e001      	b.n	8003d18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d24:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	d10a      	bne.n	8003e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e86:	f7fd fe93 	bl	8001bb0 <HAL_GetTick>
 8003e8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d10e      	bne.n	8003eb8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f82a 	bl	8003f02 <UART_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e020      	b.n	8003efa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d10e      	bne.n	8003ee4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f814 	bl	8003f02 <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e00a      	b.n	8003efa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f12:	e05d      	b.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d059      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1c:	f7fd fe48 	bl	8001bb0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d11b      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f40:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e042      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d02b      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f86:	d123      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fa0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e00f      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d092      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400a:	2b84      	cmp	r3, #132	; 0x84
 800400c:	d005      	beq.n	800401a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800400e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	3303      	adds	r3, #3
 8004018:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800402c:	f000 fada 	bl	80045e4 <vTaskStartScheduler>
  
  return osOK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	bd80      	pop	{r7, pc}

08004036 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004038:	b089      	sub	sp, #36	; 0x24
 800403a:	af04      	add	r7, sp, #16
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <osThreadCreate+0x54>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01c      	beq.n	800408a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685c      	ldr	r4, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681d      	ldr	r5, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691e      	ldr	r6, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ffc8 	bl	8003ff8 <makeFreeRtosPriority>
 8004068:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004072:	9202      	str	r2, [sp, #8]
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	9100      	str	r1, [sp, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4632      	mov	r2, r6
 800407c:	4629      	mov	r1, r5
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f8ed 	bl	800425e <xTaskCreateStatic>
 8004084:	4603      	mov	r3, r0
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e01c      	b.n	80040c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685c      	ldr	r4, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004096:	b29e      	uxth	r6, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ffaa 	bl	8003ff8 <makeFreeRtosPriority>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f107 030c 	add.w	r3, r7, #12
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	9200      	str	r2, [sp, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4632      	mov	r2, r6
 80040b2:	4629      	mov	r1, r5
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 f92c 	bl	8004312 <xTaskCreate>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d001      	beq.n	80040c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80040c4:	68fb      	ldr	r3, [r7, #12]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <osDelay+0x16>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	e000      	b.n	80040e6 <osDelay+0x18>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa48 	bl	800457c <vTaskDelay>
  
  return osOK;
 80040ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f103 0208 	add.w	r2, r3, #8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f04f 32ff 	mov.w	r2, #4294967295
 800410e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0208 	add.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f103 0208 	add.w	r2, r3, #8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d103      	bne.n	80041b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e00c      	b.n	80041d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3308      	adds	r3, #8
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e002      	b.n	80041c6 <vListInsert+0x2e>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d2f6      	bcs.n	80041c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6852      	ldr	r2, [r2, #4]
 800422a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d103      	bne.n	800423e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1e5a      	subs	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08e      	sub	sp, #56	; 0x38
 8004262:	af04      	add	r7, sp, #16
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	e7fe      	b.n	8004284 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <xTaskCreateStatic+0x42>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e7fe      	b.n	800429e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042a0:	2354      	movs	r3, #84	; 0x54
 80042a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b54      	cmp	r3, #84	; 0x54
 80042a8:	d009      	beq.n	80042be <xTaskCreateStatic+0x60>
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e7fe      	b.n	80042bc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01e      	beq.n	8004304 <xTaskCreateStatic+0xa6>
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042de:	2300      	movs	r3, #0
 80042e0:	9303      	str	r3, [sp, #12]
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f850 	bl	800439c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042fe:	f000 f8d3 	bl	80044a8 <prvAddNewTaskToReadyList>
 8004302:	e001      	b.n	8004308 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004308:	697b      	ldr	r3, [r7, #20]
	}
 800430a:	4618      	mov	r0, r3
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08c      	sub	sp, #48	; 0x30
 8004316:	af04      	add	r7, sp, #16
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fecc 	bl	80050c4 <pvPortMalloc>
 800432c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004334:	2054      	movs	r0, #84	; 0x54
 8004336:	f000 fec5 	bl	80050c4 <pvPortMalloc>
 800433a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
 8004348:	e005      	b.n	8004356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800434a:	6978      	ldr	r0, [r7, #20]
 800434c:	f000 ff7c 	bl	8005248 <vPortFree>
 8004350:	e001      	b.n	8004356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	2300      	movs	r3, #0
 8004368:	9303      	str	r3, [sp, #12]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	9302      	str	r3, [sp, #8]
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f80e 	bl	800439c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004380:	69f8      	ldr	r0, [r7, #28]
 8004382:	f000 f891 	bl	80044a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004386:	2301      	movs	r3, #1
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e002      	b.n	8004392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800438c:	f04f 33ff 	mov.w	r3, #4294967295
 8004390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004392:	69bb      	ldr	r3, [r7, #24]
	}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043b4:	3b01      	subs	r3, #1
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f023 0307 	bic.w	r3, r3, #7
 80043c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <prvInitialiseNewTask+0x46>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e7fe      	b.n	80043e0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01f      	beq.n	8004428 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	e012      	b.n	8004414 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	7819      	ldrb	r1, [r3, #0]
 80043f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	3334      	adds	r3, #52	; 0x34
 80043fe:	460a      	mov	r2, r1
 8004400:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3301      	adds	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d9e9      	bls.n	80043ee <prvInitialiseNewTask+0x52>
 800441a:	e000      	b.n	800441e <prvInitialiseNewTask+0x82>
			{
				break;
 800441c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004426:	e003      	b.n	8004430 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2b06      	cmp	r3, #6
 8004434:	d901      	bls.n	800443a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004436:	2306      	movs	r3, #6
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	2200      	movs	r2, #0
 800444a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	3304      	adds	r3, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fe70 	bl	8004136 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	3318      	adds	r3, #24
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fe6b 	bl	8004136 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004464:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	f1c3 0207 	rsb	r2, r3, #7
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2200      	movs	r2, #0
 800447a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	69b8      	ldr	r0, [r7, #24]
 800448a:	f000 fc1b 	bl	8004cc4 <pxPortInitialiseStack>
 800448e:	4602      	mov	r2, r0
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044a0:	bf00      	nop
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044b0:	f000 fd2c 	bl	8004f0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044b4:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <prvAddNewTaskToReadyList+0xb8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <prvAddNewTaskToReadyList+0xb8>)
 80044bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <prvAddNewTaskToReadyList+0xbc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044c6:	4a27      	ldr	r2, [pc, #156]	; (8004564 <prvAddNewTaskToReadyList+0xbc>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <prvAddNewTaskToReadyList+0xb8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d110      	bne.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044d4:	f000 fab8 	bl	8004a48 <prvInitialiseTaskLists>
 80044d8:	e00d      	b.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <prvAddNewTaskToReadyList+0xc0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <prvAddNewTaskToReadyList+0xbc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d802      	bhi.n	80044f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <prvAddNewTaskToReadyList+0xbc>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <prvAddNewTaskToReadyList+0xc4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <prvAddNewTaskToReadyList+0xc4>)
 80044fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	2201      	movs	r2, #1
 8004506:	409a      	lsls	r2, r3
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <prvAddNewTaskToReadyList+0xc8>)
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <prvAddNewTaskToReadyList+0xcc>)
 8004520:	441a      	add	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f7ff fe11 	bl	8004150 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800452e:	f000 fd1b 	bl	8004f68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <prvAddNewTaskToReadyList+0xc0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00e      	beq.n	8004558 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <prvAddNewTaskToReadyList+0xbc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	429a      	cmp	r2, r3
 8004546:	d207      	bcs.n	8004558 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <prvAddNewTaskToReadyList+0xd0>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	2000038c 	.word	0x2000038c
 8004564:	2000028c 	.word	0x2000028c
 8004568:	20000398 	.word	0x20000398
 800456c:	200003a8 	.word	0x200003a8
 8004570:	20000394 	.word	0x20000394
 8004574:	20000290 	.word	0x20000290
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <vTaskDelay+0x60>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <vTaskDelay+0x2e>
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	e7fe      	b.n	80045a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80045aa:	f000 f879 	bl	80046a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045ae:	2100      	movs	r1, #0
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fb21 	bl	8004bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b6:	f000 f881 	bl	80046bc <xTaskResumeAll>
 80045ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <vTaskDelay+0x64>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200003b4 	.word	0x200003b4
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045f2:	463a      	mov	r2, r7
 80045f4:	1d39      	adds	r1, r7, #4
 80045f6:	f107 0308 	add.w	r3, r7, #8
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb ff70 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	9202      	str	r2, [sp, #8]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	2300      	movs	r3, #0
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	2300      	movs	r3, #0
 8004610:	460a      	mov	r2, r1
 8004612:	491d      	ldr	r1, [pc, #116]	; (8004688 <vTaskStartScheduler+0xa4>)
 8004614:	481d      	ldr	r0, [pc, #116]	; (800468c <vTaskStartScheduler+0xa8>)
 8004616:	f7ff fe22 	bl	800425e <xTaskCreateStatic>
 800461a:	4602      	mov	r2, r0
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <vTaskStartScheduler+0xac>)
 800461e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <vTaskStartScheduler+0xac>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004628:	2301      	movs	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e001      	b.n	8004632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d115      	bne.n	8004664 <vTaskStartScheduler+0x80>
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <vTaskStartScheduler+0xb0>)
 800464c:	f04f 32ff 	mov.w	r2, #4294967295
 8004650:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <vTaskStartScheduler+0xb4>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <vTaskStartScheduler+0xb8>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800465e:	f000 fbb7 	bl	8004dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004662:	e00d      	b.n	8004680 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d109      	bne.n	8004680 <vTaskStartScheduler+0x9c>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e7fe      	b.n	800467e <vTaskStartScheduler+0x9a>
}
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	080055b8 	.word	0x080055b8
 800468c:	08004a19 	.word	0x08004a19
 8004690:	200003b0 	.word	0x200003b0
 8004694:	200003ac 	.word	0x200003ac
 8004698:	20000398 	.word	0x20000398
 800469c:	20000390 	.word	0x20000390

080046a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <vTaskSuspendAll+0x18>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <vTaskSuspendAll+0x18>)
 80046ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80046ae:	bf00      	nop
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	200003b4 	.word	0x200003b4

080046bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <xTaskResumeAll+0x114>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <xTaskResumeAll+0x2a>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	e7fe      	b.n	80046e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046e6:	f000 fc11 	bl	8004f0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <xTaskResumeAll+0x114>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <xTaskResumeAll+0x114>)
 80046f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <xTaskResumeAll+0x114>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d161      	bne.n	80047c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <xTaskResumeAll+0x118>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05d      	beq.n	80047c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004704:	e02e      	b.n	8004764 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <xTaskResumeAll+0x11c>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3318      	adds	r3, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fd79 	bl	800420a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fd74 	bl	800420a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	2201      	movs	r2, #1
 8004728:	409a      	lsls	r2, r3
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <xTaskResumeAll+0x120>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <xTaskResumeAll+0x120>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a27      	ldr	r2, [pc, #156]	; (80047e0 <xTaskResumeAll+0x124>)
 8004742:	441a      	add	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7ff fd00 	bl	8004150 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <xTaskResumeAll+0x128>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <xTaskResumeAll+0x12c>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <xTaskResumeAll+0x11c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1cc      	bne.n	8004706 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004772:	f000 fa03 	bl	8004b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <xTaskResumeAll+0x130>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004782:	f000 f837 	bl	80047f4 <xTaskIncrementTick>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <xTaskResumeAll+0x12c>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3b01      	subs	r3, #1
 8004796:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f1      	bne.n	8004782 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <xTaskResumeAll+0x130>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <xTaskResumeAll+0x12c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047b0:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <xTaskResumeAll+0x134>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047c0:	f000 fbd2 	bl	8004f68 <vPortExitCritical>

	return xAlreadyYielded;
 80047c4:	68bb      	ldr	r3, [r7, #8]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200003b4 	.word	0x200003b4
 80047d4:	2000038c 	.word	0x2000038c
 80047d8:	2000034c 	.word	0x2000034c
 80047dc:	20000394 	.word	0x20000394
 80047e0:	20000290 	.word	0x20000290
 80047e4:	2000028c 	.word	0x2000028c
 80047e8:	200003a0 	.word	0x200003a0
 80047ec:	2000039c 	.word	0x2000039c
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fe:	4b4e      	ldr	r3, [pc, #312]	; (8004938 <xTaskIncrementTick+0x144>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 8087 	bne.w	8004916 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004808:	4b4c      	ldr	r3, [pc, #304]	; (800493c <xTaskIncrementTick+0x148>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004810:	4a4a      	ldr	r2, [pc, #296]	; (800493c <xTaskIncrementTick+0x148>)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11f      	bne.n	800485c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800481c:	4b48      	ldr	r3, [pc, #288]	; (8004940 <xTaskIncrementTick+0x14c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <xTaskIncrementTick+0x46>
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	e7fe      	b.n	8004838 <xTaskIncrementTick+0x44>
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <xTaskIncrementTick+0x14c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <xTaskIncrementTick+0x150>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a3e      	ldr	r2, [pc, #248]	; (8004940 <xTaskIncrementTick+0x14c>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	4a3e      	ldr	r2, [pc, #248]	; (8004944 <xTaskIncrementTick+0x150>)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <xTaskIncrementTick+0x154>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a3c      	ldr	r2, [pc, #240]	; (8004948 <xTaskIncrementTick+0x154>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	f000 f990 	bl	8004b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800485c:	4b3b      	ldr	r3, [pc, #236]	; (800494c <xTaskIncrementTick+0x158>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d348      	bcc.n	80048f8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <xTaskIncrementTick+0x14c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004870:	4b36      	ldr	r3, [pc, #216]	; (800494c <xTaskIncrementTick+0x158>)
 8004872:	f04f 32ff 	mov.w	r2, #4294967295
 8004876:	601a      	str	r2, [r3, #0]
					break;
 8004878:	e03e      	b.n	80048f8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <xTaskIncrementTick+0x14c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d203      	bcs.n	800489a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004892:	4a2e      	ldr	r2, [pc, #184]	; (800494c <xTaskIncrementTick+0x158>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004898:	e02e      	b.n	80048f8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3304      	adds	r3, #4
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fcb3 	bl	800420a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3318      	adds	r3, #24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fcaa 	bl	800420a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <xTaskIncrementTick+0x15c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <xTaskIncrementTick+0x15c>)
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <xTaskIncrementTick+0x160>)
 80048d6:	441a      	add	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f7ff fc36 	bl	8004150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <xTaskIncrementTick+0x164>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3b9      	bcc.n	8004866 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f6:	e7b6      	b.n	8004866 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <xTaskIncrementTick+0x164>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	4915      	ldr	r1, [pc, #84]	; (8004954 <xTaskIncrementTick+0x160>)
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d907      	bls.n	8004920 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e004      	b.n	8004920 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <xTaskIncrementTick+0x168>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	4a0f      	ldr	r2, [pc, #60]	; (800495c <xTaskIncrementTick+0x168>)
 800491e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <xTaskIncrementTick+0x16c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800492c:	697b      	ldr	r3, [r7, #20]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200003b4 	.word	0x200003b4
 800493c:	20000390 	.word	0x20000390
 8004940:	20000344 	.word	0x20000344
 8004944:	20000348 	.word	0x20000348
 8004948:	200003a4 	.word	0x200003a4
 800494c:	200003ac 	.word	0x200003ac
 8004950:	20000394 	.word	0x20000394
 8004954:	20000290 	.word	0x20000290
 8004958:	2000028c 	.word	0x2000028c
 800495c:	2000039c 	.word	0x2000039c
 8004960:	200003a0 	.word	0x200003a0

08004964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <vTaskSwitchContext+0xa0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004972:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <vTaskSwitchContext+0xa4>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004978:	e03e      	b.n	80049f8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800497a:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <vTaskSwitchContext+0xa4>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004980:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <vTaskSwitchContext+0xa8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	f1c3 031f 	rsb	r3, r3, #31
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	491e      	ldr	r1, [pc, #120]	; (8004a10 <vTaskSwitchContext+0xac>)
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <vTaskSwitchContext+0x5a>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	e7fe      	b.n	80049bc <vTaskSwitchContext+0x58>
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <vTaskSwitchContext+0xac>)
 80049ca:	4413      	add	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	3308      	adds	r3, #8
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d104      	bne.n	80049ee <vTaskSwitchContext+0x8a>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a07      	ldr	r2, [pc, #28]	; (8004a14 <vTaskSwitchContext+0xb0>)
 80049f6:	6013      	str	r3, [r2, #0]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	200003b4 	.word	0x200003b4
 8004a08:	200003a0 	.word	0x200003a0
 8004a0c:	20000394 	.word	0x20000394
 8004a10:	20000290 	.word	0x20000290
 8004a14:	2000028c 	.word	0x2000028c

08004a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a20:	f000 f852 	bl	8004ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <prvIdleTask+0x28>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d9f9      	bls.n	8004a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <prvIdleTask+0x2c>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a3c:	e7f0      	b.n	8004a20 <prvIdleTask+0x8>
 8004a3e:	bf00      	nop
 8004a40:	20000290 	.word	0x20000290
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	e00c      	b.n	8004a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <prvInitialiseTaskLists+0x60>)
 8004a60:	4413      	add	r3, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fb47 	bl	80040f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b06      	cmp	r3, #6
 8004a72:	d9ef      	bls.n	8004a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a74:	480d      	ldr	r0, [pc, #52]	; (8004aac <prvInitialiseTaskLists+0x64>)
 8004a76:	f7ff fb3e 	bl	80040f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a7a:	480d      	ldr	r0, [pc, #52]	; (8004ab0 <prvInitialiseTaskLists+0x68>)
 8004a7c:	f7ff fb3b 	bl	80040f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a80:	480c      	ldr	r0, [pc, #48]	; (8004ab4 <prvInitialiseTaskLists+0x6c>)
 8004a82:	f7ff fb38 	bl	80040f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a86:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <prvInitialiseTaskLists+0x70>)
 8004a88:	f7ff fb35 	bl	80040f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <prvInitialiseTaskLists+0x74>)
 8004a8e:	f7ff fb32 	bl	80040f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <prvInitialiseTaskLists+0x78>)
 8004a94:	4a05      	ldr	r2, [pc, #20]	; (8004aac <prvInitialiseTaskLists+0x64>)
 8004a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <prvInitialiseTaskLists+0x7c>)
 8004a9a:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <prvInitialiseTaskLists+0x68>)
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000290 	.word	0x20000290
 8004aac:	2000031c 	.word	0x2000031c
 8004ab0:	20000330 	.word	0x20000330
 8004ab4:	2000034c 	.word	0x2000034c
 8004ab8:	20000360 	.word	0x20000360
 8004abc:	20000378 	.word	0x20000378
 8004ac0:	20000344 	.word	0x20000344
 8004ac4:	20000348 	.word	0x20000348

08004ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ace:	e019      	b.n	8004b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ad0:	f000 fa1c 	bl	8004f0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <prvCheckTasksWaitingTermination+0x4c>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fb92 	bl	800420a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvCheckTasksWaitingTermination+0x50>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <prvCheckTasksWaitingTermination+0x50>)
 8004aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <prvCheckTasksWaitingTermination+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <prvCheckTasksWaitingTermination+0x54>)
 8004af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004afa:	f000 fa35 	bl	8004f68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f80e 	bl	8004b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <prvCheckTasksWaitingTermination+0x54>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e1      	bne.n	8004ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000360 	.word	0x20000360
 8004b18:	2000038c 	.word	0x2000038c
 8004b1c:	20000374 	.word	0x20000374

08004b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fb86 	bl	8005248 <vPortFree>
				vPortFree( pxTCB );
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fb83 	bl	8005248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b42:	e017      	b.n	8004b74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d103      	bne.n	8004b56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fb7a 	bl	8005248 <vPortFree>
	}
 8004b54:	e00e      	b.n	8004b74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d009      	beq.n	8004b74 <prvDeleteTCB+0x54>
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e7fe      	b.n	8004b72 <prvDeleteTCB+0x52>
	}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <prvResetNextTaskUnblockTime+0x38>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b94:	e008      	b.n	8004ba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <prvResetNextTaskUnblockTime+0x38>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20000344 	.word	0x20000344
 8004bb8:	200003ac 	.word	0x200003ac

08004bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <xTaskGetSchedulerState+0x34>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	e008      	b.n	8004be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <xTaskGetSchedulerState+0x38>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e001      	b.n	8004be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004be2:	687b      	ldr	r3, [r7, #4]
	}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000398 	.word	0x20000398
 8004bf4:	200003b4 	.word	0x200003b4

08004bf8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c08:	4b28      	ldr	r3, [pc, #160]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fafb 	bl	800420a <uxListRemove>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	2201      	movs	r2, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43da      	mvns	r2, r3
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d10a      	bne.n	8004c50 <prvAddCurrentTaskToDelayedList+0x58>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	481a      	ldr	r0, [pc, #104]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c4a:	f7ff fa81 	bl	8004150 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c4e:	e026      	b.n	8004c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d209      	bcs.n	8004c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7ff fa8f 	bl	8004198 <vListInsert>
}
 8004c7a:	e010      	b.n	8004c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7ff fa85 	bl	8004198 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d202      	bcs.n	8004c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6013      	str	r3, [r2, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000390 	.word	0x20000390
 8004cac:	2000028c 	.word	0x2000028c
 8004cb0:	20000394 	.word	0x20000394
 8004cb4:	20000378 	.word	0x20000378
 8004cb8:	20000348 	.word	0x20000348
 8004cbc:	20000344 	.word	0x20000344
 8004cc0:	200003ac 	.word	0x200003ac

08004cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b04      	subs	r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cf4:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <pxPortInitialiseStack+0x64>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b14      	subs	r3, #20
 8004cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f06f 0202 	mvn.w	r2, #2
 8004d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b20      	subs	r3, #32
 8004d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	08004d2d 	.word	0x08004d2d

08004d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <prvTaskExitError+0x50>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3e:	d009      	beq.n	8004d54 <prvTaskExitError+0x28>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e7fe      	b.n	8004d52 <prvTaskExitError+0x26>
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d66:	bf00      	nop
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0fc      	beq.n	8004d68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000014 	.word	0x20000014

08004d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <pxCurrentTCBConst2>)
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	6808      	ldr	r0, [r1, #0]
 8004d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	f380 8809 	msr	PSP, r0
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8811 	msr	BASEPRI, r0
 8004d9a:	4770      	bx	lr
 8004d9c:	f3af 8000 	nop.w

08004da0 <pxCurrentTCBConst2>:
 8004da0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop

08004da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004da8:	4808      	ldr	r0, [pc, #32]	; (8004dcc <prvPortStartFirstTask+0x24>)
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	6800      	ldr	r0, [r0, #0]
 8004dae:	f380 8808 	msr	MSP, r0
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8814 	msr	CONTROL, r0
 8004dba:	b662      	cpsie	i
 8004dbc:	b661      	cpsie	f
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	df00      	svc	0
 8004dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dca:	bf00      	nop
 8004dcc:	e000ed08 	.word	0xe000ed08

08004dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dd6:	4b44      	ldr	r3, [pc, #272]	; (8004ee8 <xPortStartScheduler+0x118>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a44      	ldr	r2, [pc, #272]	; (8004eec <xPortStartScheduler+0x11c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d109      	bne.n	8004df4 <xPortStartScheduler+0x24>
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e7fe      	b.n	8004df2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004df4:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <xPortStartScheduler+0x118>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <xPortStartScheduler+0x120>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d109      	bne.n	8004e12 <xPortStartScheduler+0x42>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e7fe      	b.n	8004e10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e12:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <xPortStartScheduler+0x124>)
 8004e14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	22ff      	movs	r2, #255	; 0xff
 8004e22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <xPortStartScheduler+0x128>)
 8004e38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e40:	e009      	b.n	8004e56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d0ef      	beq.n	8004e42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1c3 0307 	rsb	r3, r3, #7
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d009      	beq.n	8004e82 <xPortStartScheduler+0xb2>
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	e7fe      	b.n	8004e80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <xPortStartScheduler+0x130>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <xPortStartScheduler+0x130>)
 8004ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <xPortStartScheduler+0x130>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <xPortStartScheduler+0x130>)
 8004eb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eb8:	f000 f8d6 	bl	8005068 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <xPortStartScheduler+0x134>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ec2:	f000 f8f5 	bl	80050b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <xPortStartScheduler+0x138>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <xPortStartScheduler+0x138>)
 8004ecc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ed0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ed2:	f7ff ff69 	bl	8004da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ed6:	f7ff fd45 	bl	8004964 <vTaskSwitchContext>
	prvTaskExitError();
 8004eda:	f7ff ff27 	bl	8004d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed00 	.word	0xe000ed00
 8004eec:	410fc271 	.word	0x410fc271
 8004ef0:	410fc270 	.word	0x410fc270
 8004ef4:	e000e400 	.word	0xe000e400
 8004ef8:	200003b8 	.word	0x200003b8
 8004efc:	200003bc 	.word	0x200003bc
 8004f00:	e000ed20 	.word	0xe000ed20
 8004f04:	20000014 	.word	0x20000014
 8004f08:	e000ef34 	.word	0xe000ef34

08004f0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <vPortEnterCritical+0x54>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <vPortEnterCritical+0x54>)
 8004f2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <vPortEnterCritical+0x54>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10e      	bne.n	8004f54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <vPortEnterCritical+0x58>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <vPortEnterCritical+0x48>
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	e7fe      	b.n	8004f52 <vPortEnterCritical+0x46>
	}
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	20000014 	.word	0x20000014
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <vPortExitCritical+0x22>
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	e7fe      	b.n	8004f88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <vPortExitCritical+0x4c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <vPortExitCritical+0x3e>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000014 	.word	0x20000014
	...

08004fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fc0:	f3ef 8009 	mrs	r0, PSP
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <pxCurrentTCBConst>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	f01e 0f10 	tst.w	lr, #16
 8004fd0:	bf08      	it	eq
 8004fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	6010      	str	r0, [r2, #0]
 8004fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fe4:	f380 8811 	msr	BASEPRI, r0
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f7ff fcb8 	bl	8004964 <vTaskSwitchContext>
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	f380 8811 	msr	BASEPRI, r0
 8004ffc:	bc09      	pop	{r0, r3}
 8004ffe:	6819      	ldr	r1, [r3, #0]
 8005000:	6808      	ldr	r0, [r1, #0]
 8005002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005006:	f01e 0f10 	tst.w	lr, #16
 800500a:	bf08      	it	eq
 800500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005010:	f380 8809 	msr	PSP, r0
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst>:
 8005020:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005040:	f7ff fbd8 	bl	80047f4 <xTaskIncrementTick>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <xPortSysTickHandler+0x3c>)
 800504c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <vPortSetupTimerInterrupt+0x34>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x38>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <vPortSetupTimerInterrupt+0x3c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x40>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vPortSetupTimerInterrupt+0x44>)
 8005086:	3b01      	subs	r3, #1
 8005088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800508a:	4b04      	ldr	r3, [pc, #16]	; (800509c <vPortSetupTimerInterrupt+0x34>)
 800508c:	2207      	movs	r2, #7
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e010 	.word	0xe000e010
 80050a0:	e000e018 	.word	0xe000e018
 80050a4:	20000008 	.word	0x20000008
 80050a8:	10624dd3 	.word	0x10624dd3
 80050ac:	e000e014 	.word	0xe000e014

080050b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050c0 <vPortEnableVFP+0x10>
 80050b4:	6801      	ldr	r1, [r0, #0]
 80050b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ba:	6001      	str	r1, [r0, #0]
 80050bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050be:	bf00      	nop
 80050c0:	e000ed88 	.word	0xe000ed88

080050c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050d0:	f7ff fae6 	bl	80046a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050d4:	4b57      	ldr	r3, [pc, #348]	; (8005234 <pvPortMalloc+0x170>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050dc:	f000 f90c 	bl	80052f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050e0:	4b55      	ldr	r3, [pc, #340]	; (8005238 <pvPortMalloc+0x174>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 808c 	bne.w	8005206 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01c      	beq.n	800512e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050f4:	2208      	movs	r2, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	3308      	adds	r3, #8
 800510e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <pvPortMalloc+0x6a>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e7fe      	b.n	800512c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d068      	beq.n	8005206 <pvPortMalloc+0x142>
 8005134:	4b41      	ldr	r3, [pc, #260]	; (800523c <pvPortMalloc+0x178>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d863      	bhi.n	8005206 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800513e:	4b40      	ldr	r3, [pc, #256]	; (8005240 <pvPortMalloc+0x17c>)
 8005140:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005142:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <pvPortMalloc+0x17c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005148:	e004      	b.n	8005154 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d903      	bls.n	8005166 <pvPortMalloc+0xa2>
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f1      	bne.n	800514a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005166:	4b33      	ldr	r3, [pc, #204]	; (8005234 <pvPortMalloc+0x170>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	429a      	cmp	r2, r3
 800516e:	d04a      	beq.n	8005206 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2208      	movs	r2, #8
 8005176:	4413      	add	r3, r2
 8005178:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	2308      	movs	r3, #8
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	d91e      	bls.n	80051d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4413      	add	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <pvPortMalloc+0xf4>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e7fe      	b.n	80051b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ca:	69b8      	ldr	r0, [r7, #24]
 80051cc:	f000 f8f6 	bl	80053bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <pvPortMalloc+0x178>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <pvPortMalloc+0x178>)
 80051dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <pvPortMalloc+0x178>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b18      	ldr	r3, [pc, #96]	; (8005244 <pvPortMalloc+0x180>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d203      	bcs.n	80051f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <pvPortMalloc+0x178>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a15      	ldr	r2, [pc, #84]	; (8005244 <pvPortMalloc+0x180>)
 80051f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <pvPortMalloc+0x174>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005206:	f7ff fa59 	bl	80046bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <pvPortMalloc+0x164>
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e7fe      	b.n	8005226 <pvPortMalloc+0x162>
	return pvReturn;
 8005228:	69fb      	ldr	r3, [r7, #28]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000f80 	.word	0x20000f80
 8005238:	20000f8c 	.word	0x20000f8c
 800523c:	20000f84 	.word	0x20000f84
 8005240:	20000f78 	.word	0x20000f78
 8005244:	20000f88 	.word	0x20000f88

08005248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d046      	beq.n	80052e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800525a:	2308      	movs	r3, #8
 800525c:	425b      	negs	r3, r3
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <vPortFree+0xa8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <vPortFree+0x42>
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e7fe      	b.n	8005288 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <vPortFree+0x5e>
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	e7fe      	b.n	80052a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <vPortFree+0xa8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d019      	beq.n	80052e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d115      	bne.n	80052e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <vPortFree+0xa8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	401a      	ands	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052cc:	f7ff f9e8 	bl	80046a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <vPortFree+0xac>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <vPortFree+0xac>)
 80052dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052de:	6938      	ldr	r0, [r7, #16]
 80052e0:	f000 f86c 	bl	80053bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052e4:	f7ff f9ea 	bl	80046bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000f8c 	.word	0x20000f8c
 80052f4:	20000f84 	.word	0x20000f84

080052f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005302:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <prvHeapInit+0xac>)
 8005306:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <prvHeapInit+0xac>)
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <prvHeapInit+0xb0>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005336:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <prvHeapInit+0xb0>)
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005344:	2208      	movs	r2, #8
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a15      	ldr	r2, [pc, #84]	; (80053ac <prvHeapInit+0xb4>)
 8005358:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <prvHeapInit+0xb4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <prvHeapInit+0xb4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <prvHeapInit+0xb4>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <prvHeapInit+0xb8>)
 8005386:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <prvHeapInit+0xbc>)
 800538e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <prvHeapInit+0xc0>)
 8005392:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	200003c0 	.word	0x200003c0
 80053a8:	20000f78 	.word	0x20000f78
 80053ac:	20000f80 	.word	0x20000f80
 80053b0:	20000f88 	.word	0x20000f88
 80053b4:	20000f84 	.word	0x20000f84
 80053b8:	20000f8c 	.word	0x20000f8c

080053bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <prvInsertBlockIntoFreeList+0xac>)
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e002      	b.n	80053d0 <prvInsertBlockIntoFreeList+0x14>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d8f7      	bhi.n	80053ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4413      	add	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d108      	bne.n	80053fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	441a      	add	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d118      	bne.n	8005444 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <prvInsertBlockIntoFreeList+0xb0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d00d      	beq.n	800543a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e008      	b.n	800544c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <prvInsertBlockIntoFreeList+0xb0>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e003      	b.n	800544c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d002      	beq.n	800545a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000f78 	.word	0x20000f78
 800546c:	20000f80 	.word	0x20000f80

08005470 <__libc_init_array>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4e0d      	ldr	r6, [pc, #52]	; (80054a8 <__libc_init_array+0x38>)
 8005474:	4c0d      	ldr	r4, [pc, #52]	; (80054ac <__libc_init_array+0x3c>)
 8005476:	1ba4      	subs	r4, r4, r6
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	2500      	movs	r5, #0
 800547c:	42a5      	cmp	r5, r4
 800547e:	d109      	bne.n	8005494 <__libc_init_array+0x24>
 8005480:	4e0b      	ldr	r6, [pc, #44]	; (80054b0 <__libc_init_array+0x40>)
 8005482:	4c0c      	ldr	r4, [pc, #48]	; (80054b4 <__libc_init_array+0x44>)
 8005484:	f000 f838 	bl	80054f8 <_init>
 8005488:	1ba4      	subs	r4, r4, r6
 800548a:	10a4      	asrs	r4, r4, #2
 800548c:	2500      	movs	r5, #0
 800548e:	42a5      	cmp	r5, r4
 8005490:	d105      	bne.n	800549e <__libc_init_array+0x2e>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005498:	4798      	blx	r3
 800549a:	3501      	adds	r5, #1
 800549c:	e7ee      	b.n	800547c <__libc_init_array+0xc>
 800549e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054a2:	4798      	blx	r3
 80054a4:	3501      	adds	r5, #1
 80054a6:	e7f2      	b.n	800548e <__libc_init_array+0x1e>
 80054a8:	08005614 	.word	0x08005614
 80054ac:	08005614 	.word	0x08005614
 80054b0:	08005614 	.word	0x08005614
 80054b4:	08005618 	.word	0x08005618

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <strcat>:
 80054c8:	b510      	push	{r4, lr}
 80054ca:	4603      	mov	r3, r0
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	1c5c      	adds	r4, r3, #1
 80054d0:	b93a      	cbnz	r2, 80054e2 <strcat+0x1a>
 80054d2:	3b01      	subs	r3, #1
 80054d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054dc:	2a00      	cmp	r2, #0
 80054de:	d1f9      	bne.n	80054d4 <strcat+0xc>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	4623      	mov	r3, r4
 80054e4:	e7f2      	b.n	80054cc <strcat+0x4>

080054e6 <strcpy>:
 80054e6:	4603      	mov	r3, r0
 80054e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ec:	f803 2b01 	strb.w	r2, [r3], #1
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d1f9      	bne.n	80054e8 <strcpy+0x2>
 80054f4:	4770      	bx	lr
	...

080054f8 <_init>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr

08005504 <_fini>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	bf00      	nop
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr
