
TECLADO_Y_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d8  080056d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e0  080056e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080056e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001038  20000018  08005700  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001050  08005700  00021050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010daf  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002687  00000000  00000000  00030df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  00033480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00034240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027aa1  00000000  00000000  00034ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b730  00000000  00000000  0005c979  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1e2d  00000000  00000000  000680a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159ed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003758  00000000  00000000  00159f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005578 	.word	0x08005578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08005578 	.word	0x08005578

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000034 	.word	0x20000034
 8000510:	20000088 	.word	0x20000088

08000514 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
 8000520:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000522:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800052a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800052e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000532:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000534:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000536:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f80e 	bl	800056a <Lcd_init>

	return lcd;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	461d      	mov	r5, r3
 8000552:	f107 0410 	add.w	r4, r7, #16
 8000556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800055a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800055e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	3728      	adds	r7, #40	; 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}

0800056a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7d9b      	ldrb	r3, [r3, #22]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10c      	bne.n	8000594 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800057a:	2133      	movs	r1, #51	; 0x33
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f000 f855 	bl	800062c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000582:	2132      	movs	r1, #50	; 0x32
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f851 	bl	800062c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800058a:	2128      	movs	r1, #40	; 0x28
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f84d 	bl	800062c <lcd_write_command>
 8000592:	e003      	b.n	800059c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000594:	2138      	movs	r1, #56	; 0x38
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f848 	bl	800062c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800059c:	2101      	movs	r1, #1
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f844 	bl	800062c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80005a4:	210c      	movs	r1, #12
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f840 	bl	800062c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80005ac:	2106      	movs	r1, #6
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f83c 	bl	800062c <lcd_write_command>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e00a      	b.n	80005e2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f856 	bl	8000688 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3301      	adds	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	7bfc      	ldrb	r4, [r7, #15]
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	429c      	cmp	r4, r3
 80005ee:	d3ed      	bcc.n	80005cc <Lcd_string+0x10>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd90      	pop	{r4, r7, pc}

080005f8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
 8000604:	4613      	mov	r3, r2
 8000606:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <Lcd_cursor+0x30>)
 800060c:	5cd2      	ldrb	r2, [r2, r3]
 800060e:	78bb      	ldrb	r3, [r7, #2]
 8000610:	4413      	add	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	3b80      	subs	r3, #128	; 0x80
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f806 	bl	800062c <lcd_write_command>
	#endif
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	0800568c 	.word	0x0800568c

0800062c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6898      	ldr	r0, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f001 fdc6 	bl	80021d4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7d9b      	ldrb	r3, [r3, #22]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d111      	bne.n	8000674 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	091b      	lsrs	r3, r3, #4
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2204      	movs	r2, #4
 8000658:	4619      	mov	r1, r3
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f842 	bl	80006e4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2204      	movs	r2, #4
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f839 	bl	80006e4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000672:	e005      	b.n	8000680 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	2208      	movs	r2, #8
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f832 	bl	80006e4 <lcd_write>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6898      	ldr	r0, [r3, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	899b      	ldrh	r3, [r3, #12]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	f001 fd98 	bl	80021d4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7d9b      	ldrb	r3, [r3, #22]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d111      	bne.n	80006d0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	091b      	lsrs	r3, r3, #4
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2204      	movs	r2, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f814 	bl	80006e4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2204      	movs	r2, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f80b 	bl	80006e4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80006ce:	e005      	b.n	80006dc <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2208      	movs	r2, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f804 	bl	80006e4 <lcd_write>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
 80006f0:	4613      	mov	r3, r2
 80006f2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e019      	b.n	800072e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	8819      	ldrh	r1, [r3, #0]
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	fa42 f303 	asr.w	r3, r2, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	f001 fd56 	bl	80021d4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfa      	ldrb	r2, [r7, #15]
 8000730:	78bb      	ldrb	r3, [r7, #2]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3e1      	bcc.n	80006fa <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6918      	ldr	r0, [r3, #16]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	8a9b      	ldrh	r3, [r3, #20]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	f001 fd47 	bl	80021d4 <HAL_GPIO_WritePin>
	DELAY(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 fa7c 	bl	8001c44 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6918      	ldr	r0, [r3, #16]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	8a9b      	ldrh	r3, [r3, #20]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	f001 fd3c 	bl	80021d4 <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b0ac      	sub	sp, #176	; 0xb0
 8000768:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f001 f9ef 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f899 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f93d 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000776:	f000 f90b 	bl	8000990 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = {
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <main+0x110>)
 800077c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      	D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
      };

      Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000786:	4a3c      	ldr	r2, [pc, #240]	; (8000878 <main+0x114>)
 8000788:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800078c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000790:	e883 0003 	stmia.w	r3, {r0, r1}

      Lcd_HandleTypeDef lcd;

      lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000794:	4638      	mov	r0, r7
 8000796:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800079a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800079e:	2300      	movs	r3, #0
 80007a0:	9303      	str	r3, [sp, #12]
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	9302      	str	r3, [sp, #8]
 80007a6:	4b35      	ldr	r3, [pc, #212]	; (800087c <main+0x118>)
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007b4:	f7ff feae 	bl	8000514 <Lcd_create>
 80007b8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80007bc:	463d      	mov	r5, r7
 80007be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007c6:	e884 0003 	stmia.w	r4, {r0, r1}

      Lcd_string(&lcd, "*Bienvenido*");
 80007ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007ce:	492c      	ldr	r1, [pc, #176]	; (8000880 <main+0x11c>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fef3 	bl	80005bc <Lcd_string>

      Lcd_cursor(&lcd, 1,0);
 80007d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff0a 	bl	80005f8 <Lcd_cursor>
      Lcd_string(&lcd, "Ingrese pin: ");
 80007e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007e8:	4926      	ldr	r1, [pc, #152]	; (8000884 <main+0x120>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fee6 	bl	80005bc <Lcd_string>
//      Lcd_cursor(&lcd, 1,5);
//     Lcd_int(&lcd,cursor);



      lock_safe(); // inicializa seguro
 80007f0:	f001 f86a 	bl	80018c8 <lock_safe>
//
      current_state = STATE0; //inicializamos el estado
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x124>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <main+0x128>)
 80007fc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000800:	461d      	mov	r5, r3
 8000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000806:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800080e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fc4c 	bl	80040b2 <osThreadCreate>
 800081a:	4602      	mov	r2, r0
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <main+0x12c>)
 800081e:	601a      	str	r2, [r3, #0]

  /* definition and creation of clave */
  osThreadDef(clave, StartTask02, osPriorityIdle, 0, 128);
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <main+0x130>)
 8000822:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000826:	461d      	mov	r5, r3
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000830:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  claveHandle = osThreadCreate(osThread(clave), NULL);
 8000834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fc39 	bl	80040b2 <osThreadCreate>
 8000840:	4602      	mov	r2, r0
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <main+0x134>)
 8000844:	601a      	str	r2, [r3, #0]

  /* definition and creation of imprimir */
  osThreadDef(imprimir, StartTask03, osPriorityIdle, 0, 128);
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <main+0x138>)
 8000848:	f107 041c 	add.w	r4, r7, #28
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imprimirHandle = osThreadCreate(osThread(imprimir), NULL);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fc26 	bl	80040b2 <osThreadCreate>
 8000866:	4602      	mov	r2, r0
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <main+0x13c>)
 800086a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800086c:	f003 fc1a 	bl	80040a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x10c>
 8000872:	bf00      	nop
 8000874:	080055b0 	.word	0x080055b0
 8000878:	080055c0 	.word	0x080055c0
 800087c:	48000800 	.word	0x48000800
 8000880:	08005590 	.word	0x08005590
 8000884:	080055a0 	.word	0x080055a0
 8000888:	20000f94 	.word	0x20000f94
 800088c:	080055d4 	.word	0x080055d4
 8000890:	20000f90 	.word	0x20000f90
 8000894:	080055f8 	.word	0x080055f8
 8000898:	20000fa0 	.word	0x20000fa0
 800089c:	08005620 	.word	0x08005620
 80008a0:	20001044 	.word	0x20001044

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0b8      	sub	sp, #224	; 0xe0
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ae:	2244      	movs	r2, #68	; 0x44
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fe40 	bl	8005538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	463b      	mov	r3, r7
 80008ca:	2288      	movs	r2, #136	; 0x88
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f004 fe32 	bl	8005538 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2310      	movs	r3, #16
 80008e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008fa:	230a      	movs	r3, #10
 80008fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000900:	2307      	movs	r3, #7
 8000902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fcd8 	bl	80022cc <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000922:	f001 f81d 	bl	8001960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2303      	movs	r3, #3
 800092e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000944:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000948:	2104      	movs	r1, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f8a4 	bl	8002a98 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000956:	f001 f803 	bl	8001960 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800095a:	2302      	movs	r3, #2
 800095c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095e:	2300      	movs	r3, #0
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fa9b 	bl	8002ea0 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000970:	f000 fff6 	bl	8001960 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000974:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000978:	f001 fc52 	bl	8002220 <HAL_PWREx_ControlVoltageScaling>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000982:	f000 ffed 	bl	8001960 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	37e0      	adds	r7, #224	; 0xe0
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART2_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009d4:	f002 ff14 	bl	8003800 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 ffbf 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000fb4 	.word	0x20000fb4
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a46      	ldr	r2, [pc, #280]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a40      	ldr	r2, [pc, #256]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a3a      	ldr	r2, [pc, #232]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <MX_GPIO_Init+0x14c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RO_Pin|LD2_Pin|D7_Pin|RS_Pin
 8000a66:	2200      	movs	r2, #0
 8000a68:	f649 3122 	movw	r1, #39714	; 0x9b22
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f001 fbb0 	bl	80021d4 <HAL_GPIO_WritePin>
                          |F2_Pin|F1_Pin|VE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|F4_Pin|F3_Pin|D5_Pin
 8000a74:	2200      	movs	r2, #0
 8000a76:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000a7a:	4831      	ldr	r0, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x150>)
 8000a7c:	f001 fbaa 	bl	80021d4 <HAL_GPIO_WritePin>
                          |D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	482f      	ldr	r0, [pc, #188]	; (8000b44 <MX_GPIO_Init+0x154>)
 8000a86:	f001 fba5 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4829      	ldr	r0, [pc, #164]	; (8000b44 <MX_GPIO_Init+0x154>)
 8000aa0:	f001 f9d8 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RO_Pin LD2_Pin D7_Pin RS_Pin
                           F2_Pin F1_Pin VE_Pin */
  GPIO_InitStruct.Pin = RO_Pin|LD2_Pin|D7_Pin|RS_Pin
 8000aa4:	f649 3322 	movw	r3, #39714	; 0x9b22
 8000aa8:	617b      	str	r3, [r7, #20]
                          |F2_Pin|F1_Pin|VE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f001 f9c8 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000ac4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 f9ba 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin F4_Pin F3_Pin D5_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|F4_Pin|F3_Pin|D5_Pin
 8000ae0:	f641 4330 	movw	r3, #7216	; 0x1c30
 8000ae4:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4811      	ldr	r0, [pc, #68]	; (8000b40 <MX_GPIO_Init+0x150>)
 8000afa:	f001 f9ab 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin;
 8000afe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0x150>)
 8000b14:	f001 f99e 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0x154>)
 8000b30:	f001 f990 	bl	8001e54 <HAL_GPIO_Init>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800
 8000b48:	10210000 	.word	0x10210000

08000b4c <contr_password>:

/* USER CODE BEGIN 4 */


void contr_password(int input){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	input = read_keypad();
 8000b54:	f000 fd10 	bl	8001578 <read_keypad>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	607b      	str	r3, [r7, #4]
	           if(input !='F'){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b46      	cmp	r3, #70	; 0x46
 8000b60:	f000 83ad 	beq.w	80012be <contr_password+0x772>
	         	  switch(current_state){
 8000b64:	4b69      	ldr	r3, [pc, #420]	; (8000d0c <contr_password+0x1c0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	f200 83a8 	bhi.w	80012be <contr_password+0x772>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <contr_password+0x28>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b89 	.word	0x08000b89
 8000b78:	08000d69 	.word	0x08000d69
 8000b7c:	08000f49 	.word	0x08000f49
 8000b80:	08001129 	.word	0x08001129
 8000b84:	080012ad 	.word	0x080012ad
	     			case STATE0:
						if(i<4){
 8000b88:	4b61      	ldr	r3, [pc, #388]	; (8000d10 <contr_password+0x1c4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	f300 80b6 	bgt.w	8000cfe <contr_password+0x1b2>
							switch(input){
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b31      	cmp	r3, #49	; 0x31
 8000b96:	d10e      	bne.n	8000bb6 <contr_password+0x6a>
								case '1':
								a1=1;
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <contr_password+0x1c8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
								cursor("1");
 8000b9e:	485e      	ldr	r0, [pc, #376]	; (8000d18 <contr_password+0x1cc>)
 8000ba0:	f000 fbc2 	bl	8001328 <cursor>
								current_state = STATE0;
 8000ba4:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <contr_password+0x1c0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000baa:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <contr_password+0x1c4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a57      	ldr	r2, [pc, #348]	; (8000d10 <contr_password+0x1c4>)
 8000bb2:	6013      	str	r3, [r2, #0]
								break;}
 8000bb4:	bf00      	nop
							switch(input){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b32      	cmp	r3, #50	; 0x32
 8000bba:	d10e      	bne.n	8000bda <contr_password+0x8e>
								case '2':
								a2=2;
 8000bbc:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <contr_password+0x1d0>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8000bc2:	4857      	ldr	r0, [pc, #348]	; (8000d20 <contr_password+0x1d4>)
 8000bc4:	f000 fbb0 	bl	8001328 <cursor>
								current_state = STATE1;
 8000bc8:	4b50      	ldr	r3, [pc, #320]	; (8000d0c <contr_password+0x1c0>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000bce:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <contr_password+0x1c4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a4e      	ldr	r2, [pc, #312]	; (8000d10 <contr_password+0x1c4>)
 8000bd6:	6013      	str	r3, [r2, #0]
								break;}
 8000bd8:	bf00      	nop
							switch(input){
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b33      	cmp	r3, #51	; 0x33
 8000bde:	d10e      	bne.n	8000bfe <contr_password+0xb2>
								case '3':
								a3=3;
 8000be0:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <contr_password+0x1d8>)
 8000be2:	2203      	movs	r2, #3
 8000be4:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8000be6:	4850      	ldr	r0, [pc, #320]	; (8000d28 <contr_password+0x1dc>)
 8000be8:	f000 fb9e 	bl	8001328 <cursor>
								current_state = STATE0;
 8000bec:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <contr_password+0x1c0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <contr_password+0x1c4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a45      	ldr	r2, [pc, #276]	; (8000d10 <contr_password+0x1c4>)
 8000bfa:	6013      	str	r3, [r2, #0]
								break;}
 8000bfc:	bf00      	nop
							switch(input){
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b34      	cmp	r3, #52	; 0x34
 8000c02:	d10e      	bne.n	8000c22 <contr_password+0xd6>
								case '4':
								a4=4;
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <contr_password+0x1e0>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	701a      	strb	r2, [r3, #0]
								cursor("4");
 8000c0a:	4849      	ldr	r0, [pc, #292]	; (8000d30 <contr_password+0x1e4>)
 8000c0c:	f000 fb8c 	bl	8001328 <cursor>
								current_state = STATE0;
 8000c10:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <contr_password+0x1c0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c16:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <contr_password+0x1c4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a3c      	ldr	r2, [pc, #240]	; (8000d10 <contr_password+0x1c4>)
 8000c1e:	6013      	str	r3, [r2, #0]
								break;}
 8000c20:	bf00      	nop
							switch(input){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b35      	cmp	r3, #53	; 0x35
 8000c26:	d10e      	bne.n	8000c46 <contr_password+0xfa>
								case '5':
								a5=5;
 8000c28:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <contr_password+0x1e8>)
 8000c2a:	2205      	movs	r2, #5
 8000c2c:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8000c2e:	4842      	ldr	r0, [pc, #264]	; (8000d38 <contr_password+0x1ec>)
 8000c30:	f000 fb7a 	bl	8001328 <cursor>
								current_state = STATE0;
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <contr_password+0x1c0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <contr_password+0x1c4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <contr_password+0x1c4>)
 8000c42:	6013      	str	r3, [r2, #0]
								break;}
 8000c44:	bf00      	nop
							switch(input){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b36      	cmp	r3, #54	; 0x36
 8000c4a:	d10e      	bne.n	8000c6a <contr_password+0x11e>
								case '6':
								a6=6;
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <contr_password+0x1f0>)
 8000c4e:	2206      	movs	r2, #6
 8000c50:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8000c52:	483b      	ldr	r0, [pc, #236]	; (8000d40 <contr_password+0x1f4>)
 8000c54:	f000 fb68 	bl	8001328 <cursor>
								current_state = STATE0;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <contr_password+0x1c0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <contr_password+0x1c4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <contr_password+0x1c4>)
 8000c66:	6013      	str	r3, [r2, #0]
								break;}
 8000c68:	bf00      	nop
							switch(input){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b37      	cmp	r3, #55	; 0x37
 8000c6e:	d10e      	bne.n	8000c8e <contr_password+0x142>
								case '7':
								a7=7;
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <contr_password+0x1f8>)
 8000c72:	2207      	movs	r2, #7
 8000c74:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8000c76:	4834      	ldr	r0, [pc, #208]	; (8000d48 <contr_password+0x1fc>)
 8000c78:	f000 fb56 	bl	8001328 <cursor>
								current_state = STATE0;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <contr_password+0x1c0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <contr_password+0x1c4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <contr_password+0x1c4>)
 8000c8a:	6013      	str	r3, [r2, #0]
								break;}
 8000c8c:	bf00      	nop
							switch(input){
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b38      	cmp	r3, #56	; 0x38
 8000c92:	d10e      	bne.n	8000cb2 <contr_password+0x166>
								case '8':
								a8=8;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <contr_password+0x200>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	701a      	strb	r2, [r3, #0]
								cursor("8");
 8000c9a:	482d      	ldr	r0, [pc, #180]	; (8000d50 <contr_password+0x204>)
 8000c9c:	f000 fb44 	bl	8001328 <cursor>
								current_state = STATE0;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <contr_password+0x1c0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <contr_password+0x1c4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <contr_password+0x1c4>)
 8000cae:	6013      	str	r3, [r2, #0]
								break;}
 8000cb0:	bf00      	nop
							switch(input){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b39      	cmp	r3, #57	; 0x39
 8000cb6:	d10e      	bne.n	8000cd6 <contr_password+0x18a>
								case '9':
								a9=9;
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <contr_password+0x208>)
 8000cba:	2209      	movs	r2, #9
 8000cbc:	701a      	strb	r2, [r3, #0]
								cursor("9");
 8000cbe:	4826      	ldr	r0, [pc, #152]	; (8000d58 <contr_password+0x20c>)
 8000cc0:	f000 fb32 	bl	8001328 <cursor>
								current_state = STATE0;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <contr_password+0x1c0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <contr_password+0x1c4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <contr_password+0x1c4>)
 8000cd2:	6013      	str	r3, [r2, #0]
								break;}
 8000cd4:	bf00      	nop
							switch(input){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b30      	cmp	r3, #48	; 0x30
 8000cda:	d000      	beq.n	8000cde <contr_password+0x192>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
	                break;
 8000cdc:	e2ef      	b.n	80012be <contr_password+0x772>
								a0=0;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <contr_password+0x210>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <contr_password+0x214>)
 8000ce6:	f000 fb1f 	bl	8001328 <cursor>
								current_state = STATE0;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <contr_password+0x1c0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <contr_password+0x1c4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <contr_password+0x1c4>)
 8000cf8:	6013      	str	r3, [r2, #0]
								break;}
 8000cfa:	bf00      	nop
	                break;
 8000cfc:	e2df      	b.n	80012be <contr_password+0x772>
							current_state = STATE0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <contr_password+0x1c0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
							error("");
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <contr_password+0x218>)
 8000d06:	f000 fbe1 	bl	80014cc <error>
	                break;
 8000d0a:	e2d8      	b.n	80012be <contr_password+0x772>
 8000d0c:	20000f94 	.word	0x20000f94
 8000d10:	20000288 	.word	0x20000288
 8000d14:	20000f98 	.word	0x20000f98
 8000d18:	0800563c 	.word	0x0800563c
 8000d1c:	20000f9d 	.word	0x20000f9d
 8000d20:	08005640 	.word	0x08005640
 8000d24:	20000f99 	.word	0x20000f99
 8000d28:	08005644 	.word	0x08005644
 8000d2c:	20001048 	.word	0x20001048
 8000d30:	08005648 	.word	0x08005648
 8000d34:	20000f9c 	.word	0x20000f9c
 8000d38:	0800564c 	.word	0x0800564c
 8000d3c:	20001040 	.word	0x20001040
 8000d40:	08005650 	.word	0x08005650
 8000d44:	20000f9b 	.word	0x20000f9b
 8000d48:	08005654 	.word	0x08005654
 8000d4c:	20000f96 	.word	0x20000f96
 8000d50:	08005658 	.word	0x08005658
 8000d54:	20000f95 	.word	0x20000f95
 8000d58:	0800565c 	.word	0x0800565c
 8000d5c:	2000103f 	.word	0x2000103f
 8000d60:	08005660 	.word	0x08005660
 8000d64:	08005664 	.word	0x08005664
	     			case STATE1:
						if(i<4){
 8000d68:	4b60      	ldr	r3, [pc, #384]	; (8000eec <contr_password+0x3a0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	f300 80b6 	bgt.w	8000ede <contr_password+0x392>
							switch(input){
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b31      	cmp	r3, #49	; 0x31
 8000d76:	d10e      	bne.n	8000d96 <contr_password+0x24a>
								case '1':
								a1=1;
 8000d78:	4b5d      	ldr	r3, [pc, #372]	; (8000ef0 <contr_password+0x3a4>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
								cursor("1");
 8000d7e:	485d      	ldr	r0, [pc, #372]	; (8000ef4 <contr_password+0x3a8>)
 8000d80:	f000 fad2 	bl	8001328 <cursor>
								current_state = STATE1;
 8000d84:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <contr_password+0x3ac>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000d8a:	4b58      	ldr	r3, [pc, #352]	; (8000eec <contr_password+0x3a0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a56      	ldr	r2, [pc, #344]	; (8000eec <contr_password+0x3a0>)
 8000d92:	6013      	str	r3, [r2, #0]
								break;}
 8000d94:	bf00      	nop
							switch(input){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b32      	cmp	r3, #50	; 0x32
 8000d9a:	d10e      	bne.n	8000dba <contr_password+0x26e>
								case '2':
								a2=2;
 8000d9c:	4b57      	ldr	r3, [pc, #348]	; (8000efc <contr_password+0x3b0>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8000da2:	4857      	ldr	r0, [pc, #348]	; (8000f00 <contr_password+0x3b4>)
 8000da4:	f000 fac0 	bl	8001328 <cursor>
								current_state = STATE1;
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <contr_password+0x3ac>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000dae:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <contr_password+0x3a0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a4d      	ldr	r2, [pc, #308]	; (8000eec <contr_password+0x3a0>)
 8000db6:	6013      	str	r3, [r2, #0]
								break;}
 8000db8:	bf00      	nop
							switch(input){
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b33      	cmp	r3, #51	; 0x33
 8000dbe:	d10e      	bne.n	8000dde <contr_password+0x292>
								case '3':
								a3=3;
 8000dc0:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <contr_password+0x3b8>)
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8000dc6:	4850      	ldr	r0, [pc, #320]	; (8000f08 <contr_password+0x3bc>)
 8000dc8:	f000 faae 	bl	8001328 <cursor>
								current_state = STATE1;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <contr_password+0x3ac>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <contr_password+0x3a0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a44      	ldr	r2, [pc, #272]	; (8000eec <contr_password+0x3a0>)
 8000dda:	6013      	str	r3, [r2, #0]
								break;}
 8000ddc:	bf00      	nop
							switch(input){
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b34      	cmp	r3, #52	; 0x34
 8000de2:	d10e      	bne.n	8000e02 <contr_password+0x2b6>
								case '4':
								a4=4;
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <contr_password+0x3c0>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	701a      	strb	r2, [r3, #0]
								cursor("4");
 8000dea:	4849      	ldr	r0, [pc, #292]	; (8000f10 <contr_password+0x3c4>)
 8000dec:	f000 fa9c 	bl	8001328 <cursor>
								current_state = STATE1;
 8000df0:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <contr_password+0x3ac>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <contr_password+0x3a0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a3b      	ldr	r2, [pc, #236]	; (8000eec <contr_password+0x3a0>)
 8000dfe:	6013      	str	r3, [r2, #0]
								break;}
 8000e00:	bf00      	nop
							switch(input){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b35      	cmp	r3, #53	; 0x35
 8000e06:	d10e      	bne.n	8000e26 <contr_password+0x2da>
								case '5':
								a5=5;
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <contr_password+0x3c8>)
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8000e0e:	4842      	ldr	r0, [pc, #264]	; (8000f18 <contr_password+0x3cc>)
 8000e10:	f000 fa8a 	bl	8001328 <cursor>
								current_state = STATE1;
 8000e14:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <contr_password+0x3ac>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <contr_password+0x3a0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <contr_password+0x3a0>)
 8000e22:	6013      	str	r3, [r2, #0]
								break;}
 8000e24:	bf00      	nop
							switch(input){
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b36      	cmp	r3, #54	; 0x36
 8000e2a:	d10e      	bne.n	8000e4a <contr_password+0x2fe>
								case '6':
								a6=6;
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <contr_password+0x3d0>)
 8000e2e:	2206      	movs	r2, #6
 8000e30:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8000e32:	483b      	ldr	r0, [pc, #236]	; (8000f20 <contr_password+0x3d4>)
 8000e34:	f000 fa78 	bl	8001328 <cursor>
								current_state = STATE1;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <contr_password+0x3ac>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <contr_password+0x3a0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <contr_password+0x3a0>)
 8000e46:	6013      	str	r3, [r2, #0]
								break;}
 8000e48:	bf00      	nop
							switch(input){
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b37      	cmp	r3, #55	; 0x37
 8000e4e:	d10e      	bne.n	8000e6e <contr_password+0x322>
								case '7':
								a7=7;
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <contr_password+0x3d8>)
 8000e52:	2207      	movs	r2, #7
 8000e54:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8000e56:	4834      	ldr	r0, [pc, #208]	; (8000f28 <contr_password+0x3dc>)
 8000e58:	f000 fa66 	bl	8001328 <cursor>
								current_state = STATE1;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <contr_password+0x3ac>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <contr_password+0x3a0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a20      	ldr	r2, [pc, #128]	; (8000eec <contr_password+0x3a0>)
 8000e6a:	6013      	str	r3, [r2, #0]
								break;}
 8000e6c:	bf00      	nop
							switch(input){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b38      	cmp	r3, #56	; 0x38
 8000e72:	d10e      	bne.n	8000e92 <contr_password+0x346>
								case '8':
								a8=8;
 8000e74:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <contr_password+0x3e0>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	701a      	strb	r2, [r3, #0]
								cursor("8");
 8000e7a:	482d      	ldr	r0, [pc, #180]	; (8000f30 <contr_password+0x3e4>)
 8000e7c:	f000 fa54 	bl	8001328 <cursor>
								current_state = STATE1;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <contr_password+0x3ac>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <contr_password+0x3a0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <contr_password+0x3a0>)
 8000e8e:	6013      	str	r3, [r2, #0]
								break;}
 8000e90:	bf00      	nop
							switch(input){
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b39      	cmp	r3, #57	; 0x39
 8000e96:	d10e      	bne.n	8000eb6 <contr_password+0x36a>
								case '9':
								a9=9;
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <contr_password+0x3e8>)
 8000e9a:	2209      	movs	r2, #9
 8000e9c:	701a      	strb	r2, [r3, #0]
								cursor("9");
 8000e9e:	4826      	ldr	r0, [pc, #152]	; (8000f38 <contr_password+0x3ec>)
 8000ea0:	f000 fa42 	bl	8001328 <cursor>
								current_state = STATE1;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <contr_password+0x3ac>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <contr_password+0x3a0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <contr_password+0x3a0>)
 8000eb2:	6013      	str	r3, [r2, #0]
								break;}
 8000eb4:	bf00      	nop
							switch(input){
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b30      	cmp	r3, #48	; 0x30
 8000eba:	d000      	beq.n	8000ebe <contr_password+0x372>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
	                break;
 8000ebc:	e1ff      	b.n	80012be <contr_password+0x772>
								a0=0;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <contr_password+0x3f0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <contr_password+0x3f4>)
 8000ec6:	f000 fa2f 	bl	8001328 <cursor>
								current_state = STATE2;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <contr_password+0x3ac>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <contr_password+0x3a0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <contr_password+0x3a0>)
 8000ed8:	6013      	str	r3, [r2, #0]
								break;}
 8000eda:	bf00      	nop
	                break;
 8000edc:	e1ef      	b.n	80012be <contr_password+0x772>
							current_state = STATE0;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <contr_password+0x3ac>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
							error("");
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <contr_password+0x3f8>)
 8000ee6:	f000 faf1 	bl	80014cc <error>
	                break;
 8000eea:	e1e8      	b.n	80012be <contr_password+0x772>
 8000eec:	20000288 	.word	0x20000288
 8000ef0:	20000f98 	.word	0x20000f98
 8000ef4:	0800563c 	.word	0x0800563c
 8000ef8:	20000f94 	.word	0x20000f94
 8000efc:	20000f9d 	.word	0x20000f9d
 8000f00:	08005640 	.word	0x08005640
 8000f04:	20000f99 	.word	0x20000f99
 8000f08:	08005644 	.word	0x08005644
 8000f0c:	20001048 	.word	0x20001048
 8000f10:	08005648 	.word	0x08005648
 8000f14:	20000f9c 	.word	0x20000f9c
 8000f18:	0800564c 	.word	0x0800564c
 8000f1c:	20001040 	.word	0x20001040
 8000f20:	08005650 	.word	0x08005650
 8000f24:	20000f9b 	.word	0x20000f9b
 8000f28:	08005654 	.word	0x08005654
 8000f2c:	20000f96 	.word	0x20000f96
 8000f30:	08005658 	.word	0x08005658
 8000f34:	20000f95 	.word	0x20000f95
 8000f38:	0800565c 	.word	0x0800565c
 8000f3c:	2000103f 	.word	0x2000103f
 8000f40:	08005660 	.word	0x08005660
 8000f44:	08005664 	.word	0x08005664
	     			case STATE2:
						if(i<4){
 8000f48:	4b60      	ldr	r3, [pc, #384]	; (80010cc <contr_password+0x580>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	f300 80b6 	bgt.w	80010be <contr_password+0x572>
							switch(input){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b31      	cmp	r3, #49	; 0x31
 8000f56:	d10e      	bne.n	8000f76 <contr_password+0x42a>
								case '1':
								a1=1;
 8000f58:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <contr_password+0x584>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
								cursor("1");
 8000f5e:	485d      	ldr	r0, [pc, #372]	; (80010d4 <contr_password+0x588>)
 8000f60:	f000 f9e2 	bl	8001328 <cursor>
								current_state = STATE3;
 8000f64:	4b5c      	ldr	r3, [pc, #368]	; (80010d8 <contr_password+0x58c>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f6a:	4b58      	ldr	r3, [pc, #352]	; (80010cc <contr_password+0x580>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a56      	ldr	r2, [pc, #344]	; (80010cc <contr_password+0x580>)
 8000f72:	6013      	str	r3, [r2, #0]
								break;}
 8000f74:	bf00      	nop
							switch(input){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b32      	cmp	r3, #50	; 0x32
 8000f7a:	d10e      	bne.n	8000f9a <contr_password+0x44e>
								case '2':
								a2=2;
 8000f7c:	4b57      	ldr	r3, [pc, #348]	; (80010dc <contr_password+0x590>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8000f82:	4857      	ldr	r0, [pc, #348]	; (80010e0 <contr_password+0x594>)
 8000f84:	f000 f9d0 	bl	8001328 <cursor>
								current_state = STATE2;
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <contr_password+0x58c>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000f8e:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <contr_password+0x580>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <contr_password+0x580>)
 8000f96:	6013      	str	r3, [r2, #0]
								break;}
 8000f98:	bf00      	nop
							switch(input){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b33      	cmp	r3, #51	; 0x33
 8000f9e:	d10e      	bne.n	8000fbe <contr_password+0x472>
								case '3':
								a3=3;
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <contr_password+0x598>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8000fa6:	4850      	ldr	r0, [pc, #320]	; (80010e8 <contr_password+0x59c>)
 8000fa8:	f000 f9be 	bl	8001328 <cursor>
								current_state = STATE2;
 8000fac:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <contr_password+0x58c>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <contr_password+0x580>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a44      	ldr	r2, [pc, #272]	; (80010cc <contr_password+0x580>)
 8000fba:	6013      	str	r3, [r2, #0]
								break;}
 8000fbc:	bf00      	nop
							switch(input){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b34      	cmp	r3, #52	; 0x34
 8000fc2:	d10e      	bne.n	8000fe2 <contr_password+0x496>
								case '4':
								a4=4;
 8000fc4:	4b49      	ldr	r3, [pc, #292]	; (80010ec <contr_password+0x5a0>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	701a      	strb	r2, [r3, #0]
								cursor("4");
 8000fca:	4849      	ldr	r0, [pc, #292]	; (80010f0 <contr_password+0x5a4>)
 8000fcc:	f000 f9ac 	bl	8001328 <cursor>
								current_state = STATE2;
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <contr_password+0x58c>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <contr_password+0x580>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <contr_password+0x580>)
 8000fde:	6013      	str	r3, [r2, #0]
								break;}
 8000fe0:	bf00      	nop
							switch(input){
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b35      	cmp	r3, #53	; 0x35
 8000fe6:	d10e      	bne.n	8001006 <contr_password+0x4ba>
								case '5':
								a5=5;
 8000fe8:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <contr_password+0x5a8>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	701a      	strb	r2, [r3, #0]
								cursor("5");
 8000fee:	4842      	ldr	r0, [pc, #264]	; (80010f8 <contr_password+0x5ac>)
 8000ff0:	f000 f99a 	bl	8001328 <cursor>
								current_state = STATE2;
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <contr_password+0x58c>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <contr_password+0x580>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <contr_password+0x580>)
 8001002:	6013      	str	r3, [r2, #0]
								break;}
 8001004:	bf00      	nop
							switch(input){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b36      	cmp	r3, #54	; 0x36
 800100a:	d10e      	bne.n	800102a <contr_password+0x4de>
								case '6':
								a6=6;
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <contr_password+0x5b0>)
 800100e:	2206      	movs	r2, #6
 8001010:	701a      	strb	r2, [r3, #0]
								cursor("6");
 8001012:	483b      	ldr	r0, [pc, #236]	; (8001100 <contr_password+0x5b4>)
 8001014:	f000 f988 	bl	8001328 <cursor>
								current_state = STATE2;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <contr_password+0x58c>)
 800101a:	2202      	movs	r2, #2
 800101c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <contr_password+0x580>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a29      	ldr	r2, [pc, #164]	; (80010cc <contr_password+0x580>)
 8001026:	6013      	str	r3, [r2, #0]
								break;}
 8001028:	bf00      	nop
							switch(input){
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b37      	cmp	r3, #55	; 0x37
 800102e:	d10e      	bne.n	800104e <contr_password+0x502>
								case '7':
								a7=7;
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <contr_password+0x5b8>)
 8001032:	2207      	movs	r2, #7
 8001034:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8001036:	4834      	ldr	r0, [pc, #208]	; (8001108 <contr_password+0x5bc>)
 8001038:	f000 f976 	bl	8001328 <cursor>
								current_state = STATE2;
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <contr_password+0x58c>)
 800103e:	2202      	movs	r2, #2
 8001040:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <contr_password+0x580>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <contr_password+0x580>)
 800104a:	6013      	str	r3, [r2, #0]
								break;}
 800104c:	bf00      	nop
							switch(input){
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b38      	cmp	r3, #56	; 0x38
 8001052:	d10e      	bne.n	8001072 <contr_password+0x526>
								case '8':
								a8=8;
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <contr_password+0x5c0>)
 8001056:	2208      	movs	r2, #8
 8001058:	701a      	strb	r2, [r3, #0]
								cursor("8");
 800105a:	482d      	ldr	r0, [pc, #180]	; (8001110 <contr_password+0x5c4>)
 800105c:	f000 f964 	bl	8001328 <cursor>
								current_state = STATE2;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <contr_password+0x58c>)
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <contr_password+0x580>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <contr_password+0x580>)
 800106e:	6013      	str	r3, [r2, #0]
								break;}
 8001070:	bf00      	nop
							switch(input){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b39      	cmp	r3, #57	; 0x39
 8001076:	d10e      	bne.n	8001096 <contr_password+0x54a>
								case '9':
								a9=9;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <contr_password+0x5c8>)
 800107a:	2209      	movs	r2, #9
 800107c:	701a      	strb	r2, [r3, #0]
								cursor("9");
 800107e:	4826      	ldr	r0, [pc, #152]	; (8001118 <contr_password+0x5cc>)
 8001080:	f000 f952 	bl	8001328 <cursor>
								current_state = STATE2;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <contr_password+0x58c>)
 8001086:	2202      	movs	r2, #2
 8001088:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <contr_password+0x580>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <contr_password+0x580>)
 8001092:	6013      	str	r3, [r2, #0]
								break;}
 8001094:	bf00      	nop
							switch(input){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b30      	cmp	r3, #48	; 0x30
 800109a:	d000      	beq.n	800109e <contr_password+0x552>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
	     			break;
 800109c:	e10f      	b.n	80012be <contr_password+0x772>
								a0=0;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <contr_password+0x5d0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
								cursor("0");
 80010a4:	481e      	ldr	r0, [pc, #120]	; (8001120 <contr_password+0x5d4>)
 80010a6:	f000 f93f 	bl	8001328 <cursor>
								current_state = STATE2;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <contr_password+0x58c>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <contr_password+0x580>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <contr_password+0x580>)
 80010b8:	6013      	str	r3, [r2, #0]
								break;}
 80010ba:	bf00      	nop
	     			break;
 80010bc:	e0ff      	b.n	80012be <contr_password+0x772>
							current_state = STATE0;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <contr_password+0x58c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
							error("");
 80010c4:	4817      	ldr	r0, [pc, #92]	; (8001124 <contr_password+0x5d8>)
 80010c6:	f000 fa01 	bl	80014cc <error>
	     			break;
 80010ca:	e0f8      	b.n	80012be <contr_password+0x772>
 80010cc:	20000288 	.word	0x20000288
 80010d0:	20000f98 	.word	0x20000f98
 80010d4:	0800563c 	.word	0x0800563c
 80010d8:	20000f94 	.word	0x20000f94
 80010dc:	20000f9d 	.word	0x20000f9d
 80010e0:	08005640 	.word	0x08005640
 80010e4:	20000f99 	.word	0x20000f99
 80010e8:	08005644 	.word	0x08005644
 80010ec:	20001048 	.word	0x20001048
 80010f0:	08005648 	.word	0x08005648
 80010f4:	20000f9c 	.word	0x20000f9c
 80010f8:	0800564c 	.word	0x0800564c
 80010fc:	20001040 	.word	0x20001040
 8001100:	08005650 	.word	0x08005650
 8001104:	20000f9b 	.word	0x20000f9b
 8001108:	08005654 	.word	0x08005654
 800110c:	20000f96 	.word	0x20000f96
 8001110:	08005658 	.word	0x08005658
 8001114:	20000f95 	.word	0x20000f95
 8001118:	0800565c 	.word	0x0800565c
 800111c:	2000103f 	.word	0x2000103f
 8001120:	08005660 	.word	0x08005660
 8001124:	08005664 	.word	0x08005664
	     			case STATE3:
						if(i<4){
 8001128:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <contr_password+0x77c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b03      	cmp	r3, #3
 800112e:	f300 80b6 	bgt.w	800129e <contr_password+0x752>
							switch(input){
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b31      	cmp	r3, #49	; 0x31
 8001136:	d10e      	bne.n	8001156 <contr_password+0x60a>
								case '1':
								a1=1;
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <contr_password+0x780>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
								cursor("1");
 800113e:	4864      	ldr	r0, [pc, #400]	; (80012d0 <contr_password+0x784>)
 8001140:	f000 f8f2 	bl	8001328 <cursor>
								current_state = STATE3;
 8001144:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <contr_password+0x788>)
 8001146:	2203      	movs	r2, #3
 8001148:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800114a:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <contr_password+0x77c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a5d      	ldr	r2, [pc, #372]	; (80012c8 <contr_password+0x77c>)
 8001152:	6013      	str	r3, [r2, #0]
								break;}
 8001154:	bf00      	nop
							switch(input){
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b32      	cmp	r3, #50	; 0x32
 800115a:	d10e      	bne.n	800117a <contr_password+0x62e>
								case '2':
								a2=2;
 800115c:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <contr_password+0x78c>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
								cursor("2");
 8001162:	485e      	ldr	r0, [pc, #376]	; (80012dc <contr_password+0x790>)
 8001164:	f000 f8e0 	bl	8001328 <cursor>
								current_state = STATE3;
 8001168:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <contr_password+0x788>)
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800116e:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <contr_password+0x77c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a54      	ldr	r2, [pc, #336]	; (80012c8 <contr_password+0x77c>)
 8001176:	6013      	str	r3, [r2, #0]
								break;}
 8001178:	bf00      	nop
							switch(input){
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b33      	cmp	r3, #51	; 0x33
 800117e:	d10e      	bne.n	800119e <contr_password+0x652>
								case '3':
								a3=3;
 8001180:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <contr_password+0x794>)
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
								cursor("3");
 8001186:	4857      	ldr	r0, [pc, #348]	; (80012e4 <contr_password+0x798>)
 8001188:	f000 f8ce 	bl	8001328 <cursor>
								current_state = STATE3;
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <contr_password+0x788>)
 800118e:	2203      	movs	r2, #3
 8001190:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001192:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <contr_password+0x77c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <contr_password+0x77c>)
 800119a:	6013      	str	r3, [r2, #0]
								break;}
 800119c:	bf00      	nop
							switch(input){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b34      	cmp	r3, #52	; 0x34
 80011a2:	d10e      	bne.n	80011c2 <contr_password+0x676>
								case '4':
								a4=4;
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <contr_password+0x79c>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	701a      	strb	r2, [r3, #0]
								cursor("4");
 80011aa:	4850      	ldr	r0, [pc, #320]	; (80012ec <contr_password+0x7a0>)
 80011ac:	f000 f8bc 	bl	8001328 <cursor>
								current_state = STATE3;
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <contr_password+0x788>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <contr_password+0x77c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <contr_password+0x77c>)
 80011be:	6013      	str	r3, [r2, #0]
								break;}
 80011c0:	bf00      	nop
							switch(input){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b35      	cmp	r3, #53	; 0x35
 80011c6:	d10e      	bne.n	80011e6 <contr_password+0x69a>
								case '5':
								a5=5;
 80011c8:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <contr_password+0x7a4>)
 80011ca:	2205      	movs	r2, #5
 80011cc:	701a      	strb	r2, [r3, #0]
								cursor("5");
 80011ce:	4849      	ldr	r0, [pc, #292]	; (80012f4 <contr_password+0x7a8>)
 80011d0:	f000 f8aa 	bl	8001328 <cursor>
								current_state = STATE3;
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <contr_password+0x788>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <contr_password+0x77c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a39      	ldr	r2, [pc, #228]	; (80012c8 <contr_password+0x77c>)
 80011e2:	6013      	str	r3, [r2, #0]
								break;}
 80011e4:	bf00      	nop
							switch(input){
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b36      	cmp	r3, #54	; 0x36
 80011ea:	d10e      	bne.n	800120a <contr_password+0x6be>
								case '6':
								a6=6;
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <contr_password+0x7ac>)
 80011ee:	2206      	movs	r2, #6
 80011f0:	701a      	strb	r2, [r3, #0]
								cursor("6");
 80011f2:	4842      	ldr	r0, [pc, #264]	; (80012fc <contr_password+0x7b0>)
 80011f4:	f000 f898 	bl	8001328 <cursor>
								current_state = STATE3;
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <contr_password+0x788>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
								i=i+1;
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <contr_password+0x77c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <contr_password+0x77c>)
 8001206:	6013      	str	r3, [r2, #0]
								break;}
 8001208:	bf00      	nop
							switch(input){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b37      	cmp	r3, #55	; 0x37
 800120e:	d10e      	bne.n	800122e <contr_password+0x6e2>
								case '7':
								a7=7;
 8001210:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <contr_password+0x7b4>)
 8001212:	2207      	movs	r2, #7
 8001214:	701a      	strb	r2, [r3, #0]
								cursor("7");
 8001216:	483b      	ldr	r0, [pc, #236]	; (8001304 <contr_password+0x7b8>)
 8001218:	f000 f886 	bl	8001328 <cursor>
								current_state = STATE4;
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <contr_password+0x788>)
 800121e:	2204      	movs	r2, #4
 8001220:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <contr_password+0x77c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <contr_password+0x77c>)
 800122a:	6013      	str	r3, [r2, #0]
								break;}
 800122c:	bf00      	nop
							switch(input){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b38      	cmp	r3, #56	; 0x38
 8001232:	d10e      	bne.n	8001252 <contr_password+0x706>
								case '8':
								a8=8;
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <contr_password+0x7bc>)
 8001236:	2208      	movs	r2, #8
 8001238:	701a      	strb	r2, [r3, #0]
								cursor("8");
 800123a:	4834      	ldr	r0, [pc, #208]	; (800130c <contr_password+0x7c0>)
 800123c:	f000 f874 	bl	8001328 <cursor>
								current_state = STATE3;
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <contr_password+0x788>)
 8001242:	2203      	movs	r2, #3
 8001244:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <contr_password+0x77c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <contr_password+0x77c>)
 800124e:	6013      	str	r3, [r2, #0]
								break;}
 8001250:	bf00      	nop
							switch(input){
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b39      	cmp	r3, #57	; 0x39
 8001256:	d10e      	bne.n	8001276 <contr_password+0x72a>
								case '9':
								a9=9;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <contr_password+0x7c4>)
 800125a:	2209      	movs	r2, #9
 800125c:	701a      	strb	r2, [r3, #0]
								cursor("9");
 800125e:	482d      	ldr	r0, [pc, #180]	; (8001314 <contr_password+0x7c8>)
 8001260:	f000 f862 	bl	8001328 <cursor>
								current_state = STATE3;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <contr_password+0x788>)
 8001266:	2203      	movs	r2, #3
 8001268:	701a      	strb	r2, [r3, #0]
								i=i+1;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <contr_password+0x77c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <contr_password+0x77c>)
 8001272:	6013      	str	r3, [r2, #0]
								break;}
 8001274:	bf00      	nop
							switch(input){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b30      	cmp	r3, #48	; 0x30
 800127a:	d000      	beq.n	800127e <contr_password+0x732>
							}// if
						else{
							current_state = STATE0;
							error("");
						}
					break;
 800127c:	e01f      	b.n	80012be <contr_password+0x772>
								a0=0;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <contr_password+0x7cc>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
								cursor("0");
 8001284:	4825      	ldr	r0, [pc, #148]	; (800131c <contr_password+0x7d0>)
 8001286:	f000 f84f 	bl	8001328 <cursor>
								current_state = STATE3;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <contr_password+0x788>)
 800128c:	2203      	movs	r2, #3
 800128e:	701a      	strb	r2, [r3, #0]
								i=i+1;
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <contr_password+0x77c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <contr_password+0x77c>)
 8001298:	6013      	str	r3, [r2, #0]
								break;}
 800129a:	bf00      	nop
					break;
 800129c:	e00f      	b.n	80012be <contr_password+0x772>
							current_state = STATE0;
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <contr_password+0x788>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
							error("");
 80012a4:	481e      	ldr	r0, [pc, #120]	; (8001320 <contr_password+0x7d4>)
 80012a6:	f000 f911 	bl	80014cc <error>
					break;
 80012aa:	e008      	b.n	80012be <contr_password+0x772>
	     			case STATE4:
						unlock_safe();
 80012ac:	f000 fb1e 	bl	80018ec <unlock_safe>
						cursor("*");
 80012b0:	481c      	ldr	r0, [pc, #112]	; (8001324 <contr_password+0x7d8>)
 80012b2:	f000 f839 	bl	8001328 <cursor>
						pulsa("");
 80012b6:	481a      	ldr	r0, [pc, #104]	; (8001320 <contr_password+0x7d4>)
 80012b8:	f000 f8b2 	bl	8001420 <pulsa>
					break;
 80012bc:	bf00      	nop

	     		  	  } // switch(current_state)
	           } //if(input !='F')
} //funcion
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000288 	.word	0x20000288
 80012cc:	20000f98 	.word	0x20000f98
 80012d0:	0800563c 	.word	0x0800563c
 80012d4:	20000f94 	.word	0x20000f94
 80012d8:	20000f9d 	.word	0x20000f9d
 80012dc:	08005640 	.word	0x08005640
 80012e0:	20000f99 	.word	0x20000f99
 80012e4:	08005644 	.word	0x08005644
 80012e8:	20001048 	.word	0x20001048
 80012ec:	08005648 	.word	0x08005648
 80012f0:	20000f9c 	.word	0x20000f9c
 80012f4:	0800564c 	.word	0x0800564c
 80012f8:	20001040 	.word	0x20001040
 80012fc:	08005650 	.word	0x08005650
 8001300:	20000f9b 	.word	0x20000f9b
 8001304:	08005654 	.word	0x08005654
 8001308:	20000f96 	.word	0x20000f96
 800130c:	08005658 	.word	0x08005658
 8001310:	20000f95 	.word	0x20000f95
 8001314:	0800565c 	.word	0x0800565c
 8001318:	2000103f 	.word	0x2000103f
 800131c:	08005660 	.word	0x08005660
 8001320:	08005664 	.word	0x08005664
 8001324:	08005668 	.word	0x08005668

08001328 <cursor>:

uint32_t pos=5;
uint32_t post=5;
char contra[11];

void cursor (char* val){
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b098      	sub	sp, #96	; 0x60
 800132c:	af04      	add	r7, sp, #16
 800132e:	61f8      	str	r0, [r7, #28]
if(pos==5){
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <cursor+0xe0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d104      	bne.n	8001342 <cursor+0x1a>
	strcpy(str, val);
 8001338:	69f9      	ldr	r1, [r7, #28]
 800133a:	4834      	ldr	r0, [pc, #208]	; (800140c <cursor+0xe4>)
 800133c:	f004 f913 	bl	8005566 <strcpy>
 8001340:	e003      	b.n	800134a <cursor+0x22>
}
else{
	strcat(str, val);
 8001342:	69f9      	ldr	r1, [r7, #28]
 8001344:	4831      	ldr	r0, [pc, #196]	; (800140c <cursor+0xe4>)
 8001346:	f004 f8ff 	bl	8005548 <strcat>
}
 Lcd_PortType ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <cursor+0xe8>)
 800134c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001356:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <cursor+0xec>)
 8001358:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800135c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001360:	e883 0003 	stmia.w	r3, {r0, r1}

		  Lcd_HandleTypeDef lcd;

		  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001364:	4638      	mov	r0, r7
 8001366:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800136a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800136e:	2300      	movs	r3, #0
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <cursor+0xf0>)
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001384:	f7ff f8c6 	bl	8000514 <Lcd_create>
 8001388:	f107 0420 	add.w	r4, r7, #32
 800138c:	463d      	mov	r5, r7
 800138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001392:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001396:	e884 0003 	stmia.w	r4, {r0, r1}

		  Lcd_cursor(&lcd, 1,0);
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2200      	movs	r2, #0
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f928 	bl	80005f8 <Lcd_cursor>
		  Lcd_string(&lcd, "pin:");
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	491b      	ldr	r1, [pc, #108]	; (800141c <cursor+0xf4>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f904 	bl	80005bc <Lcd_string>
		  Lcd_cursor(&lcd, 1,pos);
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <cursor+0xe0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2101      	movs	r1, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f919 	bl	80005f8 <Lcd_cursor>
		  Lcd_string(&lcd,val);
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	69f9      	ldr	r1, [r7, #28]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8f5 	bl	80005bc <Lcd_string>
		  pos=pos+1;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <cursor+0xe0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <cursor+0xe0>)
 80013da:	6013      	str	r3, [r2, #0]
		  if (pos==9){
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <cursor+0xe0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d10c      	bne.n	80013fe <cursor+0xd6>
			  Lcd_cursor(&lcd, 1,5);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2205      	movs	r2, #5
 80013ea:	2101      	movs	r1, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f903 	bl	80005f8 <Lcd_cursor>
			  Lcd_string(&lcd,str);
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4905      	ldr	r1, [pc, #20]	; (800140c <cursor+0xe4>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8df 	bl	80005bc <Lcd_string>
		  }

}
 80013fe:	bf00      	nop
 8001400:	3750      	adds	r7, #80	; 0x50
 8001402:	46bd      	mov	sp, r7
 8001404:	bdb0      	pop	{r4, r5, r7, pc}
 8001406:	bf00      	nop
 8001408:	20000000 	.word	0x20000000
 800140c:	20001034 	.word	0x20001034
 8001410:	080055b0 	.word	0x080055b0
 8001414:	080055c0 	.word	0x080055c0
 8001418:	48000800 	.word	0x48000800
 800141c:	0800566c 	.word	0x0800566c

08001420 <pulsa>:



void pulsa (char* posicion){
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b098      	sub	sp, #96	; 0x60
 8001424:	af04      	add	r7, sp, #16
 8001426:	61f8      	str	r0, [r7, #28]


 Lcd_PortType ports[] = {
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <pulsa+0x98>)
 800142a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800142e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
		  };

		  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <pulsa+0x9c>)
 8001436:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800143a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800143e:	e883 0003 	stmia.w	r3, {r0, r1}

		  Lcd_HandleTypeDef lcd;

		  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8001442:	4638      	mov	r0, r7
 8001444:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001448:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800144c:	2300      	movs	r3, #0
 800144e:	9303      	str	r3, [sp, #12]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <pulsa+0xa0>)
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001462:	f7ff f857 	bl	8000514 <Lcd_create>
 8001466:	f107 0420 	add.w	r4, r7, #32
 800146a:	463d      	mov	r5, r7
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001474:	e884 0003 	stmia.w	r4, {r0, r1}


	 Lcd_cursor(&lcd, 1,0);
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	2200      	movs	r2, #0
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f8b9 	bl	80005f8 <Lcd_cursor>
	 Lcd_string(&lcd, "Abierto");
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <pulsa+0xa4>)
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f895 	bl	80005bc <Lcd_string>
	 Lcd_cursor(&lcd, 1,post);
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <pulsa+0xa8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	2101      	movs	r1, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f8aa 	bl	80005f8 <Lcd_cursor>
     Lcd_string(&lcd,posicion);
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f886 	bl	80005bc <Lcd_string>


 }
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	; 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	080055b0 	.word	0x080055b0
 80014bc:	080055c0 	.word	0x080055c0
 80014c0:	48000800 	.word	0x48000800
 80014c4:	08005674 	.word	0x08005674
 80014c8:	20000004 	.word	0x20000004

080014cc <error>:


void error (char* posicion){
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b098      	sub	sp, #96	; 0x60
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	61f8      	str	r0, [r7, #28]


 Lcd_PortType ports[] = {
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <error+0x98>)
 80014d6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
		  };

		  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <error+0x9c>)
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ea:	e883 0003 	stmia.w	r3, {r0, r1}

		  Lcd_HandleTypeDef lcd;

		  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 80014ee:	4638      	mov	r0, r7
 80014f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80014f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014f8:	2300      	movs	r3, #0
 80014fa:	9303      	str	r3, [sp, #12]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <error+0xa0>)
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800150e:	f7ff f801 	bl	8000514 <Lcd_create>
 8001512:	f107 0420 	add.w	r4, r7, #32
 8001516:	463d      	mov	r5, r7
 8001518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001520:	e884 0003 	stmia.w	r4, {r0, r1}


	 Lcd_cursor(&lcd, 1,0);
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f863 	bl	80005f8 <Lcd_cursor>
	 Lcd_string(&lcd, "ERROR");
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	490e      	ldr	r1, [pc, #56]	; (8001570 <error+0xa4>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f83f 	bl	80005bc <Lcd_string>
	 Lcd_cursor(&lcd, 1,post);
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <error+0xa8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f854 	bl	80005f8 <Lcd_cursor>
     Lcd_string(&lcd,posicion);
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	69f9      	ldr	r1, [r7, #28]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f830 	bl	80005bc <Lcd_string>


 }
 800155c:	bf00      	nop
 800155e:	3750      	adds	r7, #80	; 0x50
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	080055b0 	.word	0x080055b0
 8001568:	080055c0 	.word	0x080055c0
 800156c:	48000800 	.word	0x48000800
 8001570:	0800567c 	.word	0x0800567c
 8001574:	20000004 	.word	0x20000004

08001578 <read_keypad>:

char read_keypad(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	/* tomar la fila 1 en bajo y hacer las demas en altos */
	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f000 fe25 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f000 fe1e 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159e:	48c9      	ldr	r0, [pc, #804]	; (80018c4 <read_keypad+0x34c>)
 80015a0:	f000 fe18 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015aa:	48c6      	ldr	r0, [pc, #792]	; (80018c4 <read_keypad+0x34c>)
 80015ac:	f000 fe12 	bl	80021d4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 80015b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f000 fdf4 	bl	80021a4 <HAL_GPIO_ReadPin>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <read_keypad+0x62>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80015c2:	bf00      	nop
 80015c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f000 fdea 	bl	80021a4 <HAL_GPIO_ReadPin>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f6      	beq.n	80015c4 <read_keypad+0x4c>
	    return '1';
 80015d6:	2331      	movs	r3, #49	; 0x31
 80015d8:	e171      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f000 fde0 	bl	80021a4 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10a      	bne.n	8001600 <read_keypad+0x88>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80015ea:	bf00      	nop
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f000 fdd7 	bl	80021a4 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f7      	beq.n	80015ec <read_keypad+0x74>
		return '2';
 80015fc:	2332      	movs	r3, #50	; 0x32
 80015fe:	e15e      	b.n	80018be <read_keypad+0x346>
    }

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 8001600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001604:	48af      	ldr	r0, [pc, #700]	; (80018c4 <read_keypad+0x34c>)
 8001606:	f000 fdcd 	bl	80021a4 <HAL_GPIO_ReadPin>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10a      	bne.n	8001626 <read_keypad+0xae>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001610:	bf00      	nop
 8001612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001616:	48ab      	ldr	r0, [pc, #684]	; (80018c4 <read_keypad+0x34c>)
 8001618:	f000 fdc4 	bl	80021a4 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f7      	beq.n	8001612 <read_keypad+0x9a>
		return '3';
 8001622:	2333      	movs	r3, #51	; 0x33
 8001624:	e14b      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	48a6      	ldr	r0, [pc, #664]	; (80018c4 <read_keypad+0x34c>)
 800162c:	f000 fdba 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10a      	bne.n	800164c <read_keypad+0xd4>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001636:	bf00      	nop
 8001638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163c:	48a1      	ldr	r0, [pc, #644]	; (80018c4 <read_keypad+0x34c>)
 800163e:	f000 fdb1 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f7      	beq.n	8001638 <read_keypad+0xc0>
		return 'A';
 8001648:	2341      	movs	r3, #65	; 0x41
 800164a:	e138      	b.n	80018be <read_keypad+0x346>
	}


	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 fdbd 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f000 fdb6 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166e:	4895      	ldr	r0, [pc, #596]	; (80018c4 <read_keypad+0x34c>)
 8001670:	f000 fdb0 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167a:	4892      	ldr	r0, [pc, #584]	; (80018c4 <read_keypad+0x34c>)
 800167c:	f000 fdaa 	bl	80021d4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 8001680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f000 fd8c 	bl	80021a4 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <read_keypad+0x132>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001692:	bf00      	nop
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fd82 	bl	80021a4 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f6      	beq.n	8001694 <read_keypad+0x11c>
		return '4';
 80016a6:	2334      	movs	r3, #52	; 0x34
 80016a8:	e109      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 80016aa:	2140      	movs	r1, #64	; 0x40
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f000 fd78 	bl	80021a4 <HAL_GPIO_ReadPin>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10a      	bne.n	80016d0 <read_keypad+0x158>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80016ba:	bf00      	nop
 80016bc:	2140      	movs	r1, #64	; 0x40
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f000 fd6f 	bl	80021a4 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f7      	beq.n	80016bc <read_keypad+0x144>
		return '5';
 80016cc:	2335      	movs	r3, #53	; 0x35
 80016ce:	e0f6      	b.n	80018be <read_keypad+0x346>
	 }

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 80016d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d4:	487b      	ldr	r0, [pc, #492]	; (80018c4 <read_keypad+0x34c>)
 80016d6:	f000 fd65 	bl	80021a4 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <read_keypad+0x17e>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80016e0:	bf00      	nop
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	4877      	ldr	r0, [pc, #476]	; (80018c4 <read_keypad+0x34c>)
 80016e8:	f000 fd5c 	bl	80021a4 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f7      	beq.n	80016e2 <read_keypad+0x16a>
		return '6';
 80016f2:	2336      	movs	r3, #54	; 0x36
 80016f4:	e0e3      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 80016f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fa:	4872      	ldr	r0, [pc, #456]	; (80018c4 <read_keypad+0x34c>)
 80016fc:	f000 fd52 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10a      	bne.n	800171c <read_keypad+0x1a4>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001706:	bf00      	nop
 8001708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800170c:	486d      	ldr	r0, [pc, #436]	; (80018c4 <read_keypad+0x34c>)
 800170e:	f000 fd49 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f7      	beq.n	8001708 <read_keypad+0x190>
		return 'B';
 8001718:	2342      	movs	r3, #66	; 0x42
 800171a:	e0d0      	b.n	80018be <read_keypad+0x346>
	}


	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001726:	f000 fd55 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f000 fd4e 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173e:	4861      	ldr	r0, [pc, #388]	; (80018c4 <read_keypad+0x34c>)
 8001740:	f000 fd48 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174a:	485e      	ldr	r0, [pc, #376]	; (80018c4 <read_keypad+0x34c>)
 800174c:	f000 fd42 	bl	80021d4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 8001750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f000 fd24 	bl	80021a4 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10b      	bne.n	800177a <read_keypad+0x202>
	{
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001762:	bf00      	nop
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f000 fd1a 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f6      	beq.n	8001764 <read_keypad+0x1ec>
		return '7';
 8001776:	2337      	movs	r3, #55	; 0x37
 8001778:	e0a1      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fd10 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10a      	bne.n	80017a0 <read_keypad+0x228>
	{
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800178a:	bf00      	nop
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 fd07 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f7      	beq.n	800178c <read_keypad+0x214>
		return '8';
 800179c:	2338      	movs	r3, #56	; 0x38
 800179e:	e08e      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 80017a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a4:	4847      	ldr	r0, [pc, #284]	; (80018c4 <read_keypad+0x34c>)
 80017a6:	f000 fcfd 	bl	80021a4 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <read_keypad+0x24e>
	{
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80017b0:	bf00      	nop
 80017b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b6:	4843      	ldr	r0, [pc, #268]	; (80018c4 <read_keypad+0x34c>)
 80017b8:	f000 fcf4 	bl	80021a4 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f7      	beq.n	80017b2 <read_keypad+0x23a>
		return '9';
 80017c2:	2339      	movs	r3, #57	; 0x39
 80017c4:	e07b      	b.n	80018be <read_keypad+0x346>
	}

	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 80017c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ca:	483e      	ldr	r0, [pc, #248]	; (80018c4 <read_keypad+0x34c>)
 80017cc:	f000 fcea 	bl	80021a4 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10a      	bne.n	80017ec <read_keypad+0x274>
	{
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80017d6:	bf00      	nop
 80017d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017dc:	4839      	ldr	r0, [pc, #228]	; (80018c4 <read_keypad+0x34c>)
 80017de:	f000 fce1 	bl	80021a4 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f7      	beq.n	80017d8 <read_keypad+0x260>
		return 'C';
 80017e8:	2343      	movs	r3, #67	; 0x43
 80017ea:	e068      	b.n	80018be <read_keypad+0x346>
	}


	HAL_GPIO_WritePin(F1_GPIO_Port, F1_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f000 fced 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2_GPIO_Port, F2_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f000 fce6 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F3_GPIO_Port, F3_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180e:	482d      	ldr	r0, [pc, #180]	; (80018c4 <read_keypad+0x34c>)
 8001810:	f000 fce0 	bl	80021d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F4_GPIO_Port, F4_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181a:	482a      	ldr	r0, [pc, #168]	; (80018c4 <read_keypad+0x34c>)
 800181c:	f000 fcda 	bl	80021d4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))) // si la columna 1 esta en bajo
 8001820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f000 fcbc 	bl	80021a4 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10b      	bne.n	800184a <read_keypad+0x2d2>
		{
		  while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001832:	bf00      	nop
 8001834:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f000 fcb2 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f6      	beq.n	8001834 <read_keypad+0x2bc>
		  return '*';
 8001846:	232a      	movs	r3, #42	; 0x2a
 8001848:	e039      	b.n	80018be <read_keypad+0x346>
		}

		if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))) // si la columna 2 esta en bajo
 800184a:	2140      	movs	r1, #64	; 0x40
 800184c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001850:	f000 fca8 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10a      	bne.n	8001870 <read_keypad+0x2f8>
		{
		  while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 800185a:	bf00      	nop
 800185c:	2140      	movs	r1, #64	; 0x40
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f000 fc9f 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f7      	beq.n	800185c <read_keypad+0x2e4>
		  return '0';
 800186c:	2330      	movs	r3, #48	; 0x30
 800186e:	e026      	b.n	80018be <read_keypad+0x346>
		 }

		if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))) // si la columna 3 esta en bajo
 8001870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <read_keypad+0x34c>)
 8001876:	f000 fc95 	bl	80021a4 <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <read_keypad+0x31e>
		{
			while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 8001880:	bf00      	nop
 8001882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001886:	480f      	ldr	r0, [pc, #60]	; (80018c4 <read_keypad+0x34c>)
 8001888:	f000 fc8c 	bl	80021a4 <HAL_GPIO_ReadPin>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f7      	beq.n	8001882 <read_keypad+0x30a>
			return '#';
 8001892:	2323      	movs	r3, #35	; 0x23
 8001894:	e013      	b.n	80018be <read_keypad+0x346>
		}

		if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))) // si la columna 4 esta en bajo
 8001896:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <read_keypad+0x34c>)
 800189c:	f000 fc82 	bl	80021a4 <HAL_GPIO_ReadPin>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <read_keypad+0x344>
		{
			while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))); // espere hasta que este presionado el boton(metodo de antirrebote)
 80018a6:	bf00      	nop
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <read_keypad+0x34c>)
 80018ae:	f000 fc79 	bl	80021a4 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f7      	beq.n	80018a8 <read_keypad+0x330>
			return 'D';
 80018b8:	2344      	movs	r3, #68	; 0x44
 80018ba:	e000      	b.n	80018be <read_keypad+0x346>
		}
		return 'F';
 80018bc:	2346      	movs	r3, #70	; 0x46
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	48000400 	.word	0x48000400

080018c8 <lock_safe>:

    void lock_safe(void)
    {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(VE_GPIO_Port, VE_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f000 fc7d 	bl	80021d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RO_GPIO_Port, RO_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	2102      	movs	r1, #2
 80018de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e2:	f000 fc77 	bl	80021d4 <HAL_GPIO_WritePin>
    }
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <unlock_safe>:


    void unlock_safe(void)
    {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
     cursor("0");
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <unlock_safe+0x28>)
 80018f2:	f7ff fd19 	bl	8001328 <cursor>
	 HAL_GPIO_WritePin(VE_GPIO_Port, VE_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f000 fc68 	bl	80021d4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(RO_GPIO_Port, RO_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2102      	movs	r1, #2
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f000 fc62 	bl	80021d4 <HAL_GPIO_WritePin>
     }
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08005660 	.word	0x08005660

08001918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(input != 'F')
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <StartDefaultTask+0x24>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b46      	cmp	r3, #70	; 0x46
 8001926:	d004      	beq.n	8001932 <StartDefaultTask+0x1a>
	  {
			contr_password(input);
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <StartDefaultTask+0x24>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f90d 	bl	8000b4c <contr_password>
	  }

    osDelay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f002 fc09 	bl	800414a <osDelay>
	  if(input != 'F')
 8001938:	e7f2      	b.n	8001920 <StartDefaultTask+0x8>
 800193a:	bf00      	nop
 800193c:	20000f97 	.word	0x20000f97

08001940 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
  {
    osDelay(1);
 8001948:	2001      	movs	r0, #1
 800194a:	f002 fbfe 	bl	800414a <osDelay>
 800194e:	e7fb      	b.n	8001948 <StartTask02+0x8>

08001950 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f002 fbf6 	bl	800414a <osDelay>
 800195e:	e7fb      	b.n	8001958 <StartTask03+0x8>

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6613      	str	r3, [r2, #96]	; 0x60
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x44>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6593      	str	r3, [r2, #88]	; 0x58
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x7c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d128      	bne.n	8001a2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_UART_MspInit+0x80>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_UART_MspInit+0x80>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f000 fa14 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40004400 	.word	0x40004400
 8001a38:	40021000 	.word	0x40021000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a74:	f000 f8c6 	bl	8001c04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a78:	f003 f8de 	bl	8004c38 <xTaskGetSchedulerState>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a82:	f003 fb11 	bl	80050a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <SystemInit+0x64>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <SystemInit+0x64>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <SystemInit+0x68>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <SystemInit+0x68>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <SystemInit+0x68>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <SystemInit+0x68>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <SystemInit+0x68>)
 8001ab8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001abc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <SystemInit+0x68>)
 8001ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <SystemInit+0x68>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <SystemInit+0x68>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <SystemInit+0x68>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SystemInit+0x64>)
 8001ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00
 8001af4:	40021000 	.word	0x40021000

08001af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001afc:	f7ff ffc6 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b02:	e003      	b.n	8001b0c <LoopCopyDataInit>

08001b04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b0a:	3104      	adds	r1, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b0c:	480a      	ldr	r0, [pc, #40]	; (8001b38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b14:	d3f6      	bcc.n	8001b04 <CopyDataInit>
	ldr	r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b18:	e002      	b.n	8001b20 <LoopFillZerobss>

08001b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b1c:	f842 3b04 	str.w	r3, [r2], #4

08001b20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LoopForever+0x16>)
	cmp	r2, r3
 8001b22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b24:	d3f9      	bcc.n	8001b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f003 fce3 	bl	80054f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2a:	f7fe fe1b 	bl	8000764 <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b30:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b34:	080056e8 	.word	0x080056e8
	ldr	r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b3c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001b40:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001b44:	20001050 	.word	0x20001050

08001b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_2_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_Init+0x3c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_Init+0x3c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f000 f942 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 f80f 	bl	8001b8c <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	e001      	b.n	8001b7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7a:	f7ff fef9 	bl	8001970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_InitTick+0x70>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f93f 	bl	8001e3a <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d809      	bhi.n	8001bdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f917 	bl	8001e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_InitTick+0x74>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e007      	b.n	8001bec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e004      	b.n	8001bec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e001      	b.n	8001bec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2000000c 	.word	0x2000000c

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010
 8001c28:	2000104c 	.word	0x2000104c

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000104c 	.word	0x2000104c

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_Delay+0x40>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000010 	.word	0x20000010

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f7ff ff8e 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff47 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff5c 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff8e 	bl	8001d40 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5d 	bl	8001cec <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb0 	bl	8001da8 <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	e17f      	b.n	8002164 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8171 	beq.w	800215e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d00b      	beq.n	8001e9c <HAL_GPIO_Init+0x48>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b12      	cmp	r3, #18
 8001e9a:	d130      	bne.n	8001efe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0201 	and.w	r2, r3, #1
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d118      	bne.n	8001f3c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f10:	2201      	movs	r2, #1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f003 0201 	and.w	r2, r3, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x128>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	6939      	ldr	r1, [r7, #16]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80ac 	beq.w	800215e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <HAL_GPIO_Init+0x32c>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <HAL_GPIO_Init+0x32c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6613      	str	r3, [r2, #96]	; 0x60
 8002012:	4b5b      	ldr	r3, [pc, #364]	; (8002180 <HAL_GPIO_Init+0x32c>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800201e:	4a59      	ldr	r2, [pc, #356]	; (8002184 <HAL_GPIO_Init+0x330>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x242>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_GPIO_Init+0x334>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x23e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	; (800218c <HAL_GPIO_Init+0x338>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x23a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <HAL_GPIO_Init+0x33c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x236>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <HAL_GPIO_Init+0x340>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x232>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4a      	ldr	r2, [pc, #296]	; (8002198 <HAL_GPIO_Init+0x344>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x22e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a49      	ldr	r2, [pc, #292]	; (800219c <HAL_GPIO_Init+0x348>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x22a>
 800207a:	2306      	movs	r3, #6
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x244>
 800207e:	2307      	movs	r3, #7
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x244>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x244>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x244>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x244>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x244>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x244>
 8002096:	2300      	movs	r3, #0
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a8:	4936      	ldr	r1, [pc, #216]	; (8002184 <HAL_GPIO_Init+0x330>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020da:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002104:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002158:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f47f ae78 	bne.w	8001e64 <HAL_GPIO_Init+0x10>
  }
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000
 8002184:	40010000 	.word	0x40010000
 8002188:	48000400 	.word	0x48000400
 800218c:	48000800 	.word	0x48000800
 8002190:	48000c00 	.word	0x48000c00
 8002194:	48001000 	.word	0x48001000
 8002198:	48001400 	.word	0x48001400
 800219c:	48001800 	.word	0x48001800
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_PWREx_GetVoltageRange+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000

08002220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222e:	d130      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800223c:	d038      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2232      	movs	r2, #50	; 0x32
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	e002      	b.n	800226c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b01      	subs	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002278:	d102      	bne.n	8002280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f2      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d110      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e00f      	b.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d007      	beq.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40007000 	.word	0x40007000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e3d4      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e8:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80e4 	beq.w	80024c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_RCC_OscConfig+0x4a>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	f040 808b 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 8087 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002316:	4b93      	ldr	r3, [pc, #588]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3ac      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_RCC_OscConfig+0x7c>
 800233e:	4b89      	ldr	r3, [pc, #548]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002346:	e005      	b.n	8002354 <HAL_RCC_OscConfig+0x88>
 8002348:	4b86      	ldr	r3, [pc, #536]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002354:	4293      	cmp	r3, r2
 8002356:	d223      	bcs.n	80023a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd3f 	bl	8002de0 <RCC_SetFlashLatencyFromMSIRange>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e38d      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236c:	4b7d      	ldr	r3, [pc, #500]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7c      	ldr	r2, [pc, #496]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4977      	ldr	r1, [pc, #476]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4972      	ldr	r1, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
 800239e:	e025      	b.n	80023ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b70      	ldr	r3, [pc, #448]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6f      	ldr	r2, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	496a      	ldr	r1, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b69      	ldr	r3, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4965      	ldr	r1, [pc, #404]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fcff 	bl	8002de0 <RCC_SetFlashLatencyFromMSIRange>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e34d      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ec:	f000 fc36 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_RCC_OscConfig+0x29c>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa21 f303 	lsr.w	r3, r1, r3
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x2a0>)
 800240a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x2a4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fbbb 	bl	8001b8c <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d052      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	e331      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d032      	beq.n	8002492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002438:	f7ff fbf8 	bl	8001c2c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002440:	f7ff fbf4 	bl	8001c2c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e31a      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a40      	ldr	r2, [pc, #256]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	493b      	ldr	r1, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247c:	4b39      	ldr	r3, [pc, #228]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4936      	ldr	r1, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	e01a      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002492:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249e:	f7ff fbc5 	bl	8001c2c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a6:	f7ff fbc1 	bl	8001c2c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e2e7      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1da>
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d074      	beq.n	80025be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x21a>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d10e      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d064      	beq.n	80025bc <HAL_RCC_OscConfig+0x2f0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d160      	bne.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e2c4      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x24a>
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e01d      	b.n	8002552 <HAL_RCC_OscConfig+0x286>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x26e>
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x286>
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a06      	ldr	r2, [pc, #24]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01c      	beq.n	8002594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7ff fb67 	bl	8001c2c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002560:	e011      	b.n	8002586 <HAL_RCC_OscConfig+0x2ba>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08005690 	.word	0x08005690
 800256c:	20000008 	.word	0x20000008
 8002570:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff fb5a 	bl	8001c2c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e280      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	4baf      	ldr	r3, [pc, #700]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7ff fb4a 	bl	8001c2c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fb46 	bl	8001c2c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e26c      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	4ba5      	ldr	r3, [pc, #660]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x2d0>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d060      	beq.n	800268c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x310>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d119      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d116      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	4b99      	ldr	r3, [pc, #612]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_OscConfig+0x328>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e249      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b93      	ldr	r3, [pc, #588]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4990      	ldr	r1, [pc, #576]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	e040      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002612:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a8b      	ldr	r2, [pc, #556]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff fb05 	bl	8001c2c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fb01 	bl	8001c2c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e227      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	497c      	ldr	r1, [pc, #496]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
 8002658:	e018      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a79      	ldr	r2, [pc, #484]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7ff fae1 	bl	8001c2c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7ff fadd 	bl	8001c2c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e203      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	4b70      	ldr	r3, [pc, #448]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a0:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	4a67      	ldr	r2, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7ff fabc 	bl	8001c2c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7ff fab8 	bl	8001c2c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1de      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3ec>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff fa9f 	bl	8001c2c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7ff fa9b 	bl	8001c2c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1c1      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002724:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3a      	ldr	r2, [pc, #232]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002764:	f7ff fa62 	bl	8001c2c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7ff fa5e 	bl	8001c2c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e184      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b32      	ldr	r3, [pc, #200]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d8>
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a2:	e024      	b.n	80027ee <HAL_RCC_OscConfig+0x522>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d110      	bne.n	80027ce <HAL_RCC_OscConfig+0x502>
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027cc:	e00f      	b.n	80027ee <HAL_RCC_OscConfig+0x522>
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff fa19 	bl	8001c2c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff fa15 	bl	8001c2c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e139      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ed      	beq.n	80027fe <HAL_RCC_OscConfig+0x532>
 8002822:	e01a      	b.n	800285a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7ff fa02 	bl	8001c2c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7ff f9fe 	bl	8001c2c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d906      	bls.n	800284c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e122      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b90      	ldr	r3, [pc, #576]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e8      	bne.n	800282c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	4a8a      	ldr	r2, [pc, #552]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8108 	beq.w	8002a86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	2b02      	cmp	r3, #2
 800287c:	f040 80d0 	bne.w	8002a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d130      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	3b01      	subs	r3, #1
 80028a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d127      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c0:	2a07      	cmp	r2, #7
 80028c2:	bf14      	ite	ne
 80028c4:	2201      	movne	r2, #1
 80028c6:	2200      	moveq	r2, #0
 80028c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d06e      	beq.n	80029d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d069      	beq.n	80029d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028fc:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b7      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7ff f982 	bl	8001c2c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f97e 	bl	8001c2c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0a4      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293e:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCC_OscConfig+0x7c8>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800295a:	3a01      	subs	r2, #1
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002964:	0212      	lsls	r2, r2, #8
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800296c:	0852      	lsrs	r2, r2, #1
 800296e:	3a01      	subs	r2, #1
 8002970:	0552      	lsls	r2, r2, #21
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002978:	0852      	lsrs	r2, r2, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	0652      	lsls	r2, r2, #25
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002984:	0912      	lsrs	r2, r2, #4
 8002986:	0452      	lsls	r2, r2, #17
 8002988:	430a      	orrs	r2, r1
 800298a:	4941      	ldr	r1, [pc, #260]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3e      	ldr	r2, [pc, #248]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a8:	f7ff f940 	bl	8001c2c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff f93c 	bl	8001c2c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e062      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ce:	e05a      	b.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e059      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d152      	bne.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f8:	f7ff f918 	bl	8001c2c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7ff f914 	bl	8001c2c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e03a      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x734>
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d02d      	beq.n	8002a82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a44:	f023 0303 	bic.w	r3, r3, #3
 8002a48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff f8e7 	bl	8001c2c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7ff f8e3 	bl	8001c2c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x796>
 8002a80:	e001      	b.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	f99d808c 	.word	0xf99d808c

08002a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0c8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4961      	ldr	r1, [pc, #388]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b0      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d04c      	beq.n	8002b82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d121      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e09e      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b08:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d115      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e092      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e086      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e07e      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 0203 	bic.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	493f      	ldr	r1, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b52:	f7ff f86b 	bl	8001c2c <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5a:	f7ff f867 	bl	8001c2c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e066      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 020c 	and.w	r2, r3, #12
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d1eb      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	492c      	ldr	r1, [pc, #176]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d210      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	4924      	ldr	r1, [pc, #144]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e036      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4918      	ldr	r1, [pc, #96]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4910      	ldr	r1, [pc, #64]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0e:	f000 f825 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe ffaa 	bl	8001b8c <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08005690 	.word	0x08005690
 8002c54:	20000008 	.word	0x20000008
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x34>
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d121      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d11e      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e004      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d133      	bne.n	8002d52 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0xaa>
 8002cfe:	e005      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d02:	617b      	str	r3, [r7, #20]
      break;
 8002d04:	e005      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d08:	617b      	str	r3, [r7, #20]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	617b      	str	r3, [r7, #20]
      break;
 8002d10:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	fb02 f203 	mul.w	r2, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0e5b      	lsrs	r3, r3, #25
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d52:	69bb      	ldr	r3, [r7, #24]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000
 8002d64:	080056a8 	.word	0x080056a8
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000008 	.word	0x20000008

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4601      	mov	r1, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	080056a0 	.word	0x080056a0

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db8:	f7ff ffda 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0adb      	lsrs	r3, r3, #11
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	080056a0 	.word	0x080056a0

08002de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df8:	f7ff fa04 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002dfc:	6178      	str	r0, [r7, #20]
 8002dfe:	e014      	b.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e18:	f7ff f9f4 	bl	8002204 <HAL_PWREx_GetVoltageRange>
 8002e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d10b      	bne.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d919      	bls.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e3c:	d902      	bls.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e3e:	2302      	movs	r3, #2
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e013      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e010      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d902      	bls.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e50:	2303      	movs	r3, #3
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e00a      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d102      	bne.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	e004      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d101      	bne.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e68:	2301      	movs	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 0207 	bic.w	r2, r3, #7
 8002e74:	4909      	ldr	r1, [pc, #36]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40022000 	.word	0x40022000

08002ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eac:	2300      	movs	r3, #0
 8002eae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d03f      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d01c      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eca:	d802      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00e      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ed0:	e01f      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002edc:	d01c      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ede:	e018      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee0:	4b85      	ldr	r3, [pc, #532]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a84      	ldr	r2, [pc, #528]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e015      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fab9 	bl	800346c <RCCEx_PLLSAI1_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002efe:	e00c      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3320      	adds	r3, #32
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fba0 	bl	800364c <RCCEx_PLLSAI2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	74fb      	strb	r3, [r7, #19]
      break;
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f20:	4b75      	ldr	r3, [pc, #468]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2e:	4972      	ldr	r1, [pc, #456]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f36:	e001      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03f      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f56:	d802      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f5c:	e01f      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f62:	d003      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f68:	d01c      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f6a:	e018      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f78:	e015      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa73 	bl	800346c <RCCEx_PLLSAI1_Config>
 8002f86:	4603      	mov	r3, r0
 8002f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8a:	e00c      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3320      	adds	r3, #32
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fb5a 	bl	800364c <RCCEx_PLLSAI2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	494f      	ldr	r1, [pc, #316]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a0 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003018:	f7fe fe08 	bl	8001c2c <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301e:	e009      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe fe04 	bl	8001c2c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	74fb      	strb	r3, [r7, #19]
        break;
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003034:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d15c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	d019      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003070:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe fdc3 	bl	8001c2c <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	e00b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe fdbf 	bl	8001c2c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	74fb      	strb	r3, [r7, #19]
            break;
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ec      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003104:	7c7b      	ldrb	r3, [r7, #17]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b9e      	ldr	r3, [pc, #632]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4b98      	ldr	r3, [pc, #608]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 0203 	bic.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	4994      	ldr	r1, [pc, #592]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003144:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 020c 	bic.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	498c      	ldr	r1, [pc, #560]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003166:	4b87      	ldr	r3, [pc, #540]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	4983      	ldr	r1, [pc, #524]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003188:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	497b      	ldr	r1, [pc, #492]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	4972      	ldr	r1, [pc, #456]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031cc:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	496a      	ldr	r1, [pc, #424]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	4961      	ldr	r1, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003210:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	4959      	ldr	r1, [pc, #356]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003232:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	4948      	ldr	r1, [pc, #288]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	493f      	ldr	r1, [pc, #252]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d028      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a6:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a31      	ldr	r2, [pc, #196]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c2:	60d3      	str	r3, [r2, #12]
 80032c4:	e011      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f8c8 	bl	800346c <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	491f      	ldr	r1, [pc, #124]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003314:	d106      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003320:	60d3      	str	r3, [r2, #12]
 8003322:	e011      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332c:	d10c      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f899 	bl	800346c <RCCEx_PLLSAI1_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003372:	d109      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337e:	60d3      	str	r3, [r2, #12]
 8003380:	e014      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f867 	bl	800346c <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	4928      	ldr	r1, [pc, #160]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f844 	bl	800346c <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d014      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f921 	bl	800364c <RCCEx_PLLSAI2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003432:	490d      	ldr	r1, [pc, #52]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003456:	4904      	ldr	r1, [pc, #16]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800345e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347a:	4b73      	ldr	r3, [pc, #460]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003486:	4b70      	ldr	r3, [pc, #448]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d10d      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
       ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800349e:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
       ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d044      	beq.n	800353c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	e041      	b.n	800353c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d00c      	beq.n	80034da <RCCEx_PLLSAI1_Config+0x6e>
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d013      	beq.n	80034ec <RCCEx_PLLSAI1_Config+0x80>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d120      	bne.n	800350a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c8:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11d      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e01a      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034da:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ea:	e013      	b.n	8003514 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ec:	4b56      	ldr	r3, [pc, #344]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003508:	e006      	b.n	8003518 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      break;
 800350e:	e004      	b.n	800351a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003510:	bf00      	nop
 8003512:	e002      	b.n	800351a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003518:	bf00      	nop
    }

    if(status == HAL_OK)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003520:	4b49      	ldr	r3, [pc, #292]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6819      	ldr	r1, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	3b01      	subs	r3, #1
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	430b      	orrs	r3, r1
 8003536:	4944      	ldr	r1, [pc, #272]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d17d      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800354c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354e:	f7fe fb6d 	bl	8001c2c <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003554:	e009      	b.n	800356a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003556:	f7fe fb69 	bl	8001c2c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	73fb      	strb	r3, [r7, #15]
        break;
 8003568:	e005      	b.n	8003576 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d160      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d111      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	0211      	lsls	r1, r2, #8
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68d2      	ldr	r2, [r2, #12]
 8003598:	0912      	lsrs	r2, r2, #4
 800359a:	0452      	lsls	r2, r2, #17
 800359c:	430a      	orrs	r2, r1
 800359e:	492a      	ldr	r1, [pc, #168]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
 80035a4:	e027      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d112      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	0211      	lsls	r1, r2, #8
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6912      	ldr	r2, [r2, #16]
 80035c2:	0852      	lsrs	r2, r2, #1
 80035c4:	3a01      	subs	r2, #1
 80035c6:	0552      	lsls	r2, r2, #21
 80035c8:	430a      	orrs	r2, r1
 80035ca:	491f      	ldr	r1, [pc, #124]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	610b      	str	r3, [r1, #16]
 80035d0:	e011      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6892      	ldr	r2, [r2, #8]
 80035e2:	0211      	lsls	r1, r2, #8
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6952      	ldr	r2, [r2, #20]
 80035e8:	0852      	lsrs	r2, r2, #1
 80035ea:	3a01      	subs	r2, #1
 80035ec:	0652      	lsls	r2, r2, #25
 80035ee:	430a      	orrs	r2, r1
 80035f0:	4915      	ldr	r1, [pc, #84]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003600:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fe fb13 	bl	8001c2c <HAL_GetTick>
 8003606:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003608:	e009      	b.n	800361e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360a:	f7fe fb0f 	bl	8001c2c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d902      	bls.n	800361e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	73fb      	strb	r3, [r7, #15]
          break;
 800361c:	e005      	b.n	800362a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ef      	beq.n	800360a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000

0800364c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365a:	4b68      	ldr	r3, [pc, #416]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d018      	beq.n	8003698 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003666:	4b65      	ldr	r3, [pc, #404]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0203 	and.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d10d      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
       ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
       ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d044      	beq.n	800371c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e041      	b.n	800371c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d00c      	beq.n	80036ba <RCCEx_PLLSAI2_Config+0x6e>
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d013      	beq.n	80036cc <RCCEx_PLLSAI2_Config+0x80>
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d120      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a8:	4b54      	ldr	r3, [pc, #336]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11d      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b8:	e01a      	b.n	80036f0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ba:	4b50      	ldr	r3, [pc, #320]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ca:	e013      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036cc:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d8:	4b48      	ldr	r3, [pc, #288]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e8:	e006      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      break;
 80036ee:	e004      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80036f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10d      	bne.n	800371c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003700:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	3b01      	subs	r3, #1
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	430b      	orrs	r3, r1
 8003716:	4939      	ldr	r1, [pc, #228]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d167      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a35      	ldr	r2, [pc, #212]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800372e:	f7fe fa7d 	bl	8001c2c <HAL_GetTick>
 8003732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003734:	e009      	b.n	800374a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003736:	f7fe fa79 	bl	8001c2c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d902      	bls.n	800374a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	73fb      	strb	r3, [r7, #15]
        break;
 8003748:	e005      	b.n	8003756 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ef      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d14a      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d111      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6892      	ldr	r2, [r2, #8]
 8003772:	0211      	lsls	r1, r2, #8
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68d2      	ldr	r2, [r2, #12]
 8003778:	0912      	lsrs	r2, r2, #4
 800377a:	0452      	lsls	r2, r2, #17
 800377c:	430a      	orrs	r2, r1
 800377e:	491f      	ldr	r1, [pc, #124]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	614b      	str	r3, [r1, #20]
 8003784:	e011      	b.n	80037aa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800378e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6892      	ldr	r2, [r2, #8]
 8003796:	0211      	lsls	r1, r2, #8
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6912      	ldr	r2, [r2, #16]
 800379c:	0852      	lsrs	r2, r2, #1
 800379e:	3a01      	subs	r2, #1
 80037a0:	0652      	lsls	r2, r2, #25
 80037a2:	430a      	orrs	r2, r1
 80037a4:	4915      	ldr	r1, [pc, #84]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a13      	ldr	r2, [pc, #76]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fe fa39 	bl	8001c2c <HAL_GetTick>
 80037ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037bc:	e009      	b.n	80037d2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037be:	f7fe fa35 	bl	8001c2c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d902      	bls.n	80037d2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	73fb      	strb	r3, [r7, #15]
          break;
 80037d0:	e005      	b.n	80037de <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ef      	beq.n	80037be <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4903      	ldr	r1, [pc, #12]	; (80037fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e040      	b.n	8003894 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe f8c8 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f82c 	bl	800389c <UART_SetConfig>
 8003844:	4603      	mov	r3, r0
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e022      	b.n	8003894 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 faaa 	bl	8003db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800386a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800387a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb31 	bl	8003ef4 <UART_CheckIdleState>
 8003892:	4603      	mov	r3, r0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800389c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4bac      	ldr	r3, [pc, #688]	; (8003b7c <UART_SetConfig+0x2e0>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	69f9      	ldr	r1, [r7, #28]
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4aa2      	ldr	r2, [pc, #648]	; (8003b80 <UART_SetConfig+0x2e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	4313      	orrs	r3, r2
 8003904:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a99      	ldr	r2, [pc, #612]	; (8003b84 <UART_SetConfig+0x2e8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d121      	bne.n	8003968 <UART_SetConfig+0xcc>
 8003924:	4b98      	ldr	r3, [pc, #608]	; (8003b88 <UART_SetConfig+0x2ec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b03      	cmp	r3, #3
 8003930:	d816      	bhi.n	8003960 <UART_SetConfig+0xc4>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0x9c>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003949 	.word	0x08003949
 800393c:	08003955 	.word	0x08003955
 8003940:	0800394f 	.word	0x0800394f
 8003944:	0800395b 	.word	0x0800395b
 8003948:	2301      	movs	r3, #1
 800394a:	76fb      	strb	r3, [r7, #27]
 800394c:	e0e8      	b.n	8003b20 <UART_SetConfig+0x284>
 800394e:	2302      	movs	r3, #2
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e0e5      	b.n	8003b20 <UART_SetConfig+0x284>
 8003954:	2304      	movs	r3, #4
 8003956:	76fb      	strb	r3, [r7, #27]
 8003958:	e0e2      	b.n	8003b20 <UART_SetConfig+0x284>
 800395a:	2308      	movs	r3, #8
 800395c:	76fb      	strb	r3, [r7, #27]
 800395e:	e0df      	b.n	8003b20 <UART_SetConfig+0x284>
 8003960:	2310      	movs	r3, #16
 8003962:	76fb      	strb	r3, [r7, #27]
 8003964:	bf00      	nop
 8003966:	e0db      	b.n	8003b20 <UART_SetConfig+0x284>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a87      	ldr	r2, [pc, #540]	; (8003b8c <UART_SetConfig+0x2f0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d134      	bne.n	80039dc <UART_SetConfig+0x140>
 8003972:	4b85      	ldr	r3, [pc, #532]	; (8003b88 <UART_SetConfig+0x2ec>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b0c      	cmp	r3, #12
 800397e:	d829      	bhi.n	80039d4 <UART_SetConfig+0x138>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <UART_SetConfig+0xec>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039d5 	.word	0x080039d5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039c9 	.word	0x080039c9
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039c3 	.word	0x080039c3
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039d5 	.word	0x080039d5
 80039b8:	080039cf 	.word	0x080039cf
 80039bc:	2300      	movs	r3, #0
 80039be:	76fb      	strb	r3, [r7, #27]
 80039c0:	e0ae      	b.n	8003b20 <UART_SetConfig+0x284>
 80039c2:	2302      	movs	r3, #2
 80039c4:	76fb      	strb	r3, [r7, #27]
 80039c6:	e0ab      	b.n	8003b20 <UART_SetConfig+0x284>
 80039c8:	2304      	movs	r3, #4
 80039ca:	76fb      	strb	r3, [r7, #27]
 80039cc:	e0a8      	b.n	8003b20 <UART_SetConfig+0x284>
 80039ce:	2308      	movs	r3, #8
 80039d0:	76fb      	strb	r3, [r7, #27]
 80039d2:	e0a5      	b.n	8003b20 <UART_SetConfig+0x284>
 80039d4:	2310      	movs	r3, #16
 80039d6:	76fb      	strb	r3, [r7, #27]
 80039d8:	bf00      	nop
 80039da:	e0a1      	b.n	8003b20 <UART_SetConfig+0x284>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6b      	ldr	r2, [pc, #428]	; (8003b90 <UART_SetConfig+0x2f4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d120      	bne.n	8003a28 <UART_SetConfig+0x18c>
 80039e6:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <UART_SetConfig+0x2ec>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d00f      	beq.n	8003a14 <UART_SetConfig+0x178>
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d802      	bhi.n	80039fe <UART_SetConfig+0x162>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <UART_SetConfig+0x16c>
 80039fc:	e010      	b.n	8003a20 <UART_SetConfig+0x184>
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d005      	beq.n	8003a0e <UART_SetConfig+0x172>
 8003a02:	2b30      	cmp	r3, #48	; 0x30
 8003a04:	d009      	beq.n	8003a1a <UART_SetConfig+0x17e>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x184>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	76fb      	strb	r3, [r7, #27]
 8003a0c:	e088      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	76fb      	strb	r3, [r7, #27]
 8003a12:	e085      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a14:	2304      	movs	r3, #4
 8003a16:	76fb      	strb	r3, [r7, #27]
 8003a18:	e082      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	76fb      	strb	r3, [r7, #27]
 8003a1e:	e07f      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a20:	2310      	movs	r3, #16
 8003a22:	76fb      	strb	r3, [r7, #27]
 8003a24:	bf00      	nop
 8003a26:	e07b      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a59      	ldr	r2, [pc, #356]	; (8003b94 <UART_SetConfig+0x2f8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d120      	bne.n	8003a74 <UART_SetConfig+0x1d8>
 8003a32:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <UART_SetConfig+0x2ec>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d00f      	beq.n	8003a60 <UART_SetConfig+0x1c4>
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d802      	bhi.n	8003a4a <UART_SetConfig+0x1ae>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <UART_SetConfig+0x1b8>
 8003a48:	e010      	b.n	8003a6c <UART_SetConfig+0x1d0>
 8003a4a:	2b80      	cmp	r3, #128	; 0x80
 8003a4c:	d005      	beq.n	8003a5a <UART_SetConfig+0x1be>
 8003a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a50:	d009      	beq.n	8003a66 <UART_SetConfig+0x1ca>
 8003a52:	e00b      	b.n	8003a6c <UART_SetConfig+0x1d0>
 8003a54:	2300      	movs	r3, #0
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	e062      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	76fb      	strb	r3, [r7, #27]
 8003a5e:	e05f      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a60:	2304      	movs	r3, #4
 8003a62:	76fb      	strb	r3, [r7, #27]
 8003a64:	e05c      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a66:	2308      	movs	r3, #8
 8003a68:	76fb      	strb	r3, [r7, #27]
 8003a6a:	e059      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	76fb      	strb	r3, [r7, #27]
 8003a70:	bf00      	nop
 8003a72:	e055      	b.n	8003b20 <UART_SetConfig+0x284>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a47      	ldr	r2, [pc, #284]	; (8003b98 <UART_SetConfig+0x2fc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d124      	bne.n	8003ac8 <UART_SetConfig+0x22c>
 8003a7e:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <UART_SetConfig+0x2ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8c:	d012      	beq.n	8003ab4 <UART_SetConfig+0x218>
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a92:	d802      	bhi.n	8003a9a <UART_SetConfig+0x1fe>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <UART_SetConfig+0x20c>
 8003a98:	e012      	b.n	8003ac0 <UART_SetConfig+0x224>
 8003a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9e:	d006      	beq.n	8003aae <UART_SetConfig+0x212>
 8003aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa4:	d009      	beq.n	8003aba <UART_SetConfig+0x21e>
 8003aa6:	e00b      	b.n	8003ac0 <UART_SetConfig+0x224>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	76fb      	strb	r3, [r7, #27]
 8003aac:	e038      	b.n	8003b20 <UART_SetConfig+0x284>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	76fb      	strb	r3, [r7, #27]
 8003ab2:	e035      	b.n	8003b20 <UART_SetConfig+0x284>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e032      	b.n	8003b20 <UART_SetConfig+0x284>
 8003aba:	2308      	movs	r3, #8
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e02f      	b.n	8003b20 <UART_SetConfig+0x284>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	bf00      	nop
 8003ac6:	e02b      	b.n	8003b20 <UART_SetConfig+0x284>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <UART_SetConfig+0x2e4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d124      	bne.n	8003b1c <UART_SetConfig+0x280>
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <UART_SetConfig+0x2ec>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d012      	beq.n	8003b08 <UART_SetConfig+0x26c>
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d802      	bhi.n	8003aee <UART_SetConfig+0x252>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <UART_SetConfig+0x260>
 8003aec:	e012      	b.n	8003b14 <UART_SetConfig+0x278>
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d006      	beq.n	8003b02 <UART_SetConfig+0x266>
 8003af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003af8:	d009      	beq.n	8003b0e <UART_SetConfig+0x272>
 8003afa:	e00b      	b.n	8003b14 <UART_SetConfig+0x278>
 8003afc:	2300      	movs	r3, #0
 8003afe:	76fb      	strb	r3, [r7, #27]
 8003b00:	e00e      	b.n	8003b20 <UART_SetConfig+0x284>
 8003b02:	2302      	movs	r3, #2
 8003b04:	76fb      	strb	r3, [r7, #27]
 8003b06:	e00b      	b.n	8003b20 <UART_SetConfig+0x284>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e008      	b.n	8003b20 <UART_SetConfig+0x284>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	76fb      	strb	r3, [r7, #27]
 8003b12:	e005      	b.n	8003b20 <UART_SetConfig+0x284>
 8003b14:	2310      	movs	r3, #16
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	bf00      	nop
 8003b1a:	e001      	b.n	8003b20 <UART_SetConfig+0x284>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <UART_SetConfig+0x2e4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	f040 8087 	bne.w	8003c3a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b2c:	7efb      	ldrb	r3, [r7, #27]
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d836      	bhi.n	8003ba0 <UART_SetConfig+0x304>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <UART_SetConfig+0x29c>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b5d 	.word	0x08003b5d
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003b65 	.word	0x08003b65
 8003b44:	08003ba1 	.word	0x08003ba1
 8003b48:	08003b6b 	.word	0x08003b6b
 8003b4c:	08003ba1 	.word	0x08003ba1
 8003b50:	08003ba1 	.word	0x08003ba1
 8003b54:	08003ba1 	.word	0x08003ba1
 8003b58:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7ff f914 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003b60:	6178      	str	r0, [r7, #20]
        break;
 8003b62:	e022      	b.n	8003baa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <UART_SetConfig+0x300>)
 8003b66:	617b      	str	r3, [r7, #20]
        break;
 8003b68:	e01f      	b.n	8003baa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7ff f877 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003b6e:	6178      	str	r0, [r7, #20]
        break;
 8003b70:	e01b      	b.n	8003baa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	617b      	str	r3, [r7, #20]
        break;
 8003b78:	e017      	b.n	8003baa <UART_SetConfig+0x30e>
 8003b7a:	bf00      	nop
 8003b7c:	efff69f3 	.word	0xefff69f3
 8003b80:	40008000 	.word	0x40008000
 8003b84:	40013800 	.word	0x40013800
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40004400 	.word	0x40004400
 8003b90:	40004800 	.word	0x40004800
 8003b94:	40004c00 	.word	0x40004c00
 8003b98:	40005000 	.word	0x40005000
 8003b9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	76bb      	strb	r3, [r7, #26]
        break;
 8003ba8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80f1 	beq.w	8003d94 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d305      	bcc.n	8003bce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d902      	bls.n	8003bd4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	76bb      	strb	r3, [r7, #26]
 8003bd2:	e0df      	b.n	8003d94 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f04f 0400 	mov.w	r4, #0
 8003be4:	0214      	lsls	r4, r2, #8
 8003be6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003bea:	020b      	lsls	r3, r1, #8
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6852      	ldr	r2, [r2, #4]
 8003bf0:	0852      	lsrs	r2, r2, #1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	eb13 0b01 	adds.w	fp, r3, r1
 8003bfc:	eb44 0c02 	adc.w	ip, r4, r2
 8003c00:	4658      	mov	r0, fp
 8003c02:	4661      	mov	r1, ip
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f04f 0400 	mov.w	r4, #0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	f7fc fae6 	bl	80001e0 <__aeabi_uldivmod>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c20:	d308      	bcc.n	8003c34 <UART_SetConfig+0x398>
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c28:	d204      	bcs.n	8003c34 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	e0af      	b.n	8003d94 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	76bb      	strb	r3, [r7, #26]
 8003c38:	e0ac      	b.n	8003d94 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c42:	d15b      	bne.n	8003cfc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c44:	7efb      	ldrb	r3, [r7, #27]
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d827      	bhi.n	8003c9a <UART_SetConfig+0x3fe>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x3b4>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c7d 	.word	0x08003c7d
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c9b 	.word	0x08003c9b
 8003c60:	08003c8b 	.word	0x08003c8b
 8003c64:	08003c9b 	.word	0x08003c9b
 8003c68:	08003c9b 	.word	0x08003c9b
 8003c6c:	08003c9b 	.word	0x08003c9b
 8003c70:	08003c93 	.word	0x08003c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7ff f888 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003c78:	6178      	str	r0, [r7, #20]
        break;
 8003c7a:	e013      	b.n	8003ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c7c:	f7ff f89a 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003c80:	6178      	str	r0, [r7, #20]
        break;
 8003c82:	e00f      	b.n	8003ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <UART_SetConfig+0x510>)
 8003c86:	617b      	str	r3, [r7, #20]
        break;
 8003c88:	e00c      	b.n	8003ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8a:	f7fe ffe7 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003c8e:	6178      	str	r0, [r7, #20]
        break;
 8003c90:	e008      	b.n	8003ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c96:	617b      	str	r3, [r7, #20]
        break;
 8003c98:	e004      	b.n	8003ca4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	76bb      	strb	r3, [r7, #26]
        break;
 8003ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d074      	beq.n	8003d94 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	005a      	lsls	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b0f      	cmp	r3, #15
 8003cc6:	d916      	bls.n	8003cf6 <UART_SetConfig+0x45a>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d212      	bcs.n	8003cf6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f023 030f 	bic.w	r3, r3, #15
 8003cd8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	89fa      	ldrh	r2, [r7, #14]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	e04e      	b.n	8003d94 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	76bb      	strb	r3, [r7, #26]
 8003cfa:	e04b      	b.n	8003d94 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cfc:	7efb      	ldrb	r3, [r7, #27]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d827      	bhi.n	8003d52 <UART_SetConfig+0x4b6>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x46c>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d53 	.word	0x08003d53
 8003d18:	08003d43 	.word	0x08003d43
 8003d1c:	08003d53 	.word	0x08003d53
 8003d20:	08003d53 	.word	0x08003d53
 8003d24:	08003d53 	.word	0x08003d53
 8003d28:	08003d4b 	.word	0x08003d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7ff f82c 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003d30:	6178      	str	r0, [r7, #20]
        break;
 8003d32:	e013      	b.n	8003d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d34:	f7ff f83e 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003d38:	6178      	str	r0, [r7, #20]
        break;
 8003d3a:	e00f      	b.n	8003d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <UART_SetConfig+0x510>)
 8003d3e:	617b      	str	r3, [r7, #20]
        break;
 8003d40:	e00c      	b.n	8003d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d42:	f7fe ff8b 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003d46:	6178      	str	r0, [r7, #20]
        break;
 8003d48:	e008      	b.n	8003d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4e:	617b      	str	r3, [r7, #20]
        break;
 8003d50:	e004      	b.n	8003d5c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	76bb      	strb	r3, [r7, #26]
        break;
 8003d5a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	085a      	lsrs	r2, r3, #1
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	441a      	add	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	d908      	bls.n	8003d90 <UART_SetConfig+0x4f4>
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d204      	bcs.n	8003d90 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	e001      	b.n	8003d94 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003da0:	7ebb      	ldrb	r3, [r7, #26]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003dac:	00f42400 	.word	0x00f42400

08003db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eae:	d10a      	bne.n	8003ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f02:	f7fd fe93 	bl	8001c2c <HAL_GetTick>
 8003f06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d10e      	bne.n	8003f34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f82a 	bl	8003f7e <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e020      	b.n	8003f76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d10e      	bne.n	8003f60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f814 	bl	8003f7e <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e00a      	b.n	8003f76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8e:	e05d      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d059      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f98:	f7fd fe48 	bl	8001c2c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11b      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e042      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02b      	beq.n	800404c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d123      	bne.n	800404c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800401c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e00f      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	d092      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004086:	2b84      	cmp	r3, #132	; 0x84
 8004088:	d005      	beq.n	8004096 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800408a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	3303      	adds	r3, #3
 8004094:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004096:	68fb      	ldr	r3, [r7, #12]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040a8:	f000 fada 	bl	8004660 <vTaskStartScheduler>
  
  return osOK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b4:	b089      	sub	sp, #36	; 0x24
 80040b6:	af04      	add	r7, sp, #16
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <osThreadCreate+0x54>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01c      	beq.n	8004106 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685c      	ldr	r4, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681d      	ldr	r5, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691e      	ldr	r6, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ffc8 	bl	8004074 <makeFreeRtosPriority>
 80040e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ee:	9202      	str	r2, [sp, #8]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	9100      	str	r1, [sp, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4632      	mov	r2, r6
 80040f8:	4629      	mov	r1, r5
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 f8ed 	bl	80042da <xTaskCreateStatic>
 8004100:	4603      	mov	r3, r0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e01c      	b.n	8004140 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685c      	ldr	r4, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004112:	b29e      	uxth	r6, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ffaa 	bl	8004074 <makeFreeRtosPriority>
 8004120:	4602      	mov	r2, r0
 8004122:	f107 030c 	add.w	r3, r7, #12
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	4632      	mov	r2, r6
 800412e:	4629      	mov	r1, r5
 8004130:	4620      	mov	r0, r4
 8004132:	f000 f92c 	bl	800438e <xTaskCreate>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800414a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <osDelay+0x16>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e000      	b.n	8004162 <osDelay+0x18>
 8004160:	2301      	movs	r3, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fa48 	bl	80045f8 <vTaskDelay>
  
  return osOK;
 8004168:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0208 	add.w	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0208 	add.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f103 0208 	add.w	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e00c      	b.n	800424e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3308      	adds	r3, #8
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e002      	b.n	8004242 <vListInsert+0x2e>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	d2f6      	bcs.n	800423c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6852      	ldr	r2, [r2, #4]
 80042a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d103      	bne.n	80042ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08e      	sub	sp, #56	; 0x38
 80042de:	af04      	add	r7, sp, #16
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	e7fe      	b.n	8004300 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xTaskCreateStatic+0x42>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e7fe      	b.n	800431a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800431c:	2354      	movs	r3, #84	; 0x54
 800431e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b54      	cmp	r3, #84	; 0x54
 8004324:	d009      	beq.n	800433a <xTaskCreateStatic+0x60>
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e7fe      	b.n	8004338 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800433a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01e      	beq.n	8004380 <xTaskCreateStatic+0xa6>
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2202      	movs	r2, #2
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800435a:	2300      	movs	r3, #0
 800435c:	9303      	str	r3, [sp, #12]
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9302      	str	r3, [sp, #8]
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f850 	bl	8004418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800437a:	f000 f8d3 	bl	8004524 <prvAddNewTaskToReadyList>
 800437e:	e001      	b.n	8004384 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004384:	697b      	ldr	r3, [r7, #20]
	}
 8004386:	4618      	mov	r0, r3
 8004388:	3728      	adds	r7, #40	; 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800438e:	b580      	push	{r7, lr}
 8004390:	b08c      	sub	sp, #48	; 0x30
 8004392:	af04      	add	r7, sp, #16
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fece 	bl	8005144 <pvPortMalloc>
 80043a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043b0:	2054      	movs	r0, #84	; 0x54
 80043b2:	f000 fec7 	bl	8005144 <pvPortMalloc>
 80043b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
 80043c4:	e005      	b.n	80043d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f000 ff7e 	bl	80052c8 <vPortFree>
 80043cc:	e001      	b.n	80043d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	2300      	movs	r3, #0
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	9302      	str	r3, [sp, #8]
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f80e 	bl	8004418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043fc:	69f8      	ldr	r0, [r7, #28]
 80043fe:	f000 f891 	bl	8004524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e002      	b.n	800440e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800440e:	69bb      	ldr	r3, [r7, #24]
	}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004430:	3b01      	subs	r3, #1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <prvInitialiseNewTask+0x46>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e7fe      	b.n	800445c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01f      	beq.n	80044a4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e012      	b.n	8004490 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	7819      	ldrb	r1, [r3, #0]
 8004472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	3334      	adds	r3, #52	; 0x34
 800447a:	460a      	mov	r2, r1
 800447c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3301      	adds	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	d9e9      	bls.n	800446a <prvInitialiseNewTask+0x52>
 8004496:	e000      	b.n	800449a <prvInitialiseNewTask+0x82>
			{
				break;
 8004498:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a2:	e003      	b.n	80044ac <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d901      	bls.n	80044b6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044b2:	2306      	movs	r3, #6
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2200      	movs	r2, #0
 80044c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fe70 	bl	80041b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	3318      	adds	r3, #24
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fe6b 	bl	80041b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	f1c3 0207 	rsb	r2, r3, #7
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2200      	movs	r2, #0
 80044f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	69b8      	ldr	r0, [r7, #24]
 8004506:	f000 fc1b 	bl	8004d40 <pxPortInitialiseStack>
 800450a:	4602      	mov	r2, r0
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800452c:	f000 fd2e 	bl	8004f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <prvAddNewTaskToReadyList+0xb8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <prvAddNewTaskToReadyList+0xb8>)
 8004538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004542:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004548:	4b24      	ldr	r3, [pc, #144]	; (80045dc <prvAddNewTaskToReadyList+0xb8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d110      	bne.n	8004572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004550:	f000 fab8 	bl	8004ac4 <prvInitialiseTaskLists>
 8004554:	e00d      	b.n	8004572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004556:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <prvAddNewTaskToReadyList+0xc0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d802      	bhi.n	8004572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <prvAddNewTaskToReadyList+0xc4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <prvAddNewTaskToReadyList+0xc4>)
 800457a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	2201      	movs	r2, #1
 8004582:	409a      	lsls	r2, r3
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <prvAddNewTaskToReadyList+0xc8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4313      	orrs	r3, r2
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <prvAddNewTaskToReadyList+0xc8>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <prvAddNewTaskToReadyList+0xcc>)
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7ff fe11 	bl	80041cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045aa:	f000 fd1d 	bl	8004fe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <prvAddNewTaskToReadyList+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00e      	beq.n	80045d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <prvAddNewTaskToReadyList+0xbc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d207      	bcs.n	80045d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <prvAddNewTaskToReadyList+0xd0>)
 80045c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	2000038c 	.word	0x2000038c
 80045e0:	2000028c 	.word	0x2000028c
 80045e4:	20000398 	.word	0x20000398
 80045e8:	200003a8 	.word	0x200003a8
 80045ec:	20000394 	.word	0x20000394
 80045f0:	20000290 	.word	0x20000290
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <vTaskDelay+0x60>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <vTaskDelay+0x2e>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	e7fe      	b.n	8004624 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004626:	f000 f879 	bl	800471c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fb21 	bl	8004c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004632:	f000 f881 	bl	8004738 <xTaskResumeAll>
 8004636:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <vTaskDelay+0x64>)
 8004640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200003b4 	.word	0x200003b4
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800466e:	463a      	mov	r2, r7
 8004670:	1d39      	adds	r1, r7, #4
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f7fb ff32 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	9202      	str	r2, [sp, #8]
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	2300      	movs	r3, #0
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	460a      	mov	r2, r1
 800468e:	491d      	ldr	r1, [pc, #116]	; (8004704 <vTaskStartScheduler+0xa4>)
 8004690:	481d      	ldr	r0, [pc, #116]	; (8004708 <vTaskStartScheduler+0xa8>)
 8004692:	f7ff fe22 	bl	80042da <xTaskCreateStatic>
 8004696:	4602      	mov	r2, r0
 8004698:	4b1c      	ldr	r3, [pc, #112]	; (800470c <vTaskStartScheduler+0xac>)
 800469a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <vTaskStartScheduler+0xac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e001      	b.n	80046ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d115      	bne.n	80046e0 <vTaskStartScheduler+0x80>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <vTaskStartScheduler+0xb0>)
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <vTaskStartScheduler+0xb4>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <vTaskStartScheduler+0xb8>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046da:	f000 fbb9 	bl	8004e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046de:	e00d      	b.n	80046fc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d109      	bne.n	80046fc <vTaskStartScheduler+0x9c>
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e7fe      	b.n	80046fa <vTaskStartScheduler+0x9a>
}
 80046fc:	bf00      	nop
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08005684 	.word	0x08005684
 8004708:	08004a95 	.word	0x08004a95
 800470c:	200003b0 	.word	0x200003b0
 8004710:	200003ac 	.word	0x200003ac
 8004714:	20000398 	.word	0x20000398
 8004718:	20000390 	.word	0x20000390

0800471c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <vTaskSuspendAll+0x18>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4a03      	ldr	r2, [pc, #12]	; (8004734 <vTaskSuspendAll+0x18>)
 8004728:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	200003b4 	.word	0x200003b4

08004738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004746:	4b41      	ldr	r3, [pc, #260]	; (800484c <xTaskResumeAll+0x114>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <xTaskResumeAll+0x2a>
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	e7fe      	b.n	8004760 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004762:	f000 fc13 	bl	8004f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <xTaskResumeAll+0x114>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	4a37      	ldr	r2, [pc, #220]	; (800484c <xTaskResumeAll+0x114>)
 800476e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <xTaskResumeAll+0x114>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d161      	bne.n	800483c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004778:	4b35      	ldr	r3, [pc, #212]	; (8004850 <xTaskResumeAll+0x118>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d05d      	beq.n	800483c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004780:	e02e      	b.n	80047e0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004782:	4b34      	ldr	r3, [pc, #208]	; (8004854 <xTaskResumeAll+0x11c>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3318      	adds	r3, #24
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fd79 	bl	8004286 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3304      	adds	r3, #4
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fd74 	bl	8004286 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	2201      	movs	r2, #1
 80047a4:	409a      	lsls	r2, r3
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <xTaskResumeAll+0x120>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <xTaskResumeAll+0x120>)
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a27      	ldr	r2, [pc, #156]	; (800485c <xTaskResumeAll+0x124>)
 80047be:	441a      	add	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7ff fd00 	bl	80041cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b23      	ldr	r3, [pc, #140]	; (8004860 <xTaskResumeAll+0x128>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <xTaskResumeAll+0x12c>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e0:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <xTaskResumeAll+0x11c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1cc      	bne.n	8004782 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047ee:	f000 fa03 	bl	8004bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <xTaskResumeAll+0x130>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d010      	beq.n	8004820 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047fe:	f000 f837 	bl	8004870 <xTaskIncrementTick>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <xTaskResumeAll+0x12c>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3b01      	subs	r3, #1
 8004812:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f1      	bne.n	80047fe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <xTaskResumeAll+0x130>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004820:	4b10      	ldr	r3, [pc, #64]	; (8004864 <xTaskResumeAll+0x12c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <xTaskResumeAll+0x134>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800483c:	f000 fbd4 	bl	8004fe8 <vPortExitCritical>

	return xAlreadyYielded;
 8004840:	68bb      	ldr	r3, [r7, #8]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200003b4 	.word	0x200003b4
 8004850:	2000038c 	.word	0x2000038c
 8004854:	2000034c 	.word	0x2000034c
 8004858:	20000394 	.word	0x20000394
 800485c:	20000290 	.word	0x20000290
 8004860:	2000028c 	.word	0x2000028c
 8004864:	200003a0 	.word	0x200003a0
 8004868:	2000039c 	.word	0x2000039c
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487a:	4b4e      	ldr	r3, [pc, #312]	; (80049b4 <xTaskIncrementTick+0x144>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 8087 	bne.w	8004992 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004884:	4b4c      	ldr	r3, [pc, #304]	; (80049b8 <xTaskIncrementTick+0x148>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800488c:	4a4a      	ldr	r2, [pc, #296]	; (80049b8 <xTaskIncrementTick+0x148>)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11f      	bne.n	80048d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004898:	4b48      	ldr	r3, [pc, #288]	; (80049bc <xTaskIncrementTick+0x14c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <xTaskIncrementTick+0x46>
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	e7fe      	b.n	80048b4 <xTaskIncrementTick+0x44>
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <xTaskIncrementTick+0x14c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <xTaskIncrementTick+0x150>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <xTaskIncrementTick+0x14c>)
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4a3e      	ldr	r2, [pc, #248]	; (80049c0 <xTaskIncrementTick+0x150>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b3e      	ldr	r3, [pc, #248]	; (80049c4 <xTaskIncrementTick+0x154>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <xTaskIncrementTick+0x154>)
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	f000 f990 	bl	8004bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048d8:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <xTaskIncrementTick+0x158>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d348      	bcc.n	8004974 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <xTaskIncrementTick+0x14c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ec:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <xTaskIncrementTick+0x158>)
 80048ee:	f04f 32ff 	mov.w	r2, #4294967295
 80048f2:	601a      	str	r2, [r3, #0]
					break;
 80048f4:	e03e      	b.n	8004974 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <xTaskIncrementTick+0x14c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d203      	bcs.n	8004916 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800490e:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <xTaskIncrementTick+0x158>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004914:	e02e      	b.n	8004974 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3304      	adds	r3, #4
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fcb3 	bl	8004286 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	3318      	adds	r3, #24
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fcaa 	bl	8004286 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	2201      	movs	r2, #1
 8004938:	409a      	lsls	r2, r3
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <xTaskIncrementTick+0x15c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <xTaskIncrementTick+0x15c>)
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <xTaskIncrementTick+0x160>)
 8004952:	441a      	add	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f7ff fc36 	bl	80041cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <xTaskIncrementTick+0x164>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	429a      	cmp	r2, r3
 800496c:	d3b9      	bcc.n	80048e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800496e:	2301      	movs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004972:	e7b6      	b.n	80048e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <xTaskIncrementTick+0x164>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4915      	ldr	r1, [pc, #84]	; (80049d0 <xTaskIncrementTick+0x160>)
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d907      	bls.n	800499c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e004      	b.n	800499c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <xTaskIncrementTick+0x168>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a0f      	ldr	r2, [pc, #60]	; (80049d8 <xTaskIncrementTick+0x168>)
 800499a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <xTaskIncrementTick+0x16c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049a8:	697b      	ldr	r3, [r7, #20]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	200003b4 	.word	0x200003b4
 80049b8:	20000390 	.word	0x20000390
 80049bc:	20000344 	.word	0x20000344
 80049c0:	20000348 	.word	0x20000348
 80049c4:	200003a4 	.word	0x200003a4
 80049c8:	200003ac 	.word	0x200003ac
 80049cc:	20000394 	.word	0x20000394
 80049d0:	20000290 	.word	0x20000290
 80049d4:	2000028c 	.word	0x2000028c
 80049d8:	2000039c 	.word	0x2000039c
 80049dc:	200003a0 	.word	0x200003a0

080049e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049e6:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <vTaskSwitchContext+0xa0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ee:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <vTaskSwitchContext+0xa4>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049f4:	e03e      	b.n	8004a74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80049f6:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <vTaskSwitchContext+0xa4>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <vTaskSwitchContext+0xa8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	fab3 f383 	clz	r3, r3
 8004a08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	f1c3 031f 	rsb	r3, r3, #31
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	491e      	ldr	r1, [pc, #120]	; (8004a8c <vTaskSwitchContext+0xac>)
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	e7fe      	b.n	8004a38 <vTaskSwitchContext+0x58>
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <vTaskSwitchContext+0xac>)
 8004a46:	4413      	add	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d104      	bne.n	8004a6a <vTaskSwitchContext+0x8a>
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <vTaskSwitchContext+0xb0>)
 8004a72:	6013      	str	r3, [r2, #0]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	200003b4 	.word	0x200003b4
 8004a84:	200003a0 	.word	0x200003a0
 8004a88:	20000394 	.word	0x20000394
 8004a8c:	20000290 	.word	0x20000290
 8004a90:	2000028c 	.word	0x2000028c

08004a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a9c:	f000 f852 	bl	8004b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <prvIdleTask+0x28>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d9f9      	bls.n	8004a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <prvIdleTask+0x2c>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ab8:	e7f0      	b.n	8004a9c <prvIdleTask+0x8>
 8004aba:	bf00      	nop
 8004abc:	20000290 	.word	0x20000290
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	e00c      	b.n	8004aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <prvInitialiseTaskLists+0x60>)
 8004adc:	4413      	add	r3, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fb47 	bl	8004172 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b06      	cmp	r3, #6
 8004aee:	d9ef      	bls.n	8004ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004af0:	480d      	ldr	r0, [pc, #52]	; (8004b28 <prvInitialiseTaskLists+0x64>)
 8004af2:	f7ff fb3e 	bl	8004172 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004af6:	480d      	ldr	r0, [pc, #52]	; (8004b2c <prvInitialiseTaskLists+0x68>)
 8004af8:	f7ff fb3b 	bl	8004172 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004afc:	480c      	ldr	r0, [pc, #48]	; (8004b30 <prvInitialiseTaskLists+0x6c>)
 8004afe:	f7ff fb38 	bl	8004172 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b02:	480c      	ldr	r0, [pc, #48]	; (8004b34 <prvInitialiseTaskLists+0x70>)
 8004b04:	f7ff fb35 	bl	8004172 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b08:	480b      	ldr	r0, [pc, #44]	; (8004b38 <prvInitialiseTaskLists+0x74>)
 8004b0a:	f7ff fb32 	bl	8004172 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <prvInitialiseTaskLists+0x78>)
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <prvInitialiseTaskLists+0x64>)
 8004b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <prvInitialiseTaskLists+0x7c>)
 8004b16:	4a05      	ldr	r2, [pc, #20]	; (8004b2c <prvInitialiseTaskLists+0x68>)
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000290 	.word	0x20000290
 8004b28:	2000031c 	.word	0x2000031c
 8004b2c:	20000330 	.word	0x20000330
 8004b30:	2000034c 	.word	0x2000034c
 8004b34:	20000360 	.word	0x20000360
 8004b38:	20000378 	.word	0x20000378
 8004b3c:	20000344 	.word	0x20000344
 8004b40:	20000348 	.word	0x20000348

08004b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b4a:	e019      	b.n	8004b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b4c:	f000 fa1e 	bl	8004f8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <prvCheckTasksWaitingTermination+0x4c>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fb92 	bl	8004286 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <prvCheckTasksWaitingTermination+0x50>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <prvCheckTasksWaitingTermination+0x50>)
 8004b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvCheckTasksWaitingTermination+0x54>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <prvCheckTasksWaitingTermination+0x54>)
 8004b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b76:	f000 fa37 	bl	8004fe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f80e 	bl	8004b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <prvCheckTasksWaitingTermination+0x54>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e1      	bne.n	8004b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000360 	.word	0x20000360
 8004b94:	2000038c 	.word	0x2000038c
 8004b98:	20000374 	.word	0x20000374

08004b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d108      	bne.n	8004bc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fb88 	bl	80052c8 <vPortFree>
				vPortFree( pxTCB );
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fb85 	bl	80052c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bbe:	e017      	b.n	8004bf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d103      	bne.n	8004bd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fb7c 	bl	80052c8 <vPortFree>
	}
 8004bd0:	e00e      	b.n	8004bf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d009      	beq.n	8004bf0 <prvDeleteTCB+0x54>
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e7fe      	b.n	8004bee <prvDeleteTCB+0x52>
	}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <prvResetNextTaskUnblockTime+0x38>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <prvResetNextTaskUnblockTime+0x3c>)
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c10:	e008      	b.n	8004c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <prvResetNextTaskUnblockTime+0x38>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <prvResetNextTaskUnblockTime+0x3c>)
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20000344 	.word	0x20000344
 8004c34:	200003ac 	.word	0x200003ac

08004c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <xTaskGetSchedulerState+0x34>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c46:	2301      	movs	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	e008      	b.n	8004c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <xTaskGetSchedulerState+0x38>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c54:	2302      	movs	r3, #2
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	e001      	b.n	8004c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c5e:	687b      	ldr	r3, [r7, #4]
	}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000398 	.word	0x20000398
 8004c70:	200003b4 	.word	0x200003b4

08004c74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c84:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fafb 	bl	8004286 <uxListRemove>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d10a      	bne.n	8004ccc <prvAddCurrentTaskToDelayedList+0x58>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	481a      	ldr	r0, [pc, #104]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cc6:	f7ff fa81 	bl	80041cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cca:	e026      	b.n	8004d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cd4:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d209      	bcs.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7ff fa8f 	bl	8004214 <vListInsert>
}
 8004cf6:	e010      	b.n	8004d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f7ff fa85 	bl	8004214 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d202      	bcs.n	8004d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6013      	str	r3, [r2, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000390 	.word	0x20000390
 8004d28:	2000028c 	.word	0x2000028c
 8004d2c:	20000394 	.word	0x20000394
 8004d30:	20000378 	.word	0x20000378
 8004d34:	20000348 	.word	0x20000348
 8004d38:	20000344 	.word	0x20000344
 8004d3c:	200003ac 	.word	0x200003ac

08004d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d70:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <pxPortInitialiseStack+0x64>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b14      	subs	r3, #20
 8004d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3b04      	subs	r3, #4
 8004d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f06f 0202 	mvn.w	r2, #2
 8004d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b20      	subs	r3, #32
 8004d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d96:	68fb      	ldr	r3, [r7, #12]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	08004da9 	.word	0x08004da9

08004da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <prvTaskExitError+0x50>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d009      	beq.n	8004dd0 <prvTaskExitError+0x28>
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e7fe      	b.n	8004dce <prvTaskExitError+0x26>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004de2:	bf00      	nop
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0fc      	beq.n	8004de4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000014 	.word	0x20000014
 8004dfc:	00000000 	.word	0x00000000

08004e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <pxCurrentTCBConst2>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f380 8809 	msr	PSP, r0
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8811 	msr	BASEPRI, r0
 8004e1a:	4770      	bx	lr
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst2>:
 8004e20:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e28:	4808      	ldr	r0, [pc, #32]	; (8004e4c <prvPortStartFirstTask+0x24>)
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f380 8808 	msr	MSP, r0
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f380 8814 	msr	CONTROL, r0
 8004e3a:	b662      	cpsie	i
 8004e3c:	b661      	cpsie	f
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	df00      	svc	0
 8004e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e4a:	bf00      	nop
 8004e4c:	e000ed08 	.word	0xe000ed08

08004e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e56:	4b44      	ldr	r3, [pc, #272]	; (8004f68 <xPortStartScheduler+0x118>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a44      	ldr	r2, [pc, #272]	; (8004f6c <xPortStartScheduler+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d109      	bne.n	8004e74 <xPortStartScheduler+0x24>
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e7fe      	b.n	8004e72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e74:	4b3c      	ldr	r3, [pc, #240]	; (8004f68 <xPortStartScheduler+0x118>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <xPortStartScheduler+0x120>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d109      	bne.n	8004e92 <xPortStartScheduler+0x42>
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e7fe      	b.n	8004e90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e92:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <xPortStartScheduler+0x124>)
 8004e94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	22ff      	movs	r2, #255	; 0xff
 8004ea2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4b30      	ldr	r3, [pc, #192]	; (8004f78 <xPortStartScheduler+0x128>)
 8004eb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eba:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ec0:	e009      	b.n	8004ed6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	4a2c      	ldr	r2, [pc, #176]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004eca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d0ef      	beq.n	8004ec2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1c3 0307 	rsb	r3, r3, #7
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d009      	beq.n	8004f02 <xPortStartScheduler+0xb2>
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	e7fe      	b.n	8004f00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004f0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004f16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f20:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <xPortStartScheduler+0x130>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <xPortStartScheduler+0x130>)
 8004f26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <xPortStartScheduler+0x130>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <xPortStartScheduler+0x130>)
 8004f32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f38:	f000 f8d6 	bl	80050e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f42:	f000 f8f5 	bl	8005130 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f52:	f7ff ff69 	bl	8004e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f56:	f7ff fd43 	bl	80049e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f5a:	f7ff ff25 	bl	8004da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	e000ed00 	.word	0xe000ed00
 8004f6c:	410fc271 	.word	0x410fc271
 8004f70:	410fc270 	.word	0x410fc270
 8004f74:	e000e400 	.word	0xe000e400
 8004f78:	200003b8 	.word	0x200003b8
 8004f7c:	200003bc 	.word	0x200003bc
 8004f80:	e000ed20 	.word	0xe000ed20
 8004f84:	20000014 	.word	0x20000014
 8004f88:	e000ef34 	.word	0xe000ef34

08004f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <vPortEnterCritical+0x54>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	4a0d      	ldr	r2, [pc, #52]	; (8004fe0 <vPortEnterCritical+0x54>)
 8004fac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <vPortEnterCritical+0x54>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d10e      	bne.n	8004fd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <vPortEnterCritical+0x58>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <vPortEnterCritical+0x48>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	e7fe      	b.n	8004fd2 <vPortEnterCritical+0x46>
	}
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	20000014 	.word	0x20000014
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <vPortExitCritical+0x4c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <vPortExitCritical+0x22>
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	e7fe      	b.n	8005008 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <vPortExitCritical+0x4c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3b01      	subs	r3, #1
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <vPortExitCritical+0x4c>)
 8005012:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <vPortExitCritical+0x4c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <vPortExitCritical+0x3e>
 800501c:	2300      	movs	r3, #0
 800501e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000014 	.word	0x20000014
	...

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f01e 0f10 	tst.w	lr, #16
 8005050:	bf08      	it	eq
 8005052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005064:	f380 8811 	msr	BASEPRI, r0
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f7ff fcb6 	bl	80049e0 <vTaskSwitchContext>
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f380 8811 	msr	BASEPRI, r0
 800507c:	bc09      	pop	{r0, r3}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	f01e 0f10 	tst.w	lr, #16
 800508a:	bf08      	it	eq
 800508c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005090:	f380 8809 	msr	PSP, r0
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst>:
 80050a0:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050c0:	f7ff fbd6 	bl	8004870 <xTaskIncrementTick>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <xPortSysTickHandler+0x3c>)
 80050cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	2300      	movs	r3, #0
 80050d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <vPortSetupTimerInterrupt+0x34>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortSetupTimerInterrupt+0x38>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <vPortSetupTimerInterrupt+0x3c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <vPortSetupTimerInterrupt+0x40>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	4a09      	ldr	r2, [pc, #36]	; (800512c <vPortSetupTimerInterrupt+0x44>)
 8005106:	3b01      	subs	r3, #1
 8005108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800510a:	4b04      	ldr	r3, [pc, #16]	; (800511c <vPortSetupTimerInterrupt+0x34>)
 800510c:	2207      	movs	r2, #7
 800510e:	601a      	str	r2, [r3, #0]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	e000e010 	.word	0xe000e010
 8005120:	e000e018 	.word	0xe000e018
 8005124:	20000008 	.word	0x20000008
 8005128:	10624dd3 	.word	0x10624dd3
 800512c:	e000e014 	.word	0xe000e014

08005130 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005130:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005140 <vPortEnableVFP+0x10>
 8005134:	6801      	ldr	r1, [r0, #0]
 8005136:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800513a:	6001      	str	r1, [r0, #0]
 800513c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800513e:	bf00      	nop
 8005140:	e000ed88 	.word	0xe000ed88

08005144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005150:	f7ff fae4 	bl	800471c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005154:	4b57      	ldr	r3, [pc, #348]	; (80052b4 <pvPortMalloc+0x170>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800515c:	f000 f90c 	bl	8005378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005160:	4b55      	ldr	r3, [pc, #340]	; (80052b8 <pvPortMalloc+0x174>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	f040 808c 	bne.w	8005286 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01c      	beq.n	80051ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005174:	2208      	movs	r2, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4413      	add	r3, r2
 800517a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d013      	beq.n	80051ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f023 0307 	bic.w	r3, r3, #7
 800518c:	3308      	adds	r3, #8
 800518e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <pvPortMalloc+0x6a>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e7fe      	b.n	80051ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d068      	beq.n	8005286 <pvPortMalloc+0x142>
 80051b4:	4b41      	ldr	r3, [pc, #260]	; (80052bc <pvPortMalloc+0x178>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d863      	bhi.n	8005286 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051be:	4b40      	ldr	r3, [pc, #256]	; (80052c0 <pvPortMalloc+0x17c>)
 80051c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051c2:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <pvPortMalloc+0x17c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051c8:	e004      	b.n	80051d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d903      	bls.n	80051e6 <pvPortMalloc+0xa2>
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f1      	bne.n	80051ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051e6:	4b33      	ldr	r3, [pc, #204]	; (80052b4 <pvPortMalloc+0x170>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d04a      	beq.n	8005286 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2208      	movs	r2, #8
 80051f6:	4413      	add	r3, r2
 80051f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	2308      	movs	r3, #8
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	429a      	cmp	r2, r3
 8005210:	d91e      	bls.n	8005250 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4413      	add	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <pvPortMalloc+0xf4>
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	e7fe      	b.n	8005236 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800524a:	69b8      	ldr	r0, [r7, #24]
 800524c:	f000 f8f6 	bl	800543c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005250:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <pvPortMalloc+0x178>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a18      	ldr	r2, [pc, #96]	; (80052bc <pvPortMalloc+0x178>)
 800525c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800525e:	4b17      	ldr	r3, [pc, #92]	; (80052bc <pvPortMalloc+0x178>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <pvPortMalloc+0x180>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d203      	bcs.n	8005272 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800526a:	4b14      	ldr	r3, [pc, #80]	; (80052bc <pvPortMalloc+0x178>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <pvPortMalloc+0x180>)
 8005270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <pvPortMalloc+0x174>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	431a      	orrs	r2, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005286:	f7ff fa57 	bl	8004738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	2b00      	cmp	r3, #0
 8005292:	d009      	beq.n	80052a8 <pvPortMalloc+0x164>
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e7fe      	b.n	80052a6 <pvPortMalloc+0x162>
	return pvReturn;
 80052a8:	69fb      	ldr	r3, [r7, #28]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3728      	adds	r7, #40	; 0x28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000f80 	.word	0x20000f80
 80052b8:	20000f8c 	.word	0x20000f8c
 80052bc:	20000f84 	.word	0x20000f84
 80052c0:	20000f78 	.word	0x20000f78
 80052c4:	20000f88 	.word	0x20000f88

080052c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d046      	beq.n	8005368 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052da:	2308      	movs	r3, #8
 80052dc:	425b      	negs	r3, r3
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <vPortFree+0xa8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <vPortFree+0x42>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e7fe      	b.n	8005308 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <vPortFree+0x5e>
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	60bb      	str	r3, [r7, #8]
 8005324:	e7fe      	b.n	8005324 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <vPortFree+0xa8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d019      	beq.n	8005368 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d115      	bne.n	8005368 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <vPortFree+0xa8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800534c:	f7ff f9e6 	bl	800471c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <vPortFree+0xac>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4413      	add	r3, r2
 800535a:	4a06      	ldr	r2, [pc, #24]	; (8005374 <vPortFree+0xac>)
 800535c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800535e:	6938      	ldr	r0, [r7, #16]
 8005360:	f000 f86c 	bl	800543c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005364:	f7ff f9e8 	bl	8004738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005368:	bf00      	nop
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000f8c 	.word	0x20000f8c
 8005374:	20000f84 	.word	0x20000f84

08005378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800537e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005384:	4b27      	ldr	r3, [pc, #156]	; (8005424 <prvHeapInit+0xac>)
 8005386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00c      	beq.n	80053ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3307      	adds	r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0307 	bic.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	4a1f      	ldr	r2, [pc, #124]	; (8005424 <prvHeapInit+0xac>)
 80053a8:	4413      	add	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053b0:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <prvHeapInit+0xb0>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053b6:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <prvHeapInit+0xb0>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	4413      	add	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053c4:	2208      	movs	r2, #8
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0307 	bic.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <prvHeapInit+0xb4>)
 80053d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <prvHeapInit+0xb4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <prvHeapInit+0xb4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <prvHeapInit+0xb4>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <prvHeapInit+0xb8>)
 8005406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <prvHeapInit+0xbc>)
 800540e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <prvHeapInit+0xc0>)
 8005412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	200003c0 	.word	0x200003c0
 8005428:	20000f78 	.word	0x20000f78
 800542c:	20000f80 	.word	0x20000f80
 8005430:	20000f88 	.word	0x20000f88
 8005434:	20000f84 	.word	0x20000f84
 8005438:	20000f8c 	.word	0x20000f8c

0800543c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005444:	4b28      	ldr	r3, [pc, #160]	; (80054e8 <prvInsertBlockIntoFreeList+0xac>)
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e002      	b.n	8005450 <prvInsertBlockIntoFreeList+0x14>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d8f7      	bhi.n	800544a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4413      	add	r3, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d108      	bne.n	800547e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	441a      	add	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d118      	bne.n	80054c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <prvInsertBlockIntoFreeList+0xb0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d00d      	beq.n	80054ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	441a      	add	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e008      	b.n	80054cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <prvInsertBlockIntoFreeList+0xb0>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e003      	b.n	80054cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d002      	beq.n	80054da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000f78 	.word	0x20000f78
 80054ec:	20000f80 	.word	0x20000f80

080054f0 <__libc_init_array>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4e0d      	ldr	r6, [pc, #52]	; (8005528 <__libc_init_array+0x38>)
 80054f4:	4c0d      	ldr	r4, [pc, #52]	; (800552c <__libc_init_array+0x3c>)
 80054f6:	1ba4      	subs	r4, r4, r6
 80054f8:	10a4      	asrs	r4, r4, #2
 80054fa:	2500      	movs	r5, #0
 80054fc:	42a5      	cmp	r5, r4
 80054fe:	d109      	bne.n	8005514 <__libc_init_array+0x24>
 8005500:	4e0b      	ldr	r6, [pc, #44]	; (8005530 <__libc_init_array+0x40>)
 8005502:	4c0c      	ldr	r4, [pc, #48]	; (8005534 <__libc_init_array+0x44>)
 8005504:	f000 f838 	bl	8005578 <_init>
 8005508:	1ba4      	subs	r4, r4, r6
 800550a:	10a4      	asrs	r4, r4, #2
 800550c:	2500      	movs	r5, #0
 800550e:	42a5      	cmp	r5, r4
 8005510:	d105      	bne.n	800551e <__libc_init_array+0x2e>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005518:	4798      	blx	r3
 800551a:	3501      	adds	r5, #1
 800551c:	e7ee      	b.n	80054fc <__libc_init_array+0xc>
 800551e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005522:	4798      	blx	r3
 8005524:	3501      	adds	r5, #1
 8005526:	e7f2      	b.n	800550e <__libc_init_array+0x1e>
 8005528:	080056e0 	.word	0x080056e0
 800552c:	080056e0 	.word	0x080056e0
 8005530:	080056e0 	.word	0x080056e0
 8005534:	080056e4 	.word	0x080056e4

08005538 <memset>:
 8005538:	4402      	add	r2, r0
 800553a:	4603      	mov	r3, r0
 800553c:	4293      	cmp	r3, r2
 800553e:	d100      	bne.n	8005542 <memset+0xa>
 8005540:	4770      	bx	lr
 8005542:	f803 1b01 	strb.w	r1, [r3], #1
 8005546:	e7f9      	b.n	800553c <memset+0x4>

08005548 <strcat>:
 8005548:	b510      	push	{r4, lr}
 800554a:	4603      	mov	r3, r0
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	1c5c      	adds	r4, r3, #1
 8005550:	b93a      	cbnz	r2, 8005562 <strcat+0x1a>
 8005552:	3b01      	subs	r3, #1
 8005554:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005558:	f803 2f01 	strb.w	r2, [r3, #1]!
 800555c:	2a00      	cmp	r2, #0
 800555e:	d1f9      	bne.n	8005554 <strcat+0xc>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	4623      	mov	r3, r4
 8005564:	e7f2      	b.n	800554c <strcat+0x4>

08005566 <strcpy>:
 8005566:	4603      	mov	r3, r0
 8005568:	f811 2b01 	ldrb.w	r2, [r1], #1
 800556c:	f803 2b01 	strb.w	r2, [r3], #1
 8005570:	2a00      	cmp	r2, #0
 8005572:	d1f9      	bne.n	8005568 <strcpy+0x2>
 8005574:	4770      	bx	lr
	...

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
